<?xml version="1.0"?>
<doc>
    <assembly>
        <name>rw3</name>
    </assembly>
    <members>
        <member name="T:RW.Authorize.frmAuthorize">
            <summary>
            软件注册窗体
            </summary>
        </member>
        <member name="M:RW.Authorize.frmAuthorize.IsAuthorizeSuccess">
            <summary>
            是否验证成功
            </summary>
            <returns></returns>
        </member>
        <member name="F:RW.Authorize.frmAuthorize.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Authorize.frmAuthorize.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Authorize.frmAuthorize.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Authorize.SoftAuthorize">
            <summary>
            软件授权类
            </summary>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.#ctor(System.Boolean)">
            <summary>
            实例化一个软件授权类
            </summary>
            <param name="UseAdmin">是否使用管理员模式</param>
        </member>
        <member name="F:RW.Authorize.SoftAuthorize.TextCode">
            <summary>
            注册码描述文本
            </summary>
        </member>
        <member name="P:RW.Authorize.SoftAuthorize.FinalCodes">
            <summary>
            最终的注册秘钥信息，注意是只读的。
            </summary>
            <remarks>
            时间：2018年9月1日 23:01:54，来自 洛阳-LYG 的建议，公开了本属性信息，只读。
            2020-06-13 
            </remarks>
        </member>
        <member name="P:RW.Authorize.SoftAuthorize.IsReleaseVersion">
            <summary>
            是否正式发行版，是的话就取消授权
            </summary>
        </member>
        <member name="P:RW.Authorize.SoftAuthorize.HasLoadByFile">
            <summary>
            指示是否加载过文件信息
            </summary>
        </member>
        <member name="P:RW.Authorize.SoftAuthorize.IsSoftTrial">
            <summary>
            指示系统是否处于试用运行
            </summary>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.GetMachineCodeString">
            <summary>
            获取本机的机器码
            </summary>
            <returns>机器码字符串</returns>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.SaveToFile">
            <summary>
            使用特殊加密算法加密数据
            </summary>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.LoadByFile">
            <summary>
            使用特殊解密算法解密数据
            </summary>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.CheckAuthorize(System.String,System.Func{System.String,System.String})">
            <summary>
            检查该注册码是否是正确的注册码
            </summary>
            <param name="code">注册码信息</param>
            <param name="encrypt">数据加密的方法，必须用户指定</param>
            <returns>是否注册成功</returns>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.IsAuthorizeSuccess(System.Func{System.String,System.String})">
            <summary>
            检测授权是否成功
            </summary>
            <param name="encrypt">数据加密的方法，必须用户指定</param>
            <returns>是否成功授权</returns>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.GetInfo(System.Boolean)">
            <summary>
            获取本计算机唯一的机器码  
            </summary>
            <returns>字符串形式的机器码</returns>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.GetHddInfo(System.Byte)">
            <summary>
            获得硬盘信息
            </summary>
            <param name="driveIndex">硬盘序号</param>
            <returns>硬盘信息</returns>
            <remarks>
            by sunmast for everyone
            thanks lu0 for his great works
            在Windows Array8/ME中，S.M.A.R.T并不缺省安装，请将SMARTVSD.VXD拷贝到%SYSTEM%＼IOSUBSYS目录下。
            在Windows 2000/2003下，需要Administrators组的权限。
            </remarks>
            <example>
            AtapiDevice.GetHddInfo()
            </example>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.CreateFile(System.String,System.IO.FileAccess,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.IO.FileAttributes,System.IntPtr)">
            <summary>
            执行打开/建立资源的功能。
            </summary>
            <param name="lpFileName">指定要打开的设备或文件的名称。</param>
            <param name="dwDesiredAccess">
            <para>Win32 常量，用于控制对设备的读访问、写访问或读/写访问的常数。内容如下表：
            <p><list type="table">
            <listheader>
            <term>名称</term>
            <description>说明</description>
            </listheader>
            <item>
            <term>GENERIC_READ</term><description>指定对设备进行读取访问。</description>
            </item>
            <item>
            <term>GENERIC_WRITE</term><description>指定对设备进行写访问。</description>
            </item>
            <item><term><b>0</b></term><description>如果值为零，则表示只允许获取与一个设备有关的信息。</description></item>
            </list></p>
            </para>
            </param>
            <param name="dwShareMode">指定打开设备时的文件共享模式</param>
            <param name="lpSecurityAttributes"></param>
            <param name="dwCreationDisposition">Win32 常量，指定操作系统打开文件的方式。内容如下表：
            <para><p>
            <list type="table">
            <listheader><term>名称</term><description>说明</description></listheader>
            <item>
            <term>CREATE_NEW</term>
            <description>指定操作系统应创建新文件。如果文件存在，则抛出 <see cref="T:System.IO.IOException"/> 异常。</description>
            </item>
            <item><term>CREATE_ALWAYS</term><description>指定操作系统应创建新文件。如果文件已存在，它将被改写。</description></item>
            </list>
            </p></para>
            </param>
            <param name="dwFlagsAndAttributes"></param>
            <param name="hTemplateFile"></param>
            <returns>使用函数打开的设备的句柄。</returns>
            <remarks>
            本函数可以执行打开或建立文件、文件流、目录/文件夹、物理磁盘、卷、系统控制的缓冲区、磁带设备、
            通信资源、邮件系统和命名管道。
            </remarks>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.CloseHandle(System.IntPtr)">
            <summary>
            关闭一个指定的指针对象指向的设备。。
            </summary>
            <param name="hObject">要关闭的句柄 <see cref="T:System.IntPtr"/> 对象。</param>
            <returns>成功返回 <b>0</b> ，不成功返回非零值。</returns>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.DeviceIoControl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,RW.Authorize.SoftAuthorize.GetVersionOutParams@,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            对设备执行指定的操作。
            </summary>
            <param name="hDevice">要执行操作的设备句柄。</param>
            <param name="dwIoControlCode">Win32 API 常数，输入的是以 <b>FSCTL_</b> 为前缀的常数，定义在
            <b>WinIoCtl.h</b> 文件内，执行此重载方法必须输入 <b>SMART_GET_VERSION</b> 。</param>
            <param name="lpInBuffer">当参数为指针时，默认的输入值是 <b>0</b> 。</param>
            <param name="nInBufferSize">输入缓冲区的字节数量。</param>
            <param name="lpOutBuffer">一个 <b>GetVersionOutParams</b> ，表示执行函数后输出的设备检查。</param>
            <param name="nOutBufferSize">输出缓冲区的字节数量。</param>
            <param name="lpBytesReturned">实际装载到输出缓冲区的字节数量。</param>
            <param name="lpOverlapped">同步操作控制，一般不使用，默认值为 <b>0</b> 。</param>
            <returns>非零表示成功，零表示失败。</returns>
        </member>
        <member name="M:RW.Authorize.SoftAuthorize.DeviceIoControl(System.IntPtr,System.UInt32,RW.Authorize.SoftAuthorize.SendCmdInParams@,System.UInt32,RW.Authorize.SoftAuthorize.SendCmdOutParams@,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            对设备执行指定的操作。
            </summary>
            <param name="hDevice">要执行操作的设备句柄。</param>
            <param name="dwIoControlCode">Win32 API 常数，输入的是以 <b>FSCTL_</b> 为前缀的常数，定义在
            <b>WinIoCtl.h</b> 文件内，执行此重载方法必须输入 <b>SMART_SEND_DRIVE_COMMAND</b> 或 <b>SMART_RCV_DRIVE_DATA</b> 。</param>
            <param name="lpInBuffer">一个 <b>SendCmdInParams</b> 结构，它保存向系统发送的查询要求具体命令的数据结构。</param>
            <param name="nInBufferSize">输入缓冲区的字节数量。</param>
            <param name="lpOutBuffer">一个 <b>SendCmdOutParams</b> 结构，它保存系统根据命令返回的设备相信信息二进制数据。</param>
            <param name="nOutBufferSize">输出缓冲区的字节数量。</param>
            <param name="lpBytesReturned">实际装载到输出缓冲区的字节数量。</param>
            <param name="lpOverlapped">同步操作控制，一般不使用，默认值为 <b>0</b> 。</param>
            <returns>非零表示成功，零表示失败。</returns>
        </member>
        <member name="F:RW.Authorize.SoftAuthorize.HardDiskInfo.ModuleNumber">
            <summary>
            型号
            </summary>
        </member>
        <member name="F:RW.Authorize.SoftAuthorize.HardDiskInfo.Firmware">
            <summary>
            固件版本
            </summary>
        </member>
        <member name="F:RW.Authorize.SoftAuthorize.HardDiskInfo.SerialNumber">
            <summary>
            序列号
            </summary>
        </member>
        <member name="F:RW.Authorize.SoftAuthorize.HardDiskInfo.Capacity">
            <summary>
            容量，以M为单位
            </summary>
        </member>
        <member name="T:RW.Components.Company.CompanyBLL">
            <summary>
            公司管理业务逻辑层
            </summary>
        </member>
        <member name="T:RW.Components.Company.ucCompany">
            <summary>
            测试者管理
            </summary>
        </member>
        <member name="F:RW.Components.Company.ucCompany.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Company.ucCompany.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Company.ucCompany.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.Key">
            <summary>
            点位名称
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.Unit">
            <summary>
            单位,建议使用UnitHelper.GetString()方法设置单位
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.Desc">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.Value">
            <summary>
            相关值
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.Required">
            <summary>
            是否是必须的，默认是false
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.ReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.Definition">
            <summary>
            相关的值的定义
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.KeyWidth">
            <summary>
            名称的宽度
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.ValueWidth">
            <summary>
            值的宽度
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.UnitWidth">
            <summary>
            单位的宽度
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.DescriptionWidth">
            <summary>
            描述的宽度
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.ValueRangeText">
            <summary>
            值的范围，使用字符串的方式描述
            第一种：(0,100)
            第二种：[0,100]
            第三种：1,2,3,4,5
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinition.ControlType">
            <summary>
            指定控件的类型
            </summary>
        </member>
        <member name="M:RW.Components.Config.Definition.ucValueDefinition.SetValue(System.Object)">
            <summary>
            设置值，无论值目前是什么类型。
            </summary>
        </member>
        <member name="M:RW.Components.Config.Definition.ucValueDefinition.InRange">
            <summary>
            验证值是否在范围内
            </summary>
            <returns></returns>
        </member>
        <member name="F:RW.Components.Config.Definition.ucValueDefinition.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.Definition.ucValueDefinition.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.Definition.ucValueDefinition.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.Config.Definition.DataTypeEnums">
            <summary>
            支持的数据类型
            </summary>
        </member>
        <member name="F:RW.Components.Config.Definition.frmEditValueDefinition.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.Config.Definition.frmEditValueDefinition.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.Config.Definition.frmEditValueDefinition.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RW.Components.Config.Definition.frmValueDefinition.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.Config.Definition.frmValueDefinition.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.Config.Definition.frmValueDefinition.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.frmValuePage.DefinitionConfig">
            <summary>
            指定使用的配置方式
            </summary>
        </member>
        <member name="F:RW.Components.Config.Definition.frmValuePage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.Config.Definition.frmValuePage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.Config.Definition.frmValuePage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RW.Components.Config.Definition.ucValueControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.Definition.ucValueControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.Definition.ucValueControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinitionSetting.TestName">
            <summary>
            试验名称
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ucValueDefinitionSetting.Config">
            <summary>
            配置
            </summary>
        </member>
        <member name="F:RW.Components.Config.Definition.ucValueDefinitionSetting.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.Definition.ucValueDefinitionSetting.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.Definition.ucValueDefinitionSetting.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.Config.Definition.ValueDefinition">
            <summary>
            用于值的声明
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ValueDefinition.Index">
            <summary>
            显示的索引
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ValueDefinition.Name">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ValueDefinition.IsNULL">
            <summary>
            是否允许为空
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ValueDefinition.DataType">
            <summary>
            值的类型
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ValueDefinition.DefaultValue">
            <summary>
            默认值，默认值通常与值类型相同
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ValueDefinition.Unit">
            <summary>
            显示的单位，可以使用UnitEnum.ToString()，也可以自定义显示
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ValueDefinition.Desc">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ValueDefinition.Range">
            <summary>
            值的范围，用于限定值范围。
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ValueDefinition.Alias">
            <summary>
            别名，通常用于标记Excel单元格
            </summary>
        </member>
        <member name="M:RW.Components.Config.Definition.ValueDefinitionBLL.#ctor(System.String,RW.Configuration.IConfigCollection)">
            <summary>
            初始化处理对象，通常是针对一个JSON进行处理,可选为IniFileConfig和JsonFileConfig或自定义如SQLConfig等等
            </summary>
        </member>
        <member name="P:RW.Components.Config.Definition.ValueDefinitionBLL.TestName">
            <summary>
            试验名称，也是文件名称
            </summary>
        </member>
        <member name="T:RW.Components.Config.Definition.ValueRange">
            <summary>
            值的范围
            </summary>
        </member>
        <member name="T:RW.Components.Config.frmConfigDialog">
            <summary>
            自动生成配置的界面
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmConfigDialog.#ctor">
            <summary>
            初始化默认构造窗体
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmConfigDialog.Add(RW.Configuration.IConfig)">
            <summary>
            添加一个实现自IConfig的配置。（暂时只有IniConfig和IniFileConfig可用）
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmConfigDialog.Add(System.String,RW.Configuration.IConfig)">
            <summary>
            添加一个实现自IConfig的配置。（支持非INI文件的添加）
            </summary>
        </member>
        <member name="F:RW.Components.Config.frmConfigDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmConfigDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.Config.frmConfigDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Components.Config.frmConfigrationManager">
            <summary>
            用于自动化设置参数
            默认使用ucKeyValue控件，后续将针对数据类型选择
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmConfigrationManager.#ctor">
            <summary>
            初始化默认构造
            </summary>
        </member>
        <member name="P:RW.Components.Config.frmConfigrationManager.LabelWidth">
            <summary>
            标签宽度
            </summary>
        </member>
        <member name="P:RW.Components.Config.frmConfigrationManager.ItemSize">
            <summary>
            单元项的大小
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmConfigrationManager.Add(RW.Configuration.IConfig)">
            <summary>
            添加一个实现自 IConfig 的配置（暂时支持IniConfig和IniFileConfig）。
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmConfigrationManager.Add(System.String,RW.Configuration.IConfig)">
            <summary>
            添加一个实现自 IConfig 的配置（暂时支持IniConfig和IniFileConfig）。
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmConfigrationManager.Save">
            <summary>
            保存参数
            </summary>
        </member>
        <member name="F:RW.Components.Config.frmConfigrationManager.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmConfigrationManager.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.frmConfigrationManager.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:RW.Components.Config.frmName.Text">
            <summary>
            设置的名称
            </summary>
        </member>
        <member name="F:RW.Components.Config.frmName.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmName.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.Config.frmName.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Components.Config.frmSettingMain">
            <summary>
            设置主界面
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.#ctor">
            <summary>
            初始化设置主界面
            </summary>
        </member>
        <member name="T:RW.Components.Config.frmSettingMain.SelectedNodeHandler">
            <summary>
            选中某个参数配置项事件的委托
            </summary>
        </member>
        <member name="E:RW.Components.Config.frmSettingMain.SelectedChanged">
            <summary>
            选中某个参数配置项事件
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.AddNodes(RW.Components.Config.SettingNode)">
            <summary>
            添加一个树形节点
            </summary>
            <param name="snode"></param>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.AddNodes(System.String,System.Windows.Forms.UserControl)">
            <summary>
            添加一个树形节点
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.Exists(System.String)">
            <summary>
            所有的项点
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.InsertNode(System.String,System.String,System.Windows.Forms.UserControl)">
            <summary>
            在指定位置上插入节点
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.OpenPage(System.String)">
            <summary>
            打开指定的页面
            </summary>
        </member>
        <member name="T:RW.Components.Config.frmSettingMain.SettingNodeCollection">
            <summary>
            设置节点的集合
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.#ctor(System.Windows.Forms.TreeView)">
            <summary>
            初始化节点结合对象
            </summary>
            <param name="owner">相关的树节点</param>
        </member>
        <member name="P:RW.Components.Config.frmSettingMain.SettingNodeCollection.Item(System.Int32)">
            <summary>
            根据索引获取或设置节点
            </summary>
        </member>
        <member name="P:RW.Components.Config.frmSettingMain.SettingNodeCollection.Item(System.String)">
            <summary>
            根据名称获取或设置及诶单
            </summary>
        </member>
        <member name="P:RW.Components.Config.frmSettingMain.SettingNodeCollection.Count">
            <summary>
            返回现有节点中的数量
            </summary>
        </member>
        <member name="P:RW.Components.Config.frmSettingMain.SettingNodeCollection.IsReadOnly">
            <summary>
            是否是只读模式
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.Add(System.String)">
            <summary>
            添加一个节点
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.Add(System.String,System.Windows.Forms.Control)">
            <summary>
            添加一个节点和控件
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.Add(RW.Components.Config.SettingNode)">
            <summary>
            添加一个节点
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.Clear">
            <summary>
            清除所有节点项
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.Contains(RW.Components.Config.SettingNode)">
            <summary>
            节点对象是否在容器中
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.ContainsKey(System.String)">
            <summary>
            名称是否存在节点中
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.CopyTo(RW.Components.Config.SettingNode[],System.Int32)">
            <summary>
            将所有节点拷贝到节点对象中
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.IndexOf(RW.Components.Config.SettingNode)">
            <summary>
            获取节点的索引号
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.IndexOfKey(System.String)">
            <summary>
            获取节点名称的索引号
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.Insert(System.Int32,RW.Components.Config.SettingNode)">
            <summary>
            插入一个节点项到指定位置
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.Insert(System.String,RW.Components.Config.SettingNode)">
            <summary>
            插入一个节点项到指定位置
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.Insert(System.String,System.String,System.Windows.Forms.UserControl)">
            <summary>
            插入一个节点项到指定位置
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.Remove(RW.Components.Config.SettingNode)">
            <summary>
            删除一个节点项
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.RemoveKey(System.String)">
            <summary>
            根据名称删除节点项
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.SettingNodeCollection.RemoveAt(System.Int32)">
            <summary>
            删除指定位置的节点项
            </summary>
        </member>
        <member name="F:RW.Components.Config.frmSettingMain.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.frmSettingMain.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.Config.SettingNode">
            <summary>
            一个基于树形结构的说明类
            </summary>
        </member>
        <member name="M:RW.Components.Config.SettingNode.#ctor">
            <summary>
            初始化 SettingNode 实例
            </summary>
        </member>
        <member name="M:RW.Components.Config.SettingNode.#ctor(System.String)">
            <summary>
            初始化 SettingNode 实例
            </summary>
        </member>
        <member name="M:RW.Components.Config.SettingNode.#ctor(System.String,System.Windows.Forms.UserControl)">
            <summary>
            初始化 SettingNode 实例
            </summary>
        </member>
        <member name="P:RW.Components.Config.SettingNode.ID">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:RW.Components.Config.SettingNode.Text">
            <summary>
            显示的文本
            </summary>
        </member>
        <member name="P:RW.Components.Config.SettingNode.Name">
            <summary>
            显示ID名称
            </summary>
        </member>
        <member name="P:RW.Components.Config.SettingNode.UI">
            <summary>
            相关联的用户控件
            </summary>
        </member>
        <member name="P:RW.Components.Config.SettingNode.Nodes">
            <summary>
            子控件
            </summary>
        </member>
        <member name="F:RW.Components.Config.Setting.frmSettings.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.Config.Setting.frmSettings.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.Config.Setting.frmSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Components.Config.Setting.SettingItem">
            <summary>
            节点项
            </summary>
        </member>
        <member name="P:RW.Components.Config.Setting.SettingItem.Name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:RW.Components.Config.Setting.SettingItem.Icon">
            <summary>
            节点图标
            </summary>
        </member>
        <member name="T:RW.Components.Config.ucBaseIDNameManager">
            <summary>
            基类，基础的ID和Name数据管理
            </summary>
        </member>
        <member name="P:RW.Components.Config.ucBaseIDNameManager.BaseIdName">
            <summary>
            业务处理依赖了BaseIDNameBLL的数据库业务层，子类需重写继承
            </summary>
        </member>
        <member name="P:RW.Components.Config.ucBaseIDNameManager.Title">
            <summary>
            标题名称
            </summary>
        </member>
        <member name="P:RW.Components.Config.ucBaseIDNameManager.CanMove">
            <summary>
            是否可以移动
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucBaseIDNameManager.Up">
            <summary>
            上移的行为动作，可以重写此动作
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucBaseIDNameManager.Down">
            <summary>
            下移的行为，可以重写此动作
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucBaseIDNameManager.Add">
            <summary>
            添加的行为，可以重写此动作
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucBaseIDNameManager.Delete">
            <summary>
            删除的行为，可以重写此动作
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucBaseIDNameManager.Change">
            <summary>
            修改行为，可以重写此动作
            </summary>
        </member>
        <member name="E:RW.Components.Config.ucBaseIDNameManager.DataChanged">
            <summary>
            当数据发生改变时触发的事件
            </summary>
        </member>
        <member name="F:RW.Components.Config.ucBaseIDNameManager.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucBaseIDNameManager.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.ucBaseIDNameManager.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.Config.ucBaseManagerUI">
            <summary>
            基础管理界面，只限定了大小，无其他控件
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucBaseManagerUI.ShowChild(System.Windows.Forms.Control,System.Action)">
            <summary>
            显示特定控件在父窗口中
            </summary>
        </member>
        <member name="F:RW.Components.Config.ucBaseManagerUI.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucBaseManagerUI.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.ucBaseManagerUI.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.Config.ucConfigrationManager">
            <summary>
            用于自动化设置参数
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucConfigrationManager.#ctor">
            <summary>
            初始化默认构造
            </summary>
        </member>
        <member name="P:RW.Components.Config.ucConfigrationManager.Editable">
            <summary>
            是否可编辑
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucConfigrationManager.Add(RW.Configuration.IConfig)">
            <summary>
            添加一个实现自 IConfig 的配置（暂时支持IniConfig和IniFileConfig）。
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucConfigrationManager.Add(System.String,RW.Configuration.IConfig)">
            <summary>
            添加一个实现自 IConfig 的配置（暂时支持IniConfig和IniFileConfig）。
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucConfigrationManager.Save">
            <summary>
            保存参数
            </summary>
        </member>
        <member name="F:RW.Components.Config.ucConfigrationManager.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucConfigrationManager.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.ucConfigrationManager.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.Config.ucKeyValue">
            <summary>
            KeyValue控件，可以使用很多支持编辑的控件
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucKeyValue.#ctor">
            <summary>
            初始化构造 ucKeyValue 控件
            </summary>
        </member>
        <member name="P:RW.Components.Config.ucKeyValue.Label">
            <summary>
            显示左边的标签
            </summary>
        </member>
        <member name="P:RW.Components.Config.ucKeyValue.Text">
            <summary>
            控件关联的标签文本
            </summary>
        </member>
        <member name="P:RW.Components.Config.ucKeyValue.LabelWidth">
            <summary>
            文本标签的宽度，自动设置textbox的宽度
            </summary>
        </member>
        <member name="P:RW.Components.Config.ucKeyValue.Value">
            <summary>
            显示右边的值
            </summary>
        </member>
        <member name="E:RW.Components.Config.ucKeyValue.ValueChanged">
            <summary>
            当值发生改变是发生的事件
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucKeyValue.ToString">
            <summary>
            使用自定义显示
            </summary>
        </member>
        <member name="F:RW.Components.Config.ucKeyValue.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucKeyValue.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.ucKeyValue.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.Config.ucKeyValueDesc">
            <summary>
            一种带描述的KeyValue的组合控件。
            </summary>
        </member>
        <member name="P:RW.Components.Config.ucKeyValueDesc.Desc">
            <summary>
            描述内容，可以是单位。或是描述内容
            </summary>
        </member>
        <member name="P:RW.Components.Config.ucKeyValueDesc.Unit">
            <summary>
            显示单位
            </summary>
        </member>
        <member name="F:RW.Components.Config.ucKeyValueDesc.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucKeyValueDesc.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.ucKeyValueDesc.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:RW.Components.Config.ucKeyValueEditor.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Config.ucKeyValueEditor.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Config.ucKeyValueEditor.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.ControlHelper">
            <summary>
            一种用于
            </summary>
        </member>
        <member name="T:RW.Components.ControlHelper.Del">
            <summary>
            用于无记名的委托
            </summary>
        </member>
        <member name="M:RW.Components.ControlHelper.ButtonClickAsync(System.Object,RW.Components.ControlHelper.Del,RW.Components.ControlHelper.Callback_Scuccess,RW.Components.ControlHelper.Callback_Error,System.Int32)">
            <summary>
            提供控件的异步点击行为，点击后设置Enabled为false，调用指定的方法，执行完毕后设置为Enabled=true。
            </summary>
        </member>
        <member name="M:RW.Components.ControlHelper.Invoke(System.Object,RW.Components.ControlHelper.Del)">
            <summary>
            将委托交给forms对象执行，此form对象必须是Control类型。
            注意del不应是耗时的动作，否则会导致主界面卡住。
            </summary>
            <param name="forms">通常是form或sender参数之类</param>
            <param name="del">待执行的委托</param>
        </member>
        <member name="T:RW.Components.Core.BLL.BaseBLL">
            <summary>
            用于业务逻辑处理
            </summary>
        </member>
        <member name="P:RW.Components.Core.BLL.BaseBLL.Connection">
            <summary>
            使用的数据库，如：OleDbConnection,SqlConnection,MySqlConnection,SQLiteConnection...等等
            </summary>
        </member>
        <member name="P:RW.Components.Core.BLL.BaseBLL.TableName">
            <summary>
            默认的表名
            </summary>
        </member>
        <member name="P:RW.Components.Core.BLL.BaseBLL.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:RW.Components.Core.BLL.BaseBLL.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:RW.Components.Core.BLL.BaseIDNameBLL">
            <summary>
            一种通用的包含ID，Name的表结构，至少包含这两个字段
            </summary>
        </member>
        <member name="T:RW.Components.Core.BLL.DBConfig">
            <summary>
            数据库配置文件
            </summary>
        </member>
        <member name="F:RW.Components.Core.BLL.DBConfig.Instance">
            <summary>
            数据库配置的单例
            </summary>
        </member>
        <member name="P:RW.Components.Core.BLL.DBConfig.AssemblyName">
            <summary>
            引用名称，通常为dll的路径
            </summary>
        </member>
        <member name="P:RW.Components.Core.BLL.DBConfig.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:RW.Components.Core.BLL.DBConfig.ConnectionType">
            <summary>
            数据库驱动
            </summary>
        </member>
        <member name="M:RW.Components.Core.BLL.DBConfig.GetConnection">
            <summary>
            根据配置获取连接对象
            </summary>
        </member>
        <member name="T:RW.Components.Core.BLL.IIDNameBLL">
            <summary>
            一种用于ID+Name的业务处理
            </summary>
        </member>
        <member name="M:RW.Components.Core.BLL.IIDNameBLL.Exists(System.String)">
            <summary>
            是否存在数据
            </summary>
        </member>
        <member name="M:RW.Components.Core.BLL.IIDNameBLL.Add(System.String)">
            <summary>
            添加一条数据
            </summary>
        </member>
        <member name="M:RW.Components.Core.BLL.IIDNameBLL.Change(System.Int32,System.String)">
            <summary>
            修改一条数据
            </summary>
        </member>
        <member name="M:RW.Components.Core.BLL.IIDNameBLL.Move(System.Int32,System.Int32)">
            <summary>
            移动一条数据
            </summary>
        </member>
        <member name="M:RW.Components.Core.BLL.IIDNameBLL.RemoveById(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:RW.Components.Core.BLL.IIDNameBLL.GetDataTable">
            <summary>
            获取DataTable
            </summary>
        </member>
        <member name="T:RW.Components.EventLogs.frmEventLogs">
            <summary>
            事件日志，提供记录事件日志的方法以及展示UI
            </summary>
        </member>
        <member name="M:RW.Components.EventLogs.frmEventLogs.#ctor">
            <summary>
             初始化新的实例
            </summary>
        </member>
        <member name="F:RW.Components.EventLogs.frmEventLogs.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.EventLogs.frmEventLogs.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.EventLogs.frmEventLogs.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RW.Components.ScreenSize.Default">
            <summary>
            默认大小为1440x900，建议指定大小
            通过指定页面的Size或者Widht、Height 来设置。
            </summary>
        </member>
        <member name="F:RW.Components.ScreenSize.W1024x768">
            <summary>
            使用1024x768，一般用于触摸屏的分辨率
            </summary>
        </member>
        <member name="F:RW.Components.ScreenSize.W1280x800">
            <summary>
            一般用于宽屏触摸屏的分辨率
            </summary>
        </member>
        <member name="F:RW.Components.ScreenSize.W1440x900">
            <summary>
            一般用于19寸显示器的分辨率
            </summary>
        </member>
        <member name="F:RW.Components.ScreenSize.W1920x1080">
            <summary>
            一般用于22寸及以上显示器的分辨率
            </summary>
        </member>
        <member name="T:RW.Components.MessageForm.CloseButton">
            <summary>
            专用关闭按钮
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.CloseButton.#ctor">
            <summary>
            初始化关闭按钮
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.CloseButton.DefaultSize">
            <summary>
            默认大小为20*20
            </summary>
        </member>
        <member name="T:RW.Components.MessageForm.DefaultMessageForm">
            <summary>
            默认的消息提示框，使用MessageBox.Show
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.DefaultMessageForm.Title">
            <summary>
            消息提示框标题
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.DefaultMessageForm.Content">
            <summary>
            消息提示框内容
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.DefaultMessageForm.Buttons">
            <summary>
            消息提示框包含的按钮，默认为OK
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.DefaultMessageForm.ShowDialog">
            <summary>
            显示消息提示框
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.DefaultMessageForm.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            在owner上显示消息提示框（主要作用于多线程）
            </summary>
            <param name="owner">一般为一个窗体</param>
        </member>
        <member name="T:RW.Components.MessageForm.FrmRWMessageForm">
            <summary>
            润伟内置的消息提示窗口
            Author: yuanyong
            Date:2022-09-30
            Desc:
            润伟新版默认消息提示窗口，需要替换或
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.FrmRWMessageForm.#ctor">
            <summary>
            构造窗体对象
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.FrmRWMessageForm.#ctor(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            构造窗体对象
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.FrmRWMessageForm.#ctor(System.String)">
            <summary>
            构造窗体对象
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.FrmRWMessageForm.#ctor(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            构造窗体对象
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.FrmRWMessageForm.ReleaseCapture">
            <summary>
            释放焦点
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.Components.MessageForm.FrmRWMessageForm.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.FrmRWMessageForm.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.FrmRWMessageForm.Content">
            <summary>
            内容信息
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.FrmRWMessageForm.ApplyStyle(RW.Components.MessageForm.PageStyle)">
            <summary>
            应用主题
            </summary>
        </member>
        <member name="F:RW.Components.MessageForm.FrmRWMessageForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.FrmRWMessageForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.MessageForm.FrmRWMessageForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Components.MessageForm.IMessageForm">
            <summary>
            消息提示窗接口
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.IMessageForm.Title">
            <summary>
            提示窗标题
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.IMessageForm.Content">
            <summary>
            提示窗内容
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.IMessageForm.Buttons">
            <summary>
            提示窗按钮
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.IMessageForm.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            显示提示框，该方法与Form的方法类似，如果Form继承则无需重写此方法
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.IMessageForm.ShowDialog">
            <summary>
            显示提示框，该方法与Form的方法类似，如果Form继承则无需重写此方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:RW.Components.MessageForm.IThemeForm">
            <summary>
            主题窗体
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.IThemeForm.ApplyStyle(RW.Components.MessageForm.PageStyle)">
            <summary>
            应用主题样式
            </summary>
        </member>
        <member name="T:RW.Components.MessageForm.PageStyle">
            <summary>
            页面样式主题
            </summary>
        </member>
        <member name="F:RW.Components.MessageForm.PageStyle.Default">
            <summary>
            默认主题样式
            </summary>
        </member>
        <member name="F:RW.Components.MessageForm.PageStyle.Dark">
            <summary>
            深色主题样式
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.PageStyle.FromName(System.String)">
            <summary>
            获取已有的颜色主题
            </summary>
            <param name="name">颜色主题名称</param>
        </member>
        <member name="M:RW.Components.MessageForm.PageStyle.AddStyle(System.String,RW.Components.MessageForm.PageStyle)">
            <summary>
            添加到主题
            </summary>
            <param name="name">主题的名称，不能使用Default和Dark</param>
            <param name="style">样式</param>
        </member>
        <member name="P:RW.Components.MessageForm.PageStyle.Page">
            <summary>
            页面的主题颜色
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.PageStyle.Head">
            <summary>
            头部的主题颜色
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.PageStyle.Button">
            <summary>
            按钮的主题颜色（暂时忽略）
            </summary>
        </member>
        <member name="T:RW.Components.MessageForm.ControlStyle">
            <summary>
            主题颜色
            </summary>
        </member>
        <member name="M:RW.Components.MessageForm.ControlStyle.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            初始化主题颜色
            </summary>
            <param name="foreColor">前景色</param>
            <param name="backColor">背景色</param>
        </member>
        <member name="P:RW.Components.MessageForm.ControlStyle.BackColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:RW.Components.MessageForm.ControlStyle.ForeColor">
            <summary>
            前景色，字体颜色
            </summary>
        </member>
        <member name="T:RW.Components.Model.ucTestModel">
            <summary>
            型号管理
            </summary>
        </member>
        <member name="F:RW.Components.Model.ucTestModel.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Model.ucTestModel.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Model.ucTestModel.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.RWBaseForm">
            <summary>
            RW基础窗体类，包含了一些通用的属性和方法
            </summary>
        </member>
        <member name="T:RW.Components.RWBox">
            <summary>
            用于系统弹窗的组件
            v1.0
            版本说明：
            v1.0 使用系统MessageBox组件。
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.Infomation(System.String,System.Object[])">
            <summary>
            普通的信息提示框
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.Infomation(System.Windows.Forms.IWin32Window,System.String,System.Object[])">
            <summary>
            普通的信息提示框
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.Error(System.String,System.Object[])">
            <summary>
            错误信息提示框
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.Error(System.Windows.Forms.IWin32Window,System.String,System.Object[])">
            <summary>
            错误信息提示框
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.Warning(System.String,System.Object[])">
            <summary>
            普通的警告提示框
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.Warning(System.Windows.Forms.IWin32Window,System.String,System.Object[])">
            <summary>
            普通的警告提示框
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.Confirm(System.String,System.Object[])">
            <summary>
            确认提示框 OK、Cancel
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.Confirm(System.Windows.Forms.IWin32Window,System.String,System.Object[])">
            <summary>
            确认提示框 OK、Cancel
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.YesNo(System.String,System.Object[])">
            <summary>
            是否提示框 YES NO
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.YesNo(System.Windows.Forms.IWin32Window,System.String,System.Object[])">
            <summary>
            是否提示框 YES NO
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.YesNoCancel(System.Windows.Forms.IWin32Window,System.String,System.Object[])">
            <summary>
            是、否、取消提示框 YES NO Cancel
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.RetryCancel(System.Windows.Forms.IWin32Window,System.String,System.Object[])">
            <summary>
            一种警示提示框，提供重试、取消按钮
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.RetryCancel(System.String,System.Object[])">
            <summary>
            一种警示提示框，提供重试、取消按钮
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.AbortRetryIgnore(System.Windows.Forms.IWin32Window,System.String,System.Object[])">
            <summary>
            一种警示提示框，提供忽略、重试、取消按钮
            </summary>
        </member>
        <member name="M:RW.Components.RWBox.AbortRetryIgnore(System.String,System.Object[])">
            <summary>
            一种警示提示框，提供忽略、重试、取消按钮
            </summary>
        </member>
        <member name="T:RW.Components.SelfTest.frmSelfTest">
            <summary>
            自检界面
            </summary>
        </member>
        <member name="M:RW.Components.SelfTest.frmSelfTest.#ctor">
            <summary>
            初始化自检实例
            </summary>
        </member>
        <member name="P:RW.Components.SelfTest.frmSelfTest.Delay">
            <summary>
            关闭后的延时（毫秒）
            </summary>
        </member>
        <member name="M:RW.Components.SelfTest.frmSelfTest.Append(System.String)">
            <summary>
            添加一条日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:RW.Components.SelfTest.frmSelfTest.Begin">
            <summary>
            开始试验
            </summary>
        </member>
        <member name="M:RW.Components.SelfTest.frmSelfTest.Finish">
            <summary>
            结束
            </summary>
        </member>
        <member name="M:RW.Components.SelfTest.frmSelfTest.Finish(System.Int32)">
            <summary>
            延时关闭
            </summary>
            <param name="delay">时间（秒）</param>
        </member>
        <member name="F:RW.Components.SelfTest.frmSelfTest.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.SelfTest.frmSelfTest.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.SelfTest.frmSelfTest.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Components.SelfTest.ISelfTest">
            <summary>
            自检控制器，可注册自检模块，可注册自检组
            可执行自检动作
            </summary>
        </member>
        <member name="M:RW.Components.SelfTest.ISelfTest.Register(System.String,System.String,RW.Components.SelfTest.Del)">
            <summary>
            分组注册自检方法
            </summary>
            <param name="groupName">组名称</param>
            <param name="name">显示名称</param>
            <param name="del">自检行为</param>
        </member>
        <member name="M:RW.Components.SelfTest.ISelfTest.UnRegister(System.String,System.String)">
            <summary>
            移除注册自检
            </summary>
            <param name="groupName"></param>
            <param name="name"></param>
        </member>
        <member name="M:RW.Components.SelfTest.ISelfTest.Execute">
            <summary>
            执行自检
            </summary>
        </member>
        <member name="T:RW.Components.SelfTest.ISelfTestForm">
            <summary>
            测试的标准界面
            </summary>
        </member>
        <member name="M:RW.Components.SelfTest.ISelfTestForm.Begin">
            <summary>
            开始自检
            </summary>
        </member>
        <member name="M:RW.Components.SelfTest.ISelfTestForm.Finish">
            <summary>
            结束自检
            </summary>
        </member>
        <member name="M:RW.Components.SelfTest.ISelfTestForm.Append(System.String)">
            <summary>
            追加自检信息
            </summary>
        </member>
        <member name="T:RW.Components.SelfTest.SelfTester">
            <summary>
            自检控制器，可分组注册自检模块
            可执行自检动作
            </summary>
        </member>
        <member name="T:RW.Components.SelfTest.SelfTestHelper">
            <summary>
            自检帮助类
            注册的自检项目保存在内存中，运行Execute方法，可执行
            </summary>
        </member>
        <member name="T:RW.Components.SerialPorts.frmPortSetting">
            <summary>
            串口设置界面，保存前需调用SetConfig(config)，点击保存按钮后将自动设置到config实例中。
            </summary>
        </member>
        <member name="M:RW.Components.SerialPorts.frmPortSetting.#ctor">
            <summary>
            初始化串口设置新实例，自动获取当前设备上已有的串口
            </summary>
        </member>
        <member name="P:RW.Components.SerialPorts.frmPortSetting.PortName">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:RW.Components.SerialPorts.frmPortSetting.BaudRate">
            <summary>
            波特率
            </summary>
        </member>
        <member name="P:RW.Components.SerialPorts.frmPortSetting.DataBits">
            <summary>
            数据位
            </summary>
        </member>
        <member name="P:RW.Components.SerialPorts.frmPortSetting.Parity">
            <summary>
            奇偶校验位
            </summary>
        </member>
        <member name="P:RW.Components.SerialPorts.frmPortSetting.StopBits">
            <summary>
            停止位
            </summary>
        </member>
        <member name="M:RW.Components.SerialPorts.frmPortSetting.SetConfig(RW.Driver.SerialPortConfig)">
            <summary>
            通过指定的实例，自动初始化UI
            </summary>
            <param name="config"></param>
        </member>
        <member name="F:RW.Components.SerialPorts.frmPortSetting.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.SerialPorts.frmPortSetting.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.SerialPorts.frmPortSetting.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Components.Tester.ucTester">
            <summary>
            测试者管理
            </summary>
        </member>
        <member name="F:RW.Components.Tester.ucTester.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Tester.ucTester.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Tester.ucTester.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.TestType.ucTestModel">
            <summary>
            类型管理
            </summary>
        </member>
        <member name="F:RW.Components.TestType.ucTestModel.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.TestType.ucTestModel.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.TestType.ucTestModel.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.TimerPool">
            <summary>
            定时器池，用于不同时间间隔触发不同定时器
            </summary>
        </member>
        <member name="M:RW.Components.TimerPool.Remove(System.Windows.Forms.Control)">
            <summary>
            移除计时器
            </summary>
        </member>
        <member name="T:RW.Components.UserBehavior">
            <summary>
            用户行为监控日志，通过调用Register(this)，来注册控件（Form）下的所有控件的点击事件和press事件
            
            </summary>
        </member>
        <member name="M:RW.Components.UserBehavior.Register(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            注册用户行为监控，默认会注册click以及keyup事件。注册采用递归，会注册页面中的所有的事件
            </summary>
            <param name="control">需要注册的控件</param>
            <param name="recusion">是否递归遍历所有控件</param>
        </member>
        <member name="T:RW.Components.User.BLL.UserBLL">
            <summary>
            用户管理业务逻辑层
            </summary>
        </member>
        <member name="M:RW.Components.User.BLL.UserBLL.Save(RW.Components.User.Model.UserInfo)">
            <summary>
            保存用户(添加、修改)
            </summary>
        </member>
        <member name="M:RW.Components.User.BLL.UserBLL.RemoveByUsername(System.String)">
            <summary>
            删除用户
            </summary>
        </member>
        <member name="M:RW.Components.User.BLL.UserBLL.ChangePwd(System.String,System.String)">
            <summary>
            修改密码
            </summary>
        </member>
        <member name="M:RW.Components.User.BLL.UserBLL.GetPermissionLevel(System.String)">
            <summary>
            获取权限等级，1为管理员，2为工程师，3为操作员
            </summary>
        </member>
        <member name="M:RW.Components.User.BLL.UserBLL.GetUserByUsername(System.String)">
            <summary>
            通过用户名获取用户信息
            </summary>
        </member>
        <member name="M:RW.Components.User.BLL.UserBLL.Login(System.String,System.String)">
            <summary>
            通过传入指定的用户名和密码进行登录，成功返回true，否则返回异常
            <exception cref="T:RW.Components.User.Exceptions.UserNotFoundException"/>
            </summary>
        </member>
        <member name="M:RW.Components.User.BLL.UserBLL.GetUsers">
            <summary>
            获取所有的用户列表
            </summary>
        </member>
        <member name="T:RW.Components.User.Config.UserConfig">
            <summary>
            用户相关配置
            </summary>
        </member>
        <member name="F:RW.Components.User.Config.UserConfig.Current">
            <summary>
            全局唯一实例
            </summary>
        </member>
        <member name="P:RW.Components.User.Config.UserConfig.Language">
            <summary>
            登录用语言
            </summary>
        </member>
        <member name="P:RW.Components.User.Config.UserConfig.LastUsername">
            <summary>
            上一次登录的用户名
            </summary>
        </member>
        <member name="P:RW.Components.User.Config.UserConfig.LastLoginTime">
            <summary>
            上一次登录时间
            </summary>
        </member>
        <member name="T:RW.Components.User.frmBaseLogin">
            <summary>
            统一登录窗体，可继承调整布局。
            增加了登录日志、登出日志。
            </summary>
        </member>
        <member name="M:RW.Components.User.frmBaseLogin.#ctor">
            <summary>
            初始化登录的实例
            </summary>
        </member>
        <member name="F:RW.Components.User.frmBaseLogin.MAX_ERROR_COUNT">
            <summary>
            系统允许最大错误次数
            </summary>
        </member>
        <member name="P:RW.Components.User.frmBaseLogin.Text">
            <summary>
            窗体显示的名称
            </summary>
        </member>
        <member name="P:RW.Components.User.frmBaseLogin.Title">
            <summary>
            主标题，一般为项目名称
            </summary>
        </member>
        <member name="P:RW.Components.User.frmBaseLogin.Username">
            <summary>
            当前登录的用户名
            </summary>
        </member>
        <member name="P:RW.Components.User.frmBaseLogin.Password">
            <summary>
            当前登录的密码
            </summary>
        </member>
        <member name="E:RW.Components.User.frmBaseLogin.LoginSuccessed">
            <summary>
            登录成功后触发的事件
            </summary>
        </member>
        <member name="E:RW.Components.User.frmBaseLogin.LoginError">
            <summary>
            登录失败后触发的事件
            </summary>
        </member>
        <member name="E:RW.Components.User.frmBaseLogin.TitleChanged">
            <summary>
            标题发生改变时的事件
            </summary>
        </member>
        <member name="M:RW.Components.User.frmBaseLogin.OnLoginSuccessed(RW.Components.User.LoginEventArgs)">
            <summary>
            引发登录成功的事件
            </summary>
        </member>
        <member name="M:RW.Components.User.frmBaseLogin.OnLoginError(RW.Components.User.LoginEventArgs)">
            <summary>
            引发登录失败的事件
            </summary>
        </member>
        <member name="M:RW.Components.User.frmBaseLogin.SetMessage(System.String)">
            <summary>
            设置登录消息信息
            </summary>
        </member>
        <member name="F:RW.Components.User.frmBaseLogin.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.User.frmBaseLogin.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.User.frmBaseLogin.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Components.User.frmLogin">
            <summary>
            通用登录界面，继承自frmBaseLogin,实现了ILoginUI的接口。
            </summary>
        </member>
        <member name="P:RW.Components.User.frmLogin.Logo">
            <summary>
            左侧的LOGO图片
            </summary>
        </member>
        <member name="F:RW.Components.User.frmLogin.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.User.frmLogin.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.User.frmLogin.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Components.User.frmLoginGlobalization">
            <summary>
            支持国际化的登录界面
            </summary>
        </member>
        <member name="M:RW.Components.User.frmLoginGlobalization.#ctor">
            <summary>
            初始化国际化的登录界面
            </summary>
        </member>
        <member name="M:RW.Components.User.frmLoginGlobalization.#ctor(System.String)">
            <summary>
            初始化国际化的登录界面
            </summary>
        </member>
        <member name="P:RW.Components.User.frmLoginGlobalization.Languages">
            <summary>
            支持的语言
            </summary>
        </member>
        <member name="P:RW.Components.User.frmLoginGlobalization.InitLanguage">
            <summary>
            语言
            </summary>
        </member>
        <member name="P:RW.Components.User.frmLoginGlobalization.SelectedLanguage">
            <summary>
            选中的语言
            </summary>
        </member>
        <member name="E:RW.Components.User.frmLoginGlobalization.LanguageChanged">
            <summary>
            语言改变事件
            </summary>
        </member>
        <member name="M:RW.Components.User.frmLoginGlobalization.ChangeLanguage(System.String)">
            <summary>
            改变当前语言，使用语言代码，如：zh-cn,en-us等
            </summary>
        </member>
        <member name="F:RW.Components.User.frmLoginGlobalization.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.User.frmLoginGlobalization.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.User.frmLoginGlobalization.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Components.User.frmValidPassword">
            <summary>
            验证当前登录密码是否正确，通过窗体返回OK
            </summary>
        </member>
        <member name="M:RW.Components.User.frmValidPassword.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="P:RW.Components.User.frmValidPassword.Password">
            <summary>
            输入的密码
            </summary>
        </member>
        <member name="F:RW.Components.User.frmValidPassword.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.User.frmValidPassword.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.User.frmValidPassword.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Components.User.ILoginUI">
            <summary>
            统一登录接口
            </summary>
        </member>
        <member name="P:RW.Components.User.ILoginUI.Title">
            <summary>
            主标题
            </summary>
        </member>
        <member name="P:RW.Components.User.ILoginUI.Username">
            <summary>
            已登录的用户名
            </summary>
        </member>
        <member name="P:RW.Components.User.ILoginUI.Password">
            <summary>
            已登录的密码
            </summary>
        </member>
        <member name="M:RW.Components.User.ILoginUI.ShowDialog">
            <summary>
            显示为模态对话框，通常，普通的form可以实现此接口
            </summary>
        </member>
        <member name="E:RW.Components.User.ILoginUI.LoginSuccessed">
            <summary>
            登录成功后触发的事件
            </summary>
        </member>
        <member name="E:RW.Components.User.ILoginUI.LoginError">
            <summary>
            登录失败后触发的事件
            </summary>
        </member>
        <member name="T:RW.Components.User.LoginEventArgs">
            <summary>
            登录事件的参数
            </summary>
        </member>
        <member name="P:RW.Components.User.LoginEventArgs.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:RW.Components.User.LoginEventArgs.Message">
            <summary>
            登录消息
            </summary>
        </member>
        <member name="P:RW.Components.User.LoginEventArgs.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="T:RW.Components.User.Manager.frmChangePwd">
            <summary>
            修改密码界面
            </summary>
        </member>
        <member name="F:RW.Components.User.Manager.frmChangePwd.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.User.Manager.frmChangePwd.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.User.Manager.frmChangePwd.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.User.Manager.frmUserEdit">
            <summary>
            修改用户信息界面
            </summary>
        </member>
        <member name="F:RW.Components.User.Manager.frmUserEdit.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.User.Manager.frmUserEdit.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.User.Manager.frmUserEdit.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:RW.Components.User.Manager.ucUserManager.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.User.Manager.ucUserManager.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.User.Manager.ucUserManager.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.User.Model.LanguageInfo">
            <summary>
            多语言信息
            </summary>
        </member>
        <member name="M:RW.Components.User.Model.LanguageInfo.#ctor">
            <summary>
            默认
            </summary>
        </member>
        <member name="M:RW.Components.User.Model.LanguageInfo.#ctor(System.String,System.String)">
            <summary>
            指定语言编码和文字
            </summary>
            <param name="code"></param>
            <param name="text"></param>
        </member>
        <member name="P:RW.Components.User.Model.LanguageInfo.Code">
            <summary>
            语言编码
            </summary>
        </member>
        <member name="P:RW.Components.User.Model.LanguageInfo.Text">
            <summary>
            语言描述
            </summary>
        </member>
        <member name="M:RW.Components.User.Model.LanguageInfo.ToString">
            <summary>
            转换成可显示用的语言编码和面搜狐
            </summary>
            <returns></returns>
        </member>
        <member name="T:RW.Components.User.Model.UserInfo">
            <summary>
            描述用户信息的实体
            </summary>
        </member>
        <member name="P:RW.Components.User.Model.UserInfo.ID">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="P:RW.Components.User.Model.UserInfo.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:RW.Components.User.Model.UserInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:RW.Components.User.Model.UserInfo.Permission">
            <summary>
            权限
            </summary>
        </member>
        <member name="P:RW.Components.User.Model.UserInfo.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:RW.Components.User.Model.UserInfo.InitUser(System.Data.DataRow)">
            <summary>
            初始化用户信息
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:RW.Components.User.Model.UserInfo.IsSuperAdmin">
            <summary>
            是否是超级管理员权限
            </summary>
        </member>
        <member name="M:RW.Components.User.Model.UserInfo.IsAdmin">
            <summary>
            是否是管理员权限
            </summary>
        </member>
        <member name="M:RW.Components.User.Model.UserInfo.IsOperator">
            <summary>
            是否是操作者权限
            </summary>
        </member>
        <member name="M:RW.Components.User.Model.UserInfo.IsEngineer">
            <summary>
            是否是工程师权限
            </summary>
        </member>
        <member name="T:RW.Components.User.RWUser">
            <summary>
            获取当前用户信息的帮助类
            </summary>
        </member>
        <member name="P:RW.Components.User.RWUser.Current">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="P:RW.Components.User.RWUser.Config">
            <summary>
            用户登录的配置信息
            </summary>
        </member>
        <member name="P:RW.Components.User.RWUser.Permissions">
            <summary>
            获取当前所有权限信息
            </summary>
        </member>
        <member name="M:RW.Components.User.RWUser.GetPerssionName">
            <summary>
            获取当前用户的权限名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:RW.Components.View.ISwitchView">
            <summary>
            表示开关的控件
            </summary>
        </member>
        <member name="P:RW.Components.View.ISwitchView.Text">
            <summary>
            开关的名称
            </summary>
        </member>
        <member name="P:RW.Components.View.ISwitchView.Reverse">
            <summary>
            是否需要反转开关的状态
            </summary>
        </member>
        <member name="T:RW.Components.View.IValueView">
            <summary>
            用于值的视图接口
            </summary>
        </member>
        <member name="P:RW.Components.View.IValueView.Text">
            <summary>
            值的显示标题
            </summary>
        </member>
        <member name="P:RW.Components.View.IValueView.Unit">
            <summary>
            值的单位
            </summary>
        </member>
        <member name="P:RW.Components.View.IValueView.CustomUnit">
            <summary>
            自定义计量单位，当赋值时，Unit属性自动失效
            </summary>
        </member>
        <member name="P:RW.Components.View.IValueView.DecimalNumber">
            <summary>
            小数位
            </summary>
        </member>
        <member name="P:RW.Components.View.IValueView.FormatString">
            <summary>
            格式化的字符串，如0.00 可表示2位小数，具体参照String.Format(FormatString)
            </summary>
        </member>
        <member name="F:RW.Components.Widgets.frmImageView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Components.Widgets.frmImageView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Components.Widgets.frmImageView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RW.Components.Widgets.frmInputForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Widgets.frmInputForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Widgets.frmInputForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Components.Widgets.frmSetValue">
            <summary>
            通常用于AO给定值
            <para>功能:                                       </para>
            <para>1. 设置最大最小值，通过此页面则只能设置这些值。</para>
            <para>2. 设置小数位，防止无意义操作。              </para>
            <para>3. 自定义单位，自定义标题显示。              </para>
            <para>4. 显示提示信息，指导用户输入。</para>
            <para>5. 格式化字符串。</para>
            </summary>
        </member>
        <member name="M:RW.Components.Widgets.frmSetValue.#ctor">
            <summary>
            创建默认的实例
            </summary>
        </member>
        <member name="P:RW.Components.Widgets.frmSetValue.Value">
            <summary>
            获取设置的值
            </summary>
        </member>
        <member name="P:RW.Components.Widgets.frmSetValue.DecimalNumber">
            <summary>
            显示的小数位数，如2，则显示2有效小数位。
            </summary>
        </member>
        <member name="P:RW.Components.Widgets.frmSetValue.MinValue">
            <summary>
            或者或设置允许设置的最小值
            </summary>
        </member>
        <member name="P:RW.Components.Widgets.frmSetValue.MaxValue">
            <summary>
            或者或设置允许设置的最大值
            </summary>
        </member>
        <member name="P:RW.Components.Widgets.frmSetValue.Unit">
            <summary>
            显示的单位
            </summary>
        </member>
        <member name="P:RW.Components.Widgets.frmSetValue.Tips">
            <summary>
            显示的提示信息
            </summary>
        </member>
        <member name="P:RW.Components.Widgets.frmSetValue.Label">
            <summary>
            显示的标题，这个也可以是Text属性
            </summary>
        </member>
        <member name="P:RW.Components.Widgets.frmSetValue.CustomUnit">
            <summary>
            自定义单位名称
            </summary>
        </member>
        <member name="P:RW.Components.Widgets.frmSetValue.FormatString">
            <summary>
            格式化字符串
            </summary>
        </member>
        <member name="F:RW.Components.Widgets.frmSetValue.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Components.Widgets.frmSetValue.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Components.Widgets.frmSetValue.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Configuration.ConfigConvert">
            <summary>
            配置转换工具
            </summary>
        </member>
        <member name="M:RW.Configuration.ConfigConvert.ConvertTo``2(``0,``1)">
            <summary>
            可以将一个类型转换成另一个类型
            </summary>
        </member>
        <member name="T:RW.Configuration.IConfig">
            <summary>
            提供对配置文件的读写统一接口
            </summary>
        </member>
        <member name="M:RW.Configuration.IConfig.Get``1(System.String)">
            <summary>
            根据泛型T及关键信息获取配置的内容，返回转换后的类型
            </summary>
        </member>
        <member name="M:RW.Configuration.IConfig.Get(System.String)">
            <summary>
            根据关键信息获取配置的内容，返回转换后的类型
            </summary>
        </member>
        <member name="M:RW.Configuration.IConfig.Set(System.String,System.Object)">
            <summary>
            根据关键信息设置值
            </summary>
        </member>
        <member name="P:RW.Configuration.IConfig.Keys">
            <summary>
            获取所有的Key
            </summary>
        </member>
        <member name="P:RW.Configuration.IConfig.Values">
            <summary>
            获取所有的Value
            </summary>
        </member>
        <member name="M:RW.Configuration.IConfig.Remove(System.String)">
            <summary>
            移除指定项
            </summary>
        </member>
        <member name="M:RW.Configuration.IConfig.Clear">
            <summary>
            清空所以项
            </summary>
        </member>
        <member name="M:RW.Configuration.IConfig.Load">
            <summary>
            手动加载配置，并赋值给属性，通过读取文件/数据库等
            </summary>
        </member>
        <member name="M:RW.Configuration.IConfig.Save">
            <summary>
            手动保存配置信息
            </summary>
        </member>
        <member name="T:RW.Configuration.IConfigCollection">
            <summary>
            使用集合的方式修改配置
            </summary>
        </member>
        <member name="M:RW.Configuration.IConfigCollection.Contains(System.String)">
            <summary>
            是否包含指定的Key
            </summary>
        </member>
        <member name="M:RW.Configuration.IConfigCollection.GetValues``1">
            <summary>
            获取指定的类型
            </summary>
        </member>
        <member name="T:RW.Configuration.ILanguageAttribute">
            <summary>
            支持多语言的配置方式
            </summary>
        </member>
        <member name="T:RW.Configuration.ILocalizationConfig">
            <summary>
            本地化的配置
            </summary>
        </member>
        <member name="P:RW.Configuration.ILocalizationConfig.Language">
            <summary>
            当前的语言
            </summary>
        </member>
        <member name="T:RW.Configuration.IniIgnoreAttribute">
            <summary>
            描述Ini文件使用序列化时，是否自动忽略
            </summary>
        </member>
        <member name="T:RW.Configuration.IniEnabeldAttribute">
            <summary>
            描述Ini文件使用序列化时，是否自动忽略
            </summary>
        </member>
        <member name="T:RW.Configuration.IniKeyNameAttribute">
            <summary>
            用于标记Ini Key的显示特性
            </summary>
        </member>
        <member name="M:RW.Configuration.IniKeyNameAttribute.#ctor(System.String)">
            <summary>
            构造 标记Ini Key的显示特性 实例
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:RW.Configuration.IniKeyNameAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:RW.Configuration.IniSectionNameAttribute">
            <summary>
            用于标记INI节点的属性特性
            </summary>
        </member>
        <member name="M:RW.Configuration.IniSectionNameAttribute.#ctor(System.String)">
            <summary>
            构造 标记INI节点的属性特性 实例
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:RW.Configuration.IniSectionNameAttribute.Name">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="T:RW.Configuration.SRIniKeyNameAttribute">
            <summary>
            支持国际化的ini描述名称 特性
            </summary>
        </member>
        <member name="M:RW.Configuration.SRIniKeyNameAttribute.#ctor(System.String)">
            <summary>
            初始化国际化特性
            </summary>
        </member>
        <member name="P:RW.Configuration.SRIniKeyNameAttribute.SR">
            <summary>
            指定系统使用的resource对象
            </summary>
        </member>
        <member name="P:RW.Configuration.SRIniKeyNameAttribute.Name">
            <summary>
            使用国际化支持的名称
            </summary>
        </member>
        <member name="T:RW.Configuration.UnitAttribute">
            <summary>
            单位描述特性
            </summary>
        </member>
        <member name="M:RW.Configuration.UnitAttribute.#ctor">
            <summary>
            构造单位特性
            </summary>
        </member>
        <member name="M:RW.Configuration.UnitAttribute.#ctor(RW.UnitEnum)">
            <summary>
            构造单位特性
            </summary>
        </member>
        <member name="M:RW.Configuration.UnitAttribute.#ctor(RW.UnitEnum,System.String)">
            <summary>
            构造单位特性
            </summary>
        </member>
        <member name="P:RW.Configuration.UnitAttribute.Unit">
            <summary>
            指定的单位值
            </summary>
        </member>
        <member name="P:RW.Configuration.UnitAttribute.CustomUnit">
            <summary>
            自定义单位值，非空时Unit属性将不可用
            </summary>
        </member>
        <member name="P:RW.Configuration.UnitAttribute.Text">
            <summary>
            最终的单位文本内容
            </summary>
        </member>
        <member name="T:RW.Configuration.IniConfig">
            <summary>
            关于读写Ini配置文件的基类
            </summary>
        </member>
        <member name="F:RW.Configuration.IniConfig.Config">
            <summary>
            Ini文件工具
            </summary>
        </member>
        <member name="M:RW.Configuration.IniConfig.#ctor">
            <summary>
            初始化构造
            </summary>
        </member>
        <member name="M:RW.Configuration.IniConfig.#ctor(System.String)">
            <summary>
            使用指定的文件名初始化构造
            </summary>
        </member>
        <member name="M:RW.Configuration.IniConfig.PreInit">
            <summary>
            构造函数时调用此方法，预初始化
            </summary>
        </member>
        <member name="P:RW.Configuration.IniConfig.Filename">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:RW.Configuration.IniConfig.Keys">
            <summary>
            获取所有的Key
            </summary>
        </member>
        <member name="P:RW.Configuration.IniConfig.Values">
            <summary>
            获取所有的Value
            </summary>
        </member>
        <member name="M:RW.Configuration.IniConfig.Save">
            <summary>
            保存配置
            </summary>
        </member>
        <member name="M:RW.Configuration.IniConfig.Save(System.String)">
            <summary>
            保存配置文件
            </summary>
        </member>
        <member name="M:RW.Configuration.IniConfig.Save(System.String,System.String)">
            <summary>
            将指定对象按Ini标准保存到指定文件中
            </summary>
            <param name="sectionName">自定义节点名称</param>
            <param name="filename">文件名称</param>
        </member>
        <member name="M:RW.Configuration.IniConfig.Load">
            <summary>
            加载配置文件
            </summary>
        </member>
        <member name="M:RW.Configuration.IniConfig.Load``1(``0,System.String)">
            <summary>
            将指定对象加载到本对象中
            </summary>
            <typeparam name="T">对象的类型</typeparam>
            <param name="obj">对象的实例</param>
            <param name="filename">文件名</param>
        </member>
        <member name="M:RW.Configuration.IniConfig.Load``1(``0,System.String,System.String)">
            <summary>
            将指定对象加载到本对象中
            </summary>
            <typeparam name="T">对象的类型</typeparam>
            <param name="obj">对象的实例</param>
            <param name="sectionName">自定义节点名称</param>
            <param name="filename">文件名</param>
        </member>
        <member name="M:RW.Configuration.IniConfig.Load(System.String)">
            <summary>
            加载配置文件
            </summary>
        </member>
        <member name="M:RW.Configuration.IniConfig.GetSectionName">
            <summary>
            获取节点名称，
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.Configuration.IniConfig.SetSectionName(System.String)">
            <summary>
            设置自定义的节点名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:RW.Configuration.IniConfig.GetProperty">
            <summary>
            获取所有的属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.Configuration.IniConfig.GetString(System.String)">
            <summary>
            获取sectionName下Key的string类型的Value。[section] key=value
            </summary>
            <param name="key">指定的节点</param>
            <returns>string类型的值</returns>
        </member>
        <member name="M:RW.Configuration.IniConvert.GetSectioName(System.Object)">
            <summary>
            获取节点名称
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Configuration.IniConvert.SerializeObject(System.Object,System.String)">
            <summary>
            将一个对象序列化保存到Ini文件中
            </summary>
            <param name="obj">将要序列化的对象</param>
            <param name="filename">将要序列化存储的路径</param>
            <returns>成功/失败</returns>
        </member>
        <member name="M:RW.Configuration.IniConvert.SerializeObject(System.Object,System.String,System.String)">
            <summary>
            将一个对象序列化保存到Ini文件中
            </summary>
            <param name="obj">将要序列化的对象</param>
            <param name="sectionName">自定义节点名称</param>
            <param name="filename">将要序列化存储的路径</param>
            <returns>成功/失败</returns>
        </member>
        <member name="M:RW.Configuration.IniConvert.Deserialize``1(System.String)">
            <summary>
            反序列化，读取Ini文件并返回为指定对象，对象类型必须包含无参构造函数
            </summary>
            <typeparam name="T">将要反序列化的类型</typeparam>
            <param name="filename">持久化的文件名</param>
            <returns>泛型T的对象</returns>
        </member>
        <member name="M:RW.Configuration.IniConvert.Deserialize(System.Object,System.String)">
            <summary>
            反序列化，将Ini文件读取到obj对象中
            </summary>
            <param name="obj">将要反序列化的对象</param>
            <param name="filename">持久化的文件名</param>
            <returns>成功/失败</returns>
        </member>
        <member name="M:RW.Configuration.IniConvert.Deserialize(System.Object,System.String,System.String)">
            <summary>
            反序列化，将Ini文件读取到obj对象中
            </summary>
            <param name="obj">将要反序列化的对象</param>
            <param name="sectionName">自定义节点名称</param>
            <param name="filename">持久化的文件名</param>
            <returns>成功/失败</returns>
        </member>
        <member name="M:RW.Configuration.IniConvert.GetPropertyValue(System.Object)">
            <summary>
            获取Ini文件下指定对象属性的所有值
            </summary>
            <param name="obj">指定对象</param>
            <returns></returns>
        </member>
        <member name="M:RW.Configuration.IniConvert.SetProperty(System.Object,System.String,System.String)">
            <summary>
            按照Ini的规则，设置某个对象的属性
            </summary>
            <param name="obj">需要设置的对象</param>
            <param name="pname">需要设置的属性名</param>
            <param name="value">需要写入的值</param>
        </member>
        <member name="M:RW.Configuration.IniConvert.SetProperty(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            按照Ini的规则，设置某个对象的属性
            </summary>
            <param name="obj">需要设置的对象</param>
            <param name="p">需要设置的属性</param>
            <param name="value">需要写入的值（自动转换类型）</param>
        </member>
        <member name="T:RW.Configuration.IniFileConfig">
            <summary>
            一种区别于IniConfig的配置文件，该类提供了使用字符串的方式读写ini文件；
            </summary>
        </member>
        <member name="M:RW.Configuration.IniFileConfig.Get``1(System.String)">
            <summary>
            指定泛型获取section的key对应的value
            </summary>
        </member>
        <member name="P:RW.Configuration.IniFileConfig.Filename">
            <summary>
            相关的文件名
            </summary>
        </member>
        <member name="P:RW.Configuration.IniFileConfig.SectionName">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:RW.Configuration.IniFileConfig.Keys">
            <summary>
            所有的Key
            </summary>
        </member>
        <member name="P:RW.Configuration.IniFileConfig.Values">
            <summary>
            所有的Value
            </summary>
        </member>
        <member name="M:RW.Configuration.IniFileConfig.Load">
            <summary>
            加载文件
            </summary>
        </member>
        <member name="M:RW.Configuration.IniFileConfig.GetKeyValues">
            <summary>
            获取所有的键值对
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.Configuration.IniFileConfig.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:RW.Configuration.IniFileConfig.Set(System.String,System.Object)">
            <summary>
            根据键设置值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:RW.Configuration.IniFileConfig.ToString">
            <summary>
            格式化string类型
            </summary>
        </member>
        <member name="M:RW.Configuration.IniFileConfig.Contains(System.String)">
            <summary>
            是否包含键值
            </summary>
        </member>
        <member name="M:RW.Configuration.IniFileConfig.Remove(System.String)">
            <summary>
            移除一个键值
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:RW.Configuration.IniFileConfig.Clear">
            <summary>
            清空所有键值
            </summary>
        </member>
        <member name="M:RW.Configuration.IniFileConfig.GetEnumerator">
            <summary>
            返回循环访问 System.Collections.Generic.Dictionary`2 的枚举数。
            </summary>
        </member>
        <member name="T:RW.Configuration.JsonConfig">
            <summary>
            通过JSON的方式读写配置信息
            </summary>
        </member>
        <member name="M:RW.Configuration.JsonConfig.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="M:RW.Configuration.JsonConfig.#ctor(System.String)">
            <summary>
            指定文件名构造json配置文件
            </summary>
        </member>
        <member name="P:RW.Configuration.JsonConfig.Filename">
            <summary>
            json配置文件的文件名
            </summary>
        </member>
        <member name="M:RW.Configuration.JsonConfig.Get``1(System.String)">
            <summary>
            通过指定的标识获取值，自动类型转换，如类型不匹配可能会报错。
            </summary>
        </member>
        <member name="M:RW.Configuration.JsonConfig.Set(System.String,System.Object)">
            <summary>
            写入值到配置文件中，直到调用Save将写入到文件中。
            </summary>
        </member>
        <member name="M:RW.Configuration.JsonConfig.Load">
            <summary>
            加载配置文件
            </summary>
        </member>
        <member name="M:RW.Configuration.JsonConfig.Save">
            <summary>
            保存到文件中
            </summary>
        </member>
        <member name="M:RW.Configuration.JsonFileConfig.ToString">
            <summary>
            格式化string类型
            </summary>
        </member>
        <member name="M:RW.Configuration.JsonConfig`1.ToString">
            <summary>
            格式化string类型
            </summary>
        </member>
        <member name="T:RW.Configuration.SystemConfig">
            <summary>
            默认用的系统配置文件，默认采用Ini的方式，默认路径在bin\debug\configs\sys.ini
            </summary>
        </member>
        <member name="T:RW.Configuration.XmlConfig">
            <summary>
            一种基于XML的配置文件
            </summary>
        </member>
        <member name="P:RW.Configuration.XmlConfig.Filename">
            <summary>
            指定文件的文件名
            </summary>
        </member>
        <member name="P:RW.Configuration.XmlConfig.RootName">
            <summary>
            根节点的名称，一般无需设置
            </summary>
        </member>
        <member name="M:RW.Core.DataHelper.BindData(System.Windows.Forms.DataGridView,System.Object)">
            <summary>
            绑定数据，并自动选中已选数据
            </summary>
        </member>
        <member name="M:RW.Core.HotKey.RegisterHotKey(System.IntPtr,System.Int32,RW.Core.HotKey.KeyModifiers,System.Windows.Forms.Keys)">
            <summary>
            注册窗体快捷键
            如果函数执行成功，返回值不为0。
            如果函数执行失败，返回值为0。要得到扩展错误信息，调用GetLastError。
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="id">快捷键ID</param>
            <param name="fsModifiers">辅助热键</param>
            <param name="vk">键盘标识</param>
            <returns></returns>
        </member>
        <member name="M:RW.Core.HotKey.UnregisterHotKey(System.IntPtr,System.Int32)">
            <summary>
            取消快捷键注册
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="id">热键ID</param>
        </member>
        <member name="T:RW.Core.HotKey.KeyModifiers">
            <summary>
            辅助键按键
            定义了辅助键的名称（将数字转变为字符以便于记忆，也可去除此枚举而直接使用数值）
            </summary>
        </member>
        <member name="T:RW.Core.HotKeys">
            <summary>
            通用快捷键
            </summary>
        </member>
        <member name="F:RW.Core.HotKeys.Main">
            <summary>
            全局快捷键
            </summary>
        </member>
        <member name="M:RW.Core.HotKeys.#ctor(System.String,System.Windows.Forms.Form)">
            <summary>
            构造快捷键对象，私有
            </summary>
        </member>
        <member name="M:RW.Core.HotKeys.Create(System.Windows.Forms.Form)">
            <summary>
            根据页面创建一个快捷键对象，不与其他页面快捷键冲突
            </summary>
        </member>
        <member name="M:RW.Core.HotKeys.Create(System.String,System.Windows.Forms.Form)">
            <summary>
            根据页面创建一个快捷键对象，不与其他页面快捷键冲突
            </summary>
        </member>
        <member name="M:RW.Core.HotKeys.RemoveShortKeyPage(System.String)">
            <summary>
            移除页面的快捷键
            </summary>
        </member>
        <member name="M:RW.Core.HotKeys.RemoveShortKeyPage(System.Windows.Forms.Form)">
            <summary>
            移除页面的快捷键
            </summary>
        </member>
        <member name="P:RW.Core.HotKeys.PageName">
            <summary>
            页面名称
            </summary>
        </member>
        <member name="M:RW.Core.HotKeys.Register(System.String,System.Action,System.Boolean)">
            <summary>
            注册当前页面的快捷键与回调
            </summary>
        </member>
        <member name="M:RW.Core.HotKeys.RemoveHotkey(System.String)">
            <summary>
            移除快捷键
            </summary>
        </member>
        <member name="M:RW.Core.HotKeys.PressDown(System.String)">
            <summary>
            当快捷键按下时，触发此行为
            </summary>
        </member>
        <member name="T:RW.Core.RWCal">
            <summary>
            提供润伟专用计算器
            </summary>
        </member>
        <member name="M:RW.Core.RWCal.GetRMS(System.Double[])">
            <summary>
            获取均方根
            </summary>
        </member>
        <member name="T:RW.Core.SecurityHelper">
            <summary>
            通用的安全算法类
            </summary>
        </member>
        <member name="M:RW.Core.RWConvert.ToBinary(System.Int64)">
            <summary>
            将数组转换为2进制字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Core.RWConvert.ToHex(System.Int64)">
            <summary>
            将数字装换为16进制字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Core.RWConvert.IndexToByteArray(System.Int32)">
            <summary>
            将1-24转换为长度为3的字节数组
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Core.RWConvert.HexStringToBytes(System.String)">
            <summary>
            将16禁止的文本串转换成字节数组
            如：01 00 0A FF 转换成byte[] 为[01,00,10,255]
            </summary>
            <param name="source">源字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:RW.Core.RWConvert.BytesToHexString(System.Byte[],System.String)">
            <summary>
            将字节数组转换成16进制数，并在中间插入指定的字符
            </summary>
            <param name="bytes"></param>
            <param name="insert"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Core.RWConvert.GetPLCIndex(System.Int32,System.Int32)">
            <summary>
            获取PLC点位,PLC以byte为最小单位，C#中根据类型为最小单位
            如int32，与VD700
             VD700，  701，  702，  703,
            76..10,76..10,76..10,76..10,
            int32
            32.31.30........3.2.1.0
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Core.RWConvert.ObjectToDataTable(System.Object)">
            <summary>
            将指定对象转换成DataTable用于绑定数据
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Core.RWConvert.DataTableToObject(System.Data.DataTable,System.Object)">
            <summary>
            将数据列表转换成对象，可用于读写
            </summary>
            <param name="dt"></param>
            <param name="obj"></param>
        </member>
        <member name="T:RW.RWConvert">
            <summary>
            RW通用扩展方法
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToBinary(System.Int64,System.Int32,System.Char)">
            <summary>
            将数组转换为2进制字符串
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToHex(System.Int64,System.Int32,System.Char)">
            <summary>
            将数字装换为16进制字符串
            </summary>
        </member>
        <member name="M:RW.RWConvert.IndexToByteArray(System.Int32)">
            <summary>
            将1-24转换为长度为3的字节数组
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToInt32Array(System.Object[])">
            <summary>
            将object数组转换成int数组
            </summary>
        </member>
        <member name="M:RW.RWConvert.ConvertDoubleArray(System.Object[])">
            <summary>
            将object数组转换成double数组
            </summary>
        </member>
        <member name="M:RW.RWConvert.HexStringToBytes(System.String)">
            <summary>
            将16进制的文本串转换成字节数组
            如：01 00 0A FF 转换成byte[] 为[01,00,10,255]
            </summary>
            <param name="source">源字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:RW.RWConvert.ToHexString(System.Byte[])">
            <summary>
            将字节数组转换成16进制数
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToHexString(System.Byte[],System.String)">
            <summary>
            将字节数组转换成16进制数，并在中间插入指定的字符
            </summary>
        </member>
        <member name="M:RW.RWConvert.GetPLCIndex(System.Int32,System.Int32)">
            <summary>
            获取PLC点位,PLC以byte为最小单位，C#中根据类型为最小单位
            如int32，与VD700
             VD700，  701，  702，  703,
            76..10,76..10,76..10,76..10,
            int32
            32.31.30........3.2.1.0
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:RW.RWConvert.ToPLCArray(System.Int32)">
            <summary>
            将一个32位整数转换成PLC的bool数组
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToTimeString(System.TimeSpan)">
            <summary>
            将一个TimeSpan类型转换成“某年 某月 某天 某时 某分 某秒”的形式。
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToTimeString(System.Int32)">
            <summary>
            将秒数转换成总和时间
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToTimeString(System.Int32,System.Int32,System.Int32)">
            <summary>
            将时分秒转换成Timespan后再变成中文格式
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToBytes(System.String,System.String)">
            <summary>
            将10进制数的string对象转换成字节数组
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToBytes(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            将字符串使用指定进制转换成字节数组
            如：01 02 03 04 转换成字节数组 1,2,3,4
            </summary>
            <param name="str">原始字符粗</param>
            <param name="split">分隔符</param>
            <param name="fromBase">原始进制[2,8,10,16]</param>
            <param name="defaultLength">字节数组长度</param>
            <returns></returns>
        </member>
        <member name="M:RW.RWConvert.ToIP(System.String)">
            <summary>
            将字符串IP地址转换IP对象，等同于IPAddress.Parse
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToIPBytes(System.String)">
            <summary>
            将IP转换成字节数组
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToMACBytes(System.String)">
            <summary>
            将mac字符串转换成字节数组
            </summary>
        </member>
        <member name="M:RW.RWConvert.ObjectToDataTable(System.Object)">
            <summary>
            将指定对象转换成DataTable用于绑定数据
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RW.RWConvert.DataTableToObject(System.Data.DataTable,System.Object)">
            <summary>
            将数据列表转换成对象，可用于读写
            </summary>
            <param name="dt"></param>
            <param name="obj"></param>
        </member>
        <member name="M:RW.RWConvert.ArrayEquals(System.Byte[],System.Byte[])">
            <summary>
            比较两个数组之间的值
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:RW.RWConvert.ToRelative(System.String)">
            <summary>
            将绝对路径转换成相对路径
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToInt32(System.Object)">
            <summary>
            转换成有符号32位型
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToUInt32(System.Object)">
            <summary>
            转换成无符号32位整型
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToDouble(System.Object)">
            <summary>
            转换成双精度浮点数
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToDouble(System.Object,System.Int32)">
            <summary>
            转换成双精度浮点数
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToSingle(System.Object,System.Int32)">
            <summary>
            转换成单精度浮点数（7位有效小数位）
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToBool(System.Object)">
            <summary>
            转换成bool类型
            </summary>
        </member>
        <member name="M:RW.RWConvert.ToDateTime(System.Object)">
            <summary>
            转换成日期类型
            </summary>
        </member>
        <member name="T:RW.Data.DapperDBBase`1">
            <summary>
            数据库帮助类的基类,基于Dapper
            </summary>
        </member>
        <member name="P:RW.Data.DapperDBBase`1.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="T:RW.Data.DbBase`3">
            <summary>
            数据库帮助类的基类
            </summary>
        </member>
        <member name="P:RW.Data.DbBase`3.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="T:RW.Data.IDbBase">
            <summary>
            数据库帮助类的接口
            </summary>
        </member>
        <member name="M:RW.Data.IDbBase.GetConnection">
            <summary>
            获取连接对象
            </summary>
        </member>
        <member name="P:RW.Data.IDbBase.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:RW.Data.IDbBase.ExecuteNonQuery(System.String,System.Object)">
            <summary>
            执行语句，根据参数
            </summary>
        </member>
        <member name="M:RW.Data.IDbBase.ExecuteReader(System.String,System.Object)">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:RW.Data.IDbBase.ExecuteScalar(System.String,System.Object)">
            <summary>
            执行语句并返回[0,0]的内容
            </summary>
        </member>
        <member name="M:RW.Data.IDbBase.GetDataSet(System.String,System.Object)">
            <summary>
            执行语句返回 DataSet
            </summary>
        </member>
        <member name="M:RW.Data.IDbBase.GetDataTable(System.String,System.Object)">
            <summary>
            执行语句返回 DataTable
            </summary>
        </member>
        <member name="M:RW.Data.IDbBase.Query``1(System.String,System.Object)">
            <summary>
            查询
            </summary>
            <typeparam name="T">需要返回的类型</typeparam>
            <param name="sql">查询字符串</param>
            <param name="paramter">参数（Dapper的实体类或DataParamreter类型）</param>
            <returns></returns>
        </member>
        <member name="M:RW.Data.IDbBase.Connect">
            <summary>
            连接数据库的方法
            </summary>
        </member>
        <member name="M:RW.Data.IDbBase.Close">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="T:RW.Data.MsSqlDB">
            <summary>
            使用SQLServer连接数据库的帮助类
            </summary>
        </member>
        <member name="T:RW.Data.OleDB">
            <summary>
            使用OleDbConnection连接字符串，主要用于Access数据库。
            </summary>
        </member>
        <member name="T:RW.Data.SQLiteDB">
            <summary>
            SQLite连接数据库的帮助类
            </summary>
        </member>
        <member name="T:RW.Drawing.BitmapHelper">
            <summary>
            图片处理帮助类
            </summary>
        </member>
        <member name="M:RW.Drawing.BitmapHelper.ConvertGray(System.Drawing.Bitmap)">
            <summary>
            转换成灰度图片
            </summary>
        </member>
        <member name="M:RW.Drawing.BitmapHelper.Binaryzation(System.Drawing.Bitmap,System.Int32)">
            <summary>
            二值化图片，将图片转换成黑白图片,根据阀值，阀值默认为128
            </summary>
        </member>
        <member name="M:RW.Drawing.BitmapHelper.Binaryzation(System.Drawing.Bitmap)">
            <summary>
            二值化图片，将图片转换成黑白图片,阀值默认为128
            </summary>
        </member>
        <member name="M:RW.Drawing.BitmapHelper.GetBitmap(System.Windows.Forms.Control)">
            <summary>
            获取控件的缩略图
            </summary>
            <param name="c">需要获取缩略图的控件</param>
            <returns>返回缩略图</returns>
        </member>
        <member name="M:RW.Drawing.BitmapHelper.ExportControlBitmap(System.Windows.Forms.Control,System.String)">
            <summary>
            导出控件的缩略图到文件
            </summary>
            <param name="c">控件</param>
            <param name="filename">文件名</param>
        </member>
        <member name="T:RW.Driver.DriverHelper">
            <summary>
            驱动的帮助类
            tag类型说明：
            DI:0,DO:1,AI:2,AO:3;
            </summary>
        </member>
        <member name="M:RW.Driver.DriverHelper.#cctor">
            <summary>
            静态构造，连接驱动
            </summary>
        </member>
        <member name="M:RW.Driver.DriverHelper.GetDrivers">
            <summary>
            获取所有的驱动并缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.DriverHelper.GetTags">
            <summary>
            获取所有的Tag
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.DriverHelper.GetDriver(System.Int32)">
            <summary>
            根据ID获取指定的驱动
            </summary>
            <param name="id">驱动ID</param>
            <returns>找到的驱动ID或null</returns>
        </member>
        <member name="M:RW.Driver.DriverHelper.SaveDriverItem(RW.Driver.DriverItem)">
            <summary>
            保存驱动
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.DriverHelper.RemoveDriverItem(System.Int32)">
            <summary>
            根据ID移除驱动
            </summary>
            <param name="driverId">驱动ID</param>
            <returns></returns>
        </member>
        <member name="T:RW.Driver.TagControlTypeEnums">
            <summary>
            点位控制类型
            </summary>
        </member>
        <member name="F:RW.Driver.TagControlTypeEnums.Normal">
            <summary>
            正常控制
            </summary>
        </member>
        <member name="F:RW.Driver.TagControlTypeEnums.Pluse">
            <summary>
            脉冲控制
            </summary>
        </member>
        <member name="F:RW.Driver.TagControlTypeEnums.Point">
            <summary>
            点动操作
            </summary>
        </member>
        <member name="T:RW.Driver.CRC2">
            <summary>   
            消息CRC校验算法   
            </summary>   
        </member>
        <member name="M:RW.Driver.CRC2.HexString2Bytes(System.String)">
            十六进制字符串转换成字节数组 
             
            @param hexstr 
            @return 
        </member>
        <member name="M:RW.Driver.CRC2.parse(System.Char)">
            16进制char转换成整型 
             
            @param c 
            @return 
        </member>
        <member name="F:RW.Driver.CRC16Util.value">
            CRC值
        </member>
        <member name="M:RW.Driver.CRC16Util.update(System.Byte[])">
            计算一个字节数组的CRC值 
            @param data 
        </member>
        <member name="M:RW.Driver.CRC16Util.update(System.Byte)">
            计算一个byte的CRC值 
             
            @param aByte 
        </member>
        <member name="M:RW.Driver.CRC16Util.reset">
            重新设定CRC初始值 
        </member>
        <member name="M:RW.Driver.CRC16Util.getCrcValue">
            获取计算好的CRC值 
             
            @return 
        </member>
        <member name="M:RW.Driver.CRC16Util.makeCrc16(System.Byte[])">
            <summary>  
            生成FCS校验值  
            </summary>  
            <param name="ccc"></param>  
            <returns></returns>  
        </member>
        <member name="T:RW.Driver.DriverFactory">
            <summary>
            驱动生成工厂
            </summary>
        </member>
        <member name="M:RW.Driver.DriverFactory.Create(System.String,RW.Driver.IDriverConfig)">
            <summary>
            根据类型创建驱动，默认支持OPC、Modubs，也可以手动创建一个实现IDriver的驱动
            系统根据驱动类型和驱动参数进行缓存
            </summary>
        </member>
        <member name="M:RW.Driver.DriverFactory.CreateDriverConfig(System.String)">
            <summary>
            根据类型创建驱动的配置，通常可指定OPC、Modbus等
            </summary>
        </member>
        <member name="M:RW.Driver.DriverFactory.CreateDriverConfig(System.Type)">
            <summary>
            根据类型创建驱动的配置，必须实现了IDriverConfig
            </summary>
        </member>
        <member name="M:RW.Driver.DriverFactory.CreateDriverConfig``1">
            <summary>
            泛型创建驱动的配置
            </summary>
            <typeparam name="T">驱动类型</typeparam>
        </member>
        <member name="T:RW.Driver.IDriver">
            <summary>
            所有驱动器的基类，如OPCDriver，ModbusDriver
            </summary>
        </member>
        <member name="M:RW.Driver.IDriver.LoadConfig(RW.Driver.IDriverConfig)">
            <summary>
            加载配置文件
            </summary>
            <param name="config">实现了IDriverConfig的子类</param>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.IDriver.Read(System.String)">
            <summary>
            根据关键字读取驱动器的值
            </summary>
            <param name="key">关键字</param>
            <returns>返回关键字对应的值</returns>
        </member>
        <member name="M:RW.Driver.IDriver.Write(System.String,System.Object)">
            <summary>
            根据关键字写入对应的值
            </summary>
            <param name="key">关键字</param>
            <param name="value">值</param>
        </member>
        <member name="M:RW.Driver.IDriver.Connect">
            <summary>
            连接驱动器
            </summary>
        </member>
        <member name="P:RW.Driver.IDriver.IsConnected">
            <summary>
            指示是否已经调用了Connect方法，并且成果初始化
            </summary>
        </member>
        <member name="M:RW.Driver.IDriver.Close">
            <summary>
            关闭驱动器连接
            </summary>
        </member>
        <member name="E:RW.Driver.IDriver.Connected">
            <summary>
            连接后触发的事件
            </summary>
        </member>
        <member name="E:RW.Driver.IDriver.ValueChanged">
            <summary>
            当值发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.Driver.IDriver.Errored">
            <summary>
            当错误发生时触发的事件
            </summary>
        </member>
        <member name="T:RW.Driver.ValueChangeHandler">
            <summary>
            IDriver中使用的委托，用于触发值改变的事件，
            </summary>
        </member>
        <member name="T:RW.Driver.ErrorHandler">
            <summary>
            错误的委托
            </summary>
        </member>
        <member name="T:RW.Driver.IDriverConfig">
            <summary>
            驱动的配置信息接口（用于实体）
            </summary>
        </member>
        <member name="P:RW.Driver.IDriverConfig.DriverKey">
            <summary>
            驱动唯一性标识，用于创建不同的驱动实例
            </summary>
        </member>
        <member name="M:RW.Driver.IDriverConfig.LoadTo(System.Object)">
            <summary>
            将配置信息加载到某个对象上，通常是通过序列化的方式
            </summary>
        </member>
        <member name="M:RW.Driver.IDriverConfig.Save">
            <summary>
            将配置信息保存，得看具体驱动如何实现，建议实现为保存文件
            </summary>
        </member>
        <member name="T:RW.Driver.ModbusAddress">
            <summary>
            用于ModbusDriver，允许使用字符串来描述Modbus点位、功能码
            当前支持的格式有：
            400001，H400001，400001.15，H400001.15，W400001,WH400001,W400001.15,WH400001.15,400001[8]
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.Function">
            <summary>
            功能码
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.Offset">
            <summary>
            偏移地址（字）
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.Bit">
            <summary>
            偏移位
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.IsRegister">
            <summary>
            是否是寄存器地址
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.CanWrite">
            <summary>
            是否可以写
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.WriteOnly">
            <summary>
            是否只写模式
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.Count">
            <summary>
            声明的数组长度
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.RegisterCount">
            <summary>
            寄存器大小
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.DeviceAddress">
            <summary>
            设备地址号
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.DataType">
            <summary>
            寄存器数据类型，通常可以与C#类型对应
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusAddress.IsArray">
            <summary>
            是否是数组的声明
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusAddress.#ctor(System.String,System.Int32)">
            <summary>
            支持modbus定义
            例如：H400001，H000001，H300001，H400001.7,H400001.15,WH400001,WH400001.15
            
            (W)?(H)?([0134]{1})([0-9a-zA-Z]{5})(.([0-9]{1,2}))?
            (W)?(H)?([0134]{1})([0-9a-zA-Z]{5})(\.([0-9]{1,2})|(\[([0-9]{1,2})\]))?
            
            地址,类型,设备地址
            H400001,WORD,1
            </summary>
        </member>
        <member name="T:RW.Driver.ModbusCommand">
            <summary>
            用于描述modbus的命令
            </summary>
        </member>
        <member name="T:RW.Driver.ModbusDriver">
            <summary>
            支持modbus协议的驱动
            该驱动与串口的关系为，多个驱动可能对应一个串口；由于不同的Driver可能端口号是相同的
            目前实现了01,05,15线圈读写以及03,06,16寄存器读写
            使用地址码来读写：
            比如使用400001表示输入寄存器,详见ModbusAddress类的说明
            
            ServerName可以与SerialPortDriver相同，COM1,9600,None,8,1
            </summary>
        </member>
        <member name="F:RW.Driver.ModbusDriver.ports">
            <summary>
            可以有任意modbusDriver，但根据端口名，每个driver可能会公用几个串口
            </summary>
        </member>
        <member name="F:RW.Driver.ModbusDriver.DebugMode">
            <summary>
            调试模式，调试模式下，会一直输出发送和接收的指令
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusDriver.Port">
            <summary>
            获取相关的端口信息
            </summary>
        </member>
        <member name="F:RW.Driver.ModbusDriver.registers">
            <summary>
            对于Modbus，全局的寄存器变量
            ;TODO:预计使用dictionary 以功能码和起始地址作为键...那不就是400001这样到地址吗？
            </summary>
        </member>
        <member name="F:RW.Driver.ModbusDriver.coils">
            <summary>
            对于modbus，全局到线圈变量
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusDriver.DefaultAddress">
            <summary>
            默认地址，默认地址为1
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusDriver.AsyncWrite">
            <summary>
            是否启用异步写
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusDriver.ScanRate">
            <summary>
            扫描周期，默认50ms
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusDriver.PortName">
            <summary>
            端口名称
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusDriver.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusDriver.IsConnected">
            <summary>
            指示驱动是否已连接
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusDriver.Connect">
            <summary>
            连接驱动
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusDriver.RefreshData(System.Object)">
            <summary>
            实时读取的刷新线程，每个ModbusDrvier实际上只启用了一个刷新线程
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusDriver.GetValueByModbusaddress(RW.Driver.ModbusSerialPort,RW.Driver.ModbusAddress,System.Byte[])">
            <summary>
            通过modbus地址值获取值
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:RW.Driver.ModbusSerialPort">
            <summary>
            支持modbus协议
            目前实现了01,05,15线圈读写以及03,06,16寄存器读写
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusSerialPort.FirstWordLow32">
            <summary>
            32位以低字节开始，true表示首字节为低字节，false表示高字节开始
            </summary>
        </member>
        <member name="P:RW.Driver.ModbusSerialPort.FirstWordLow64">
            <summary>
            64位以低字节开始，true表示首字节为低字节，false表示高字节开始
            注意：64位是由2个32位组成，满足32位的高低字节序
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.Send(System.Int32,System.Int32,System.Byte[])">
            <summary>
            发送modbus指令 其中datas是不包含crc校验的数据
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.getReturnLen(System.Byte[])">
            <summary>
            获取发送指令对应的返回指令字节的长度
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.ReadRegister(System.Int32,System.Int32,System.Int32)">
            <summary>
            读指定寄存器地址  命令码03
            发送：[address] [function] [start]*2 [count]*2 [crc]*2
            接收：[address] [function] []
            </summary>
            <param name="address"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.ReadCoil(System.Int32,System.Int32,System.Int32)">
            <summary>
            读线圈状态 命令码01 
            发送： [address] [function] [start]*2 [count]*2 [crc]*2
            接收： [address] [function] [count] [data]*count [crc]*2
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.ReadCoil(System.Int32,System.Int32)">
            <summary>
            读单个线圈 复用读线圈状态指令，默认数量为1，默认返回为bool值。
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.WriteRegister(System.Int32,System.Int32,System.Byte[])">
            <summary>
            写单个寄存器 命令码06 [address] [function] [start]*2 [data]*2 [crc]*2
            如果，byte的长度>2，将会使用10功能码
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.WriteRegister(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            写多个寄存器，命令码16  [address] [function] [start]*2 [count]*2 [ByteCount] [data]*n [crc]*2
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.WriteRegister(System.Int32,System.Int32,System.UInt16)">
            <summary>
            对应word类型
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.WriteRegister(System.Int32,System.Int32,System.Int16)">
            <summary>
            对应short类型
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.WriteRegister(System.Int32,System.Int32,System.Int32)">
            <summary>
            对应long类型
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.WriteRegister(System.Int32,System.Int32,System.UInt32)">
            <summary>
            对应dword类型
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.WriteRegister(System.Int32,System.Int32,System.Single)">
            <summary>
            对应float类型
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.WriteRegister(System.Int32,System.Int32,System.Double)">
            <summary>
            对应double类型
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.WriteCoil(System.Int32,System.Int32,System.Boolean)">
            <summary>
            写单个线圈 命令码05 0x05 [address] [function] [start]*2 [data]*2 [crc]*2
            </summary>
        </member>
        <member name="M:RW.Driver.ModbusSerialPort.WriteCoil(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            写多个线圈 命令码15 0x0F [address] [function] [start]*2 [count]*2 [byteCount] [data]*2 [crc]*2
            </summary>
        </member>
        <member name="T:RW.Driver.NET.TCPClientDriver">
            <summary>
            采用tcp通讯的客户端，暂未找到应用场景
            只能考虑一个字节一个字节的读取，或者，根据bufferSize读取和触发事件。
            </summary>
        </member>
        <member name="P:RW.Driver.NET.TCPClientDriver.IsConnected">
            <summary>
            是否已连接
            </summary>
        </member>
        <member name="P:RW.Driver.NET.TCPClientDriver.HostName">
            <summary>
            服务器名称
            </summary>
        </member>
        <member name="P:RW.Driver.NET.TCPClientDriver.Port">
            <summary>
            端口地址
            </summary>
        </member>
        <member name="T:RW.Driver.OPCConfig">
            <summary>
            用于OPC相关的配置
            </summary>
        </member>
        <member name="M:RW.Driver.OPCConfig.#ctor">
            <summary>
            初始化OPCConfig的实例
            </summary>
        </member>
        <member name="M:RW.Driver.OPCConfig.#ctor(System.String)">
            <summary>
            初始化OPCConfig的实例，并指定配置文件的存储路径
            </summary>
        </member>
        <member name="P:RW.Driver.OPCConfig.ServerName">
            <summary>
            OPC的服务名称，默认为KEPware.KEPServerEx.V4
            </summary>
        </member>
        <member name="P:RW.Driver.OPCConfig.Prefix">
            <summary>
            OPC点位名称的前缀，可用于快速给定点位
            </summary>
        </member>
        <member name="P:RW.Driver.OPCConfig.IP">
            <summary>
            服务器的IP，默认为空。表示本机
            </summary>
        </member>
        <member name="P:RW.Driver.OPCConfig.DriverKey">
            <summary>
            驱动的唯一性标识，用于创建不同的实例
            </summary>
        </member>
        <member name="M:RW.Driver.OPCConfig.LoadTo(System.Object)">
            <summary>
            将一个配置复制到本类的属性中，采用反射
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:RW.Driver.OPCConfigHelper">
            <summary>
            OPC配置帮助类
            </summary>
        </member>
        <member name="M:RW.Driver.OPCConfigHelper.Load(System.String,RW.Driver.OPCDriver)">
            <summary>
            加载配置
            </summary>
        </member>
        <member name="M:RW.Driver.OPCConfigHelper.Save(System.String,RW.Driver.OPCDriver)">
            <summary>
            保存配置
            </summary>
        </member>
        <member name="T:RW.Driver.OPCDriver">
            <summary>
            OPC驱动
            
            错误代码提示：
            0xC0040007：OPC未定义指定的名称；
            </summary>
        </member>
        <member name="F:RW.Driver.OPCDriver.DebugMode">
            <summary>
            调试模式：调试模式会触发DataChanged事件
            </summary>
        </member>
        <member name="P:RW.Driver.OPCDriver.Server">
            <summary>
            手动获取OPCServer，默认情况下无需公开调用
            </summary>
        </member>
        <member name="P:RW.Driver.OPCDriver.Config">
            <summary>
            当前 OPC 的启动配置，在OPC连接之前有效
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.LoadConfig(RW.Driver.IDriverConfig)">
            <summary>
            加载OPC配置
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.RecurBrowse">
            <summary>
            列出OPC服务器中所有节点
            </summary>
        </member>
        <member name="P:RW.Driver.OPCDriver.ServerName">
            <summary>
            OPC服务名称
            </summary>
        </member>
        <member name="P:RW.Driver.OPCDriver.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="P:RW.Driver.OPCDriver.IP">
            <summary>
            外部的IP地址，为空表示为本地连接。
            </summary>
        </member>
        <member name="P:RW.Driver.OPCDriver.IsConnected">
            <summary>
            指示驱动是否已连接
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.GetFullKey(System.String)">
            <summary>
            根据前缀获得完整的键值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.OPCDriver.GetItem(System.String)">
            <summary>
            获取指定的标签
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">必须包含标签名</exception>
            <param name="key">标签名</param>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.OPCDriver.GetItems(System.String[])">
            <summary>
            批量获取指定的标签项
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.OPCDriver.IsGood(System.String)">
            <summary>
            判断指定的点位的通讯质量是否正常
            </summary>
            <param name="key">指定的点位名称</param>
            <returns>通讯是否正常</returns>
        </member>
        <member name="M:RW.Driver.OPCDriver.SetActive(System.String,System.Boolean)">
            <summary>
            设置指定的点位激活状态
            </summary>
            <param name="key">指定的点位名称</param>
            <param name="value">指定的值名称</param>
        </member>
        <member name="F:RW.Driver.OPCDriver.keyValues">
            <summary>
            用于储存最新的数据，不会每次读取OPC，减少IO
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.GetLastValue(System.String)">
            <summary>
            获取缓存中的最新值（标签必须被添加）
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.AddItem(System.String)">
            <summary>
            添加一个监控用的标签名（添加后将触发DataChange事件）
            </summary>
        </member>
        <member name="P:RW.Driver.OPCDriver.BatchAddItem">
            <summary>
            是否开启批量添加项
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.AddItems(System.String[])">
            <summary>
            批量添加一批标签名，可通过GetItems获取指定的标签
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:RW.Driver.OPCDriver.Connect(System.String)">
            <summary>
            连接OPC
            </summary>
            <param name="serverName"></param>
        </member>
        <member name="M:RW.Driver.OPCDriver.Connect">
            <summary>
            连接OPC
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.Close">
            <summary>
            关闭OPC连接,Group重置，如再次连接时需要重新添加
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.Write(System.String,System.Object)">
            <summary>
            通过指定的key写入OPC
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.GetOPCValue(System.Int16,System.Object,System.Object)">
            <summary>
            获取OPC的值
            </summary>
            <param name="dataType">数据类型</param>
            <param name="currentValue"></param>
            <param name="sourceValue"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.OPCDriver.SyncWrite(System.String[],System.Object[])">
            <summary>
            采用同步方式写入一组数据
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.AsyncWrite(System.String[],System.Object[])">
            <summary>
            采用异步方式写入一组数据，并返回写入任务的ID
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.Read(System.String)">
            <summary>
            读取指定OPC标签的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.OPCDriver.SyncRead(System.String)">
            <summary>
            同步读取 OPC的值，而不是从缓存读取。
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.SyncRead(System.String[])">
            <summary>
            同步读取多个OPC的值，而不是同缓存读取
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.AsyncRead(System.String[])">
            <summary>
            异步读取OPC的值到缓存中
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="E:RW.Driver.OPCDriver.AsyncWriteComplete">
            <summary>
            异步写完成事件
            </summary>
        </member>
        <member name="E:RW.Driver.OPCDriver.AsyncReadComplete">
            <summary>
            异步读完成事件
            </summary>
        </member>
        <member name="E:RW.Driver.OPCDriver.ValueChanged">
            <summary>
            值改变事件
            </summary>
        </member>
        <member name="E:RW.Driver.OPCDriver.KeyQualitiesChanged">
            <summary>
            质量状态改变事件
            </summary>
        </member>
        <member name="E:RW.Driver.OPCDriver.ItemChanged">
            <summary>
            值状态改变事件
            </summary>
        </member>
        <member name="E:RW.Driver.OPCDriver.Connected">
            <summary>
            已连接事件
            </summary>
        </member>
        <member name="E:RW.Driver.OPCDriver.Errored">
            <summary>
            发生错误时触发的事件
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.OnValueChanged(System.String,System.Object)">
            <summary>
            触发值改变行为
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.OnErrored(System.Exception)">
            <summary>
            触发错误事件
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:RW.Driver.OPCDriver.OnErrored(System.String,System.Exception)">
            <summary>
            触发错误事件
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.OnErrored(System.String,System.String,System.Exception)">
            <summary>
            触发错误事件
            </summary>
        </member>
        <member name="M:RW.Driver.OPCDriver.ToString">
            <summary>
            转成string类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:RW.Driver.OPCDataType">
            <summary>
            OPC的数据类型枚举
            </summary>
        </member>
        <member name="F:RW.Driver.OPCDataType.BOOLEAN">
            <summary>
            真假值
            </summary>
        </member>
        <member name="F:RW.Driver.OPCDataType.SHORT">
            <summary>
            有符号短整型（int16）
            </summary>
        </member>
        <member name="F:RW.Driver.OPCDataType.LONG">
            <summary>
            有符号长整型（int32）
            </summary>
        </member>
        <member name="F:RW.Driver.OPCDataType.FLOAT">
            <summary>
            单精度浮点数
            </summary>
        </member>
        <member name="F:RW.Driver.OPCDataType.DOUBLE">
            <summary>
            双精度浮点数
            </summary>
        </member>
        <member name="F:RW.Driver.OPCDataType.WORD">
            <summary>
            无符号字
            </summary>
        </member>
        <member name="F:RW.Driver.OPCDataType.DWORD">
            <summary>
            无符号双字
            </summary>
        </member>
        <member name="T:RW.Driver.OPCDataArray">
            <summary>
            OPC数据类型
            </summary>
        </member>
        <member name="F:RW.Driver.OPCDataArray.Normal">
            <summary>
            标准类型
            </summary>
        </member>
        <member name="F:RW.Driver.OPCDataArray.Array">
            <summary>
            数组类型
            </summary>
        </member>
        <member name="T:RW.Driver.SerialPortConfig">
            <summary>
            串口配置信息
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortConfig.#ctor">
            <summary>
            使用默认构造创建串口配置，COM1,9600,8,Even,1
            </summary>
        </member>
        <member name="P:RW.Driver.SerialPortConfig.PortName">
            <summary>
            端口号，默认COM1
            </summary>
        </member>
        <member name="P:RW.Driver.SerialPortConfig.BaudRate">
            <summary>
            波特率，默认9600
            </summary>
        </member>
        <member name="P:RW.Driver.SerialPortConfig.DataBits">
            <summary>
            数据位，默认8
            </summary>
        </member>
        <member name="P:RW.Driver.SerialPortConfig.Parity">
            <summary>
            奇偶校验，默认偶
            </summary>
        </member>
        <member name="P:RW.Driver.SerialPortConfig.StopBits">
            <summary>
            停止位，默认1
            </summary>
        </member>
        <member name="T:RW.Driver.SerialPortDriver">
            <summary>
            暂时未完成实现
            ServerName可以这样描述：
            COM1,9600,None,8,1
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.#ctor">
            <summary>
            初始化 SerialPortDriver 的实例
            </summary>
        </member>
        <member name="P:RW.Driver.SerialPortDriver.IsConnected">
            <summary>
            指示驱动是否已连接
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.Read(System.String)">
            <summary>
            根据关键字读取驱动器的值
            </summary>
            <param name="key">关键字</param>
            <returns>返回关键字对应的值</returns>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.Write(System.String,System.Object)">
            <summary>
            根据关键字写入对应的值
            </summary>
            <param name="key">关键字</param>
            <param name="value">值</param>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.Connect">
            <summary>
            连接此串口
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.Connect(System.String)">
            <summary>
            根据端口连接此串口
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.Connect(System.String,System.Int32)">
            <summary>
            指定端口和波特率连接串口
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.WriteString(System.String)">
            <summary>
            写一个字符串
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.Write(System.Byte)">
            <summary>
            写一个数组
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.Write(System.Byte[])">
            <summary>
            写数组数据
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.WriteLine">
            <summary>
            写换行
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.LoadConfig(RW.Driver.IDriverConfig)">
            <summary>
            加载配置
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.Close">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortDriver.Dispose">
            <summary>
            关闭并且释放资源
            </summary>
        </member>
        <member name="T:RW.Driver.SerialPortPool">
            <summary>
            串口池工具，防止串口占用
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortPool.GetModbusSerialPort(RW.Driver.IDriverConfig)">
            <summary>
            获取基于modbus串口的实例
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.SerialPortPool.CreateSerialPort">
            <summary>
            创建默认串口类型的实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.SerialPortPool.CreateSerialPort(System.Type,System.String)">
            <summary>
            根据类型创建串口类型
            </summary>
        </member>
        <member name="M:RW.Driver.SerialPortPool.CreateSerialPort``1(System.String)">
            <summary>
            通过泛型创建指定的类型
            </summary>
        </member>
        <member name="T:RW.Driver.MSSQLDriver">
            <summary>
            SQL方式的驱动，基于Dapper进行读写。
            </summary>
        </member>
        <member name="P:RW.Driver.SQLConfig.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="T:RW.Driver.SQLDriver">
            <summary>
            所有基于SQL的抽象底层驱动。
            </summary>
        </member>
        <member name="E:RW.Driver.SQLDriver.Connected">
            <summary>
            正常连接后触发的事件
            </summary>
        </member>
        <member name="E:RW.Driver.SQLDriver.ValueChanged">
            <summary>
            值改变事件，暂时无法触发。
            </summary>
        </member>
        <member name="E:RW.Driver.SQLDriver.Errored">
            <summary>
            发生错误时触发的事件
            </summary>
        </member>
        <member name="F:RW.Driver.SQLDriver.db">
            <summary>
            基于Dapper的数据库操作抽象
            </summary>
        </member>
        <member name="P:RW.Driver.SQLDriver.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:RW.Driver.SQLDriver.InitDB">
            <summary>
            初始化数据库db对象
            </summary>
        </member>
        <member name="M:RW.Driver.SQLDriver.Close">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="M:RW.Driver.SQLDriver.Connect">
            <summary>
            连接数据库
            </summary>
        </member>
        <member name="M:RW.Driver.SQLDriver.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:RW.Driver.SQLDriver.LoadConfig(RW.Driver.IDriverConfig)">
            <summary>
            加载SQLConfig配置
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:RW.Driver.SQLDriver.Read(System.String)">
            <summary>
            SQL查询，默认返回DataTable格式的数据。
            </summary>
            <param name="key">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:RW.Driver.SQLDriver.Write(System.String,System.Object)">
            <summary>
            写入指令，一般为增删改语句,支持Dapper方式
            例:delete table where col=@parameter
            其中，@parameter是value对象中的parameter属性。
            </summary>
            <param name="key">SQL语句</param>
            <param name="value">参数对象，可以为空。</param>
        </member>
        <member name="T:RW.Driver.SQLiteDriver">
            <summary>
            SQLite方式的驱动，基于Dapper进行读写。
            </summary>
        </member>
        <member name="P:RW.Driver.PCIConfig.ChannelCount">
            <summary>
            通道数量
            </summary>
        </member>
        <member name="P:RW.Driver.PCIConfig.ClockRate">
            <summary>
            采样频率,（每个通道的采样率）
            </summary>
        </member>
        <member name="T:RW.Electron.ElectronicSwitch">
            <summary>
            一种专用于检测上升沿和下降沿的电子开关对象
            </summary>
        </member>
        <member name="M:RW.Electron.ElectronicSwitch.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="M:RW.Electron.ElectronicSwitch.#ctor(System.Boolean)">
            <summary>
            初始化bool的值
            </summary>
        </member>
        <member name="P:RW.Electron.ElectronicSwitch.Switch">
            <summary>
            开关的状态
            </summary>
        </member>
        <member name="E:RW.Electron.ElectronicSwitch.SwitchChanged">
            <summary>
            开关状态改变的事件
            </summary>
        </member>
        <member name="E:RW.Electron.ElectronicSwitch.Switching">
            <summary>
            开关状态改变前的事件，允许被取消
            </summary>
        </member>
        <member name="E:RW.Electron.ElectronicSwitch.PosedgeTigger">
            <summary>
            触发上升沿的事件
            </summary>
        </member>
        <member name="E:RW.Electron.ElectronicSwitch.NegedgeTigger">
            <summary>
            触发下降沿的事件
            </summary>
        </member>
        <member name="T:RW.Electron.HDL">
            <summary>
            硬件描述语言（Hardware Description Language），用于支持对硬件的常规操作
            </summary>
        </member>
        <member name="M:RW.Electron.HDL.Posedge(System.Boolean@,System.Func{System.Boolean})">
            <summary>
            上升沿动作，当检测到value值由false变为true时，将会触发callback回调函数。
            如果callback回调函数返回了false，表示终止触发。
            </summary>
        </member>
        <member name="M:RW.Electron.HDL.Negedge(System.Boolean@,System.Func{System.Boolean})">
            <summary>
            下降沿动作，当检测到value值由true变为false时，将会触发callback回调函数。
            如果callback回调函数返回了false，表示终止触发。
            </summary>
        </member>
        <member name="T:RW.Electron.IElectronicSwitch">
            <summary>
            一种描述电子开关的接口
            </summary>
        </member>
        <member name="E:RW.Electron.IElectronicSwitch.PosedgeTigger">
            <summary>
            触发上升沿的事件
            </summary>
        </member>
        <member name="E:RW.Electron.IElectronicSwitch.NegedgeTigger">
            <summary>
            触发下降沿的事件
            </summary>
        </member>
        <member name="T:RW.ExcelHelper">
            <summary>
            提供一些excel常用帮助方法
            </summary>
        </member>
        <member name="M:RW.ExcelHelper.DataGridViewToExcel(System.Windows.Forms.DataGridView,System.String)">
            <summary>
            将DataGridview导出为Excel，请注意以xls后缀保存，否则打开只是普通文本
            </summary>
            <param name="dgvSource">指定的datagridview</param>
            <param name="filename">导出的文件名</param>
        </member>
        <member name="M:RW.ExcelHelper.DataTableToExcel(System.Data.DataTable,System.String[],System.String)">
            <summary>
            将数据保存到文件（格式可以是.xls,.txt等;）
            缺点：数据类型只能为整数型如：007显示为7
            优点：适合大量数据，速度快
            </summary>
            <param name="table">DataTable</param>
            <param name="titles">行标题(按从左到右排列)</param>
            <param name="file">要保存的文件路径</param>
        </member>
        <member name="M:RW.ExcelHelper.GetCellName(System.Char,System.Int32,System.Int32)">
            <summary>
            自动计算位置，并获取累加后的Excel名称，如Z+1=AA
            </summary>
            <param name="charIndex">直接使用char的ASCII码</param>
            <param name="index">索引号</param>
            <returns>计算后的cell名称</returns>
        </member>
        <member name="T:RW.Filter.Smoothing">
            <summary>
            滑动滤波算法
            </summary>
        </member>
        <member name="P:RW.Filter.Smoothing.Size">
            <summary>
            队列长度，先进先出模式，默认为30
            </summary>
        </member>
        <member name="P:RW.Filter.Smoothing.SkipCount">
            <summary>
            去头去尾滤波，默认为6，前6，后6
            </summary>
        </member>
        <member name="P:RW.Filter.Smoothing.DecimalCount">
            <summary>
            对结果保留小数位，默认为4
            </summary>
        </member>
        <member name="M:RW.Filter.Smoothing.PushAndGetValue(System.Double)">
            <summary>
            添加一个新数据，并返回滤波后的数据，即时计算方法，
            由于此滤波方法有一定的滞后性，适用于显示频率 小于采集频率
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:RW.Fonts.FontHelper">
            <summary>
            用于字典管理，可以从文件中读取*.ttf或者从资源中获取。
            默认提供了FX-LED、YournameD7HomeHalf字体。
            </summary>
        </member>
        <member name="M:RW.Fonts.FontHelper.GetFont(System.String,System.Int32,System.Drawing.FontStyle)">
            <summary>
            获取指定的字体，通过Family的字符串描述
            </summary>
        </member>
        <member name="M:RW.Fonts.FontHelper.GetFont(System.Drawing.FontFamily,System.Int32,System.Drawing.FontStyle)">
            <summary>
            获取指定的字体，通过FontFamily对象
            </summary>
        </member>
        <member name="M:RW.Fonts.FontHelper.GetDigital">
            <summary>
            获取默认的字体
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.Fonts.FontHelper.GetFontByName(System.String)">
            <summary>
            获取指定的字体
            </summary>
        </member>
        <member name="M:RW.Fonts.FontHelper.LoadFont(System.String)">
            <summary>
            从资源中加载一个字体
            </summary>
        </member>
        <member name="M:RW.Fonts.FontHelper.LoadFont(System.Byte[])">
            <summary>
            从字节数组中加载一个字体
            </summary>
        </member>
        <member name="M:RW.Fonts.FontHelper.LoadFontByFilename(System.String)">
            <summary>
            从文件中加载一个字体
            </summary>
        </member>
        <member name="F:RW.Forms.frmExampleForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.Forms.frmExampleForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.Forms.frmExampleForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.Globalization.Tips">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Authorize_Tips_ValidFail">
            <summary>
              查找类似 验证失败！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Authorize_Tips_ValidOK">
            <summary>
              查找类似 验证成功！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.BaseIDName_Tips_DeleteFalse">
            <summary>
              查找类似 删除失败！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.BaseIDName_Tips_DeleteQuestion">
            <summary>
              查找类似 确定要删除{0}吗？ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.BaseIDName_Tips_DeleteTrue">
            <summary>
              查找类似 删除成功！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.BaseIDName_Tips_First">
            <summary>
              查找类似 已经是第一条记录了，无法上移。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.BaseIDName_Tips_Last">
            <summary>
              查找类似 已经是最后一条记录了，无法下移。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.BaseIDName_Tips_NameEmpty">
            <summary>
              查找类似 名称不能为空，请重新输入。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.BaseIDName_Tips_NameExists">
            <summary>
              查找类似 名称已经存在，请输入其他名称。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.BaseIDName_Tips_SelectItem">
            <summary>
              查找类似 请选择一个类型！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ChangedPwd_Tips_ConfirmPasswordEmpty">
            <summary>
              查找类似 确认密码不能为空，请重新输入！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ChangedPwd_Tips_NewPasswordEmpty">
            <summary>
              查找类似 新密码不能为空，请重新输入 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ChangedPwd_Tips_NewPasswordError">
            <summary>
              查找类似 两次输入的密码不正确，请重新输入！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ChangedPwd_Tips_PasswordEmpty">
            <summary>
              查找类似 密码不能为空，请重新输入！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ChangedPwd_Tips_PasswordError">
            <summary>
              查找类似 原始密码不正确，请重新输入！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ChangedPwd_Tips_SystemInfo">
            <summary>
              查找类似 系统提示 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ChangedPwd_Tips_UpdatePasswordError">
            <summary>
              查找类似 修改失败！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ChangedPwd_Tips_UpdatePasswordSuccess">
            <summary>
              查找类似 密码修改成功，重新登录后即可生效！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Common_Tips_AddError">
            <summary>
              查找类似 添加失败！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Common_Tips_AddSuccess">
            <summary>
              查找类似 添加成功！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Common_Tips_DeleteError">
            <summary>
              查找类似 删除失败！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Common_Tips_DeleteSuccess">
            <summary>
              查找类似 删除成功！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Common_Tips_LoadError">
            <summary>
              查找类似 加载数据失败！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Common_Tips_SaveError">
            <summary>
              查找类似 保存失败！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Common_Tips_SaveSuccess">
            <summary>
              查找类似 保存成功！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Common_Tips_UpdateError">
            <summary>
              查找类似 修改失败！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Common_Tips_UpdateSuccess">
            <summary>
              查找类似 修改成功！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ConfigManager_Tips_NotSupport">
            <summary>
              查找类似 不支持的配置类型[{0}]。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Configmanager_Tips_SaveOK">
            <summary>
              查找类似 保存配置成功，建议重新启动应用程序！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.DB_Type_NotSupport">
            <summary>
              查找类似 未找到类型[{0}] 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.DB_Type_TypeError">
            <summary>
              查找类似 类型[{0}]不是IDBConnection类型,无法加载。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Definition_ValuePage_SaveEmpty">
            <summary>
              查找类似 请指定文件名。参数名:Filename. 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Definition_ValueRange_RangeError">
            <summary>
              查找类似 范围的描述不正确,应该为&apos;(1,100)&apos;或&apos;[1,100]&apos;的格式，当前为&apos;{0}&apos;。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Factory_ArgumentEmpty">
            <summary>
              查找类似 创建驱动参数的类型不能为空。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Factory_ArgumentTypeError">
            <summary>
              查找类似 未找到类型[{0}]的驱动参数。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Factory_ArgumentTypeNotSupport">
            <summary>
              查找类似 指定的驱动类型[{0}]未实现IDriverConfig接口。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Factory_DriverConfigNotSupport">
            <summary>
              查找类似 我们的攻城狮暂未支持驱动参数[{0}] 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Factory_DriverNotSupport">
            <summary>
              查找类似 我们的攻城狮暂未支持驱动[{0}] 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Factory_NotInterface">
            <summary>
              查找类似 指定的驱动类型[{0}]未实现IDriver接口。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Factory_TypeNotSupport">
            <summary>
              查找类似 未找到类型[{0}]的驱动。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Modbus_CRCError">
            <summary>
              查找类似 CRC校验失败！data:[{0}] 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Modbus_FormatError">
            <summary>
              查找类似 [{0}]格式不正确。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Modbus_NotSupportDataType">
            <summary>
              查找类似 不支持的数据类型&lt;{0}&gt; 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Modbus_OverBit">
            <summary>
              查找类似 比特位[{0}]错误，只能是0-15的数字。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_Modbus_PortTimeout">
            <summary>
              查找类似 端口 [{0}] 未响应！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_BatchAddError">
            <summary>
              查找类似 批量添加OPCTag[{0}]错误：{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_BatchWriteLengthError">
            <summary>
              查找类似 批量写入的Key和Value的长度不同。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_ConnectError">
            <summary>
              查找类似 OPC服务[{0}]连接失败[{1}]：{2} 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_KeyNotFound">
            <summary>
              查找类似 [{0}]不存在，在驱动[{1}]中. 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_NotConnect">
            <summary>
              查找类似 没有连接OPC，请确保Connect方法在初始化之前已调用。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_OPCShutDown">
            <summary>
              查找类似 OPC连接已断开[{0}] 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_PointNotExists">
            <summary>
              查找类似 点位不存在，请确认点位名称[{0}]是否正确！{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_ServerErrorStatus">
            <summary>
              查找类似 OPC未连接，状态：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_ServerIsConnected">
            <summary>
              查找类似 OPC服务已连接，不能重复连接。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_ServerNotExists">
            <summary>
              查找类似 OPC服务名称[{0}]不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_ServerNotRunning">
            <summary>
              查找类似 服务[{0}]未运行。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_TagEmpty">
            <summary>
              查找类似 请指定OPC的标签名 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Driver_OPC_WriteError">
            <summary>
              查找类似 写入指令通讯故障。（key:[{0}],value:[{1}]）{2} 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Eventlogs_ClearError">
            <summary>
              查找类似 清空失败： 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Eventlogs_ConfirmClear">
            <summary>
              查找类似 确定要清空所有事件日志吗？ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.EventLogs_FormatError">
            <summary>
              查找类似 日志文件格式错误：{0} length:{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.EventLogs_FormatError2">
            <summary>
              查找类似 &quot;日志文件格式错误，请移除Event Logs/logs.txt文件后重新操作，如问题一直存在，请将日志功能关闭。详细:{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.FileLog_AddEmpty">
            <summary>
              查找类似 添加日志出错，日志内容不能为null 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Hardware_Slice_AddEmpty">
            <summary>
              查找类似 上一个增益数据未保存，无法新增。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Hardware_Slice_ClearConfirm">
            <summary>
              查找类似 确定要清空所有零点增益吗？ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Hardware_Slice_RemoveConfirm">
            <summary>
              查找类似 确定要移除吗？ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Hardware_Slice_SettingTitle">
            <summary>
              查找类似 分段零点增益设置 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.HotKeys_KeyExists">
            <summary>
              查找类似 快捷键[{0}]已被注册，不能重复注册。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.HotKeys_PageKeyExists">
            <summary>
              查找类似 页面快捷键已存在，不可重复创建快捷键对象。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.InputBox_Tips_InputError">
            <summary>
              查找类似 格式输入错误！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_DatabaseError">
            <summary>
              查找类似 数据库访问失败 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_Login">
            <summary>
              查找类似 用户 {0} 登录系统。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_LoginError">
            <summary>
              查找类似 登录失败：{0}还剩{1}次机会。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_LoginSuccess">
            <summary>
              查找类似 登录成功！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_Logout">
            <summary>
              查找类似 用户 {0} 退出系统。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_OverMaxLoginCount">
            <summary>
              查找类似 已超过最大登录失败次数，系统即将退出。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_PasswordCannotEmpty">
            <summary>
              查找类似 密码不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_PasswordError">
            <summary>
              查找类似 密码错误，请重新输入 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_UserExit">
            <summary>
              查找类似 用户 {0} 退出系统。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_UserLoadError">
            <summary>
              查找类似 加载用户信息失败，请确认问题后重新启动。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_UserLogin">
            <summary>
              查找类似 用户 {0} 登录系统。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_UsernameCannotEmpty">
            <summary>
              查找类似 用户名不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Login_Tips_UsernameNotExists">
            <summary>
              查找类似 用户不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Modue_Exception_CannotSetDriver">
            <summary>
              查找类似 模块已初始化，无法设置Driver属性。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Exception_DriverIsNull">
            <summary>
              查找类似 模块未指定驱动，无法初始化 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Exception_DriverNotExists">
            <summary>
              查找类似 未找到指定驱动，可能是由于未注册点。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Exception_InitError">
            <summary>
              查找类似 驱动[{0}]初始化点位[{1}:{2}]失败。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Exception_PointNotExists">
            <summary>
              查找类似 找不到点位[{0}]，可能是点位或模块不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Exception_RegisterDriverIsNull">
            <summary>
              查找类似 初始化点位时[{0}]，驱动不能为空。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Exception_WriteDriverIsNull">
            <summary>
              查找类似 代码错误，写入操作时，未指定所使用的驱动。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Exception_WriteDriverNotConnect">
            <summary>
              查找类似 写入操作时，必须要先完成驱动的初始化！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Exception_WriteTimeout">
            <summary>
              查找类似 操作超时，请确认点位反馈正常。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Extender_ControlNotSupport">
            <summary>
              查找类似 系统无法识别的控件类型[{0}={1}]。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Extender_DIKeyEmpty">
            <summary>
              查找类似 按钮[{0}]未配置任何相关点位。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Extender_DOKeyEmpty">
            <summary>
              查找类似 按钮[{0}]写入点不能为空，请先设置OutputTagName属性。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Extender_DOWriteTimeout">
            <summary>
              查找类似 操作超时，请确认检测点[{0}]反馈是否正常。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Module_Extender_HardwareIsNull">
            <summary>
              查找类似 找不到控件[{0}]对应的模块点位[{1}].[{2}]。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.ModuleExtenderOutputEmpty">
             <summary>
               查找类似 按钮[{0}]未配置点位OutputTagName,但是配置是ModuleName={1}。您可能需要：
            1、设置OutputTagName属性，关联DO点。
            2、移除ModuleName属性。
            3、将CanClick属性设置为false。 的本地化字符串。
             </summary>
        </member>
        <member name="P:RW.Globalization.Tips.PointConfirm_PageNotExists">
            <summary>
              查找类似 请先添加页面，然后再添加内容。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Report_Tips_FileNotExists">
            <summary>
              查找类似 报表文件不存在，请确保文件存在！\r\n路径： 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Report_Tips_PrintConfirm">
            <summary>
              查找类似 请确认报表结果是否正确，是否要立即打印？ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.RWUser_Permission_1">
            <summary>
              查找类似 管理员 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.RWUser_Permission_2">
            <summary>
              查找类似 工艺员 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.RWUser_Permission_3">
            <summary>
              查找类似 操作员 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.RWUser_Permission_Unknown">
            <summary>
              查找类似 未知权限 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.SelfTest_AutoClose">
            <summary>
              查找类似 {0}秒后自动关闭。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.SelfTest_InitFault">
            <summary>
              查找类似 请联系厂家电话：0731-28494892 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.SelfTest_Tips_FormIsNull">
            <summary>
              查找类似 请先指定自检UI，Form不能为空。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.SelfTest_Tips_NotEmpty">
            <summary>
              查找类似 自检行为不能为空！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.Tips_System">
            <summary>
              查找类似 系统提示 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserEdit_Tips_SaveFault">
            <summary>
              查找类似 保存失败！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserEdit_Tips_SaveOK">
            <summary>
              查找类似 保存成功！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserManager_Tips_BindError">
            <summary>
              查找类似 绑定用户列表失败：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserManager_Tips_CannotDelete">
            <summary>
              查找类似 系统用户无法删除！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserManager_Tips_CannotDeleteMySelf">
            <summary>
              查找类似 无法删除自己！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserManager_Tips_DeleteUserEmpty">
            <summary>
              查找类似 请选择要删除的用户。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserManager_Tips_PasswordEmpty">
            <summary>
              查找类似 请输入密码，至少包含一个字符！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserManager_Tips_UserEmpty">
            <summary>
              查找类似 请输入用户名！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserManager_Tips_UserExists">
            <summary>
              查找类似 用户名[{0}]已存在，请重新输入！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserManager_Tips_UserIsNull">
            <summary>
              查找类似 用户信息不能为空。 的本地化字符串。
            </summary>
        </member>
        <member name="P:RW.Globalization.Tips.UserSignIn">
            <summary>
              查找类似 用户登录 的本地化字符串。
            </summary>
        </member>
        <member name="T:RW.IClickable">
            <summary>
            用于描述可点击的控件
            </summary>
        </member>
        <member name="P:RW.IClickable.CanClick">
            <summary>
            是否允许点击
            </summary>
        </member>
        <member name="P:RW.IClickable.ClickSwitch">
            <summary>
            点击是否切换
            </summary>
        </member>
        <member name="P:RW.IClickable.ClickAction">
            <summary>
            点击类型，0为默认，1为脉冲，2为脉冲（需实现IPointClick）
            </summary>
        </member>
        <member name="E:RW.IClickable.Click">
            <summary>
            点击事件（通常Control中都包含）
            </summary>
        </member>
        <member name="E:RW.IClickable.PointClicked">
            <summary>
            点动点击事件
            </summary>
        </member>
        <member name="T:RW.PointClickHandler">
            <summary>
            用于支持点动事件的委托
            </summary>
            <param name="sender"></param>
            <param name="state"></param>
        </member>
        <member name="T:RW.IAsyncClickabe">
            <summary>
            用于描述支持异步点击的控件
            </summary>
        </member>
        <member name="P:RW.IAsyncClickabe.AsyncClick">
            <summary>
            是否是异步点击
            </summary>
        </member>
        <member name="T:RW.ClickTypeEnums">
            <summary>
            点击类型枚举
            </summary>
        </member>
        <member name="F:RW.ClickTypeEnums.Default">
            <summary>
            默认点击
            </summary>
        </member>
        <member name="F:RW.ClickTypeEnums.PluseClick">
            <summary>
            脉冲点击方式
            </summary>
        </member>
        <member name="F:RW.ClickTypeEnums.PointClick">
            <summary>
            点动点击方式
            </summary>
        </member>
        <member name="T:RW.IIndex`1">
            <summary>
            支持Index字段以及this[T value]索引器的接口，实现自IIndexFiled与IIndexes&#60;T>接口
            </summary>
        </member>
        <member name="T:RW.IIndex">
            <summary>
            支持Index字段以及this[double value]索引器的接口，实现自IIndexFiled与IIndexes接口
            </summary>
        </member>
        <member name="T:RW.IIndexFiled">
            <summary>
            声明IIndexFiled的接口，用于统一描述包含Index字段的类
            </summary>
        </member>
        <member name="P:RW.IIndexFiled.Index">
            <summary>
            获取或设置索引号
            </summary>
        </member>
        <member name="T:RW.IIndexes`1">
            <summary>
            声明IIndexes的接口，用于统一描述包含索引的类，可以通过this访问的类
            </summary>
        </member>
        <member name="M:RW.IIndexes`1.Get(System.Int32)">
            <summary>
            获取或设置指定的索引值
            </summary>
        </member>
        <member name="T:RW.IIndexes">
            <summary>
            获取索引的接口，类型为double
            </summary>
        </member>
        <member name="T:RW.IIndexSwitch">
            <summary>
            用于描述IIndexFiled与ISwitch同时存在的接口
            </summary>
        </member>
        <member name="T:RW.IIndexValue">
            <summary>
            用于支持IIndexFiled以及IValue同时存在的接口
            </summary>
        </member>
        <member name="T:RW.IInit">
            <summary>
            用于描述包含自动初始化的统一接口
            </summary>
        </member>
        <member name="P:RW.IInit.AutoInit">
            <summary>
            是否自动初始化
            </summary>
        </member>
        <member name="M:RW.IInit.Init">
            <summary>
            初始化方法
            </summary>
        </member>
        <member name="P:RW.IInit.IsInitialized">
            <summary>
            是否已经初始化
            </summary>
        </member>
        <member name="T:RW.ExceptionEventArgs">
            <summary>
            异常事件的参数
            </summary>
        </member>
        <member name="T:RW.INumerical">
            <summary>
            用于描述带单位的数字
            </summary>
        </member>
        <member name="P:RW.INumerical.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:RW.INumerical.Unit">
            <summary>
            单位
            </summary>
        </member>
        <member name="P:RW.INumerical.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:RW.INumerical.DecimalNumber">
            <summary>
            小数位
            </summary>
        </member>
        <member name="P:RW.INumerical.FormatString">
            <summary>
            格式化字符
            </summary>
        </member>
        <member name="T:RW.IO.Compression.Zipped">
            <summary>
            一个负责压缩解压数据字节的类
            </summary>
        </member>
        <member name="M:RW.IO.Compression.Zipped.CompressBytes(System.Byte[])">
            <summary>
            压缩字节数据
            </summary>
            <param name="bytes">等待被压缩的数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>压缩之后的字节数据</returns>
        </member>
        <member name="M:RW.IO.Compression.Zipped.Decompress(System.Byte[])">
            <summary>
            解压压缩后的数据
            </summary>
            <param name="bytes">压缩后的数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>压缩前的原始字节数据</returns>
        </member>
        <member name="T:RW.IO.CSVFile">
            <summary>
            用于读写操作.CSV文件
            默认情况下，使用','进行分隔。
            请注意及时关闭流
            </summary>
        </member>
        <member name="M:RW.IO.CSVFile.#ctor">
            <summary>
            使用UTF-8编码读取文件，分隔符默认采用‘,’号
            </summary>
        </member>
        <member name="M:RW.IO.CSVFile.#ctor(System.String)">
            <summary>
            指定文件名， 使用UTF-8编码读取文件，分隔符默认采用‘,’号
            </summary>
        </member>
        <member name="P:RW.IO.CSVFile.Stream">
            <summary>
            获取相关的文件流
            </summary>
        </member>
        <member name="P:RW.IO.CSVFile.SplitChar">
            <summary>
            分割字符，默认使用‘,’逗号进行分割。
            </summary>
        </member>
        <member name="P:RW.IO.CSVFile.NewLine">
            <summary>
            获取或设置一个换行符的表示方式，通常为\r\n。
            </summary>
        </member>
        <member name="P:RW.IO.CSVFile.Encoding">
            <summary>
            编码方式，默认使用UTF-8进行编码
            </summary>
        </member>
        <member name="P:RW.IO.CSVFile.Filename">
            <summary>
            指定的文件名
            </summary>
        </member>
        <member name="M:RW.IO.CSVFile.WriteFile(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            本类中使用的写入文件的方法（线程安全的办法）自动创建路径，请注意，此方法会自动换行
            </summary>
        </member>
        <member name="M:RW.IO.CSVFile.Write``1(System.Collections.Generic.List{``0})">
            <summary>
            写入泛型类T，标题和内容
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lst"></param>
        </member>
        <member name="M:RW.IO.CSVFile.InitTitle``1">
            <summary>
            通过指定的类型初始化表头
            </summary>
        </member>
        <member name="M:RW.IO.CSVFile.AppendData``1(``0[])">
            <summary>
            通过指定的类型，添加数据（集合）到数据集中。
            </summary>
        </member>
        <member name="M:RW.IO.CSVFile.ModelToArray``2(``0)">
            <summary>
            将模块转换成一个数组，并返回指定的泛型类型的数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.IO.CSVFile.WriteData(System.Data.DataTable,System.Boolean)">
            <summary>
            支持使用DataTable的方式写值（含表头）
            </summary>
        </member>
        <member name="M:RW.IO.CSVFile.AppendData(System.Data.DataTable)">
            <summary>
            追加到文件中，自动添加表头
            </summary>
        </member>
        <member name="M:RW.IO.CSVFile.ReadData(System.Boolean)">
            <summary>
            读取数据到DataTable中，含表头
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.IO.CSVFile.AppendRow(System.String[])">
            <summary>
            写入字符串数据组的方式追加数据到存储中
            </summary>
        </member>
        <member name="M:RW.IO.CSVFile.Dispose">
            <summary>
            释放资源，防止文件锁定
            </summary>
        </member>
        <member name="M:RW.IO.CSVFile.CopyTo(System.String)">
            <summary>
            将此文件复制到另外一个文件中（不关闭流）
            </summary>
        </member>
        <member name="T:RW.IO.IniFile">
            <summary>
            用于读写ini文件的帮助类
            <para>定义：</para>
            <para>filename：文件名称</para>
            <para>Section：结点名称</para>
            <para>key：键名称</para>
            <para>Value：值</para>
            <para>[section]</para>
            <para>key1=value1</para>
            <para>key2=value2</para>
            <para>key3=value3</para>
            <para>key4=value4</para>
            </summary>
        </member>
        <member name="P:RW.IO.IniFile.Filename">
            <summary>
            文件名
            </summary>
        </member>
        <member name="M:RW.IO.IniFile.GetSections">
            <summary>
            获取所有的Section节点，返回字符串数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.IO.IniFile.GetSections(System.String)">
            <summary>
            获取所有的节点名称，也就是[]里面的内容，返回一个字符串数组
            </summary>
        </member>
        <member name="M:RW.IO.IniFile.GetKeys(System.String)">
            <summary>
            获取指定节点下的所有keys
            </summary>
        </member>
        <member name="M:RW.IO.IniFile.GetKeys(System.String,System.String)">
            <summary>
            获取文件名下的指定节点的所有keys
            </summary>
        </member>
        <member name="M:RW.IO.IniFile.RemoveKey(System.String,System.String)">
            <summary>
            移除一个Key
            </summary>
        </member>
        <member name="M:RW.IO.IniFile.Clear">
            <summary>
            清空配置文件
            </summary>
        </member>
        <member name="M:RW.IO.IniFile.RemoveSection(System.String)">
            <summary>
            删除节点
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:RW.IO.IniFile.RemoveSection(System.String,System.String)">
            <summary>
            删除指定文件的节点
            </summary>
        </member>
        <member name="T:RW.IO.OPCReader">
            <summary>
            读取OPC项目
            原理：类型.opc文件可通过access访问读取，读取表TagList即可读取到所有的[项目]
            然后可通过生成的项目生成class或者对应的opc操作
            开始时间:2016-07-05 10:00
            完成时间未定
            </summary>
            <author>yuanyong</author>
        </member>
        <member name="T:RW.ISwitch">
            <summary>
            提供一种开关的属性和事件的接口
            </summary>
        </member>
        <member name="P:RW.ISwitch.Switch">
            <summary>
            开关状态
            </summary>
        </member>
        <member name="E:RW.ISwitch.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.ISwitch.Switching">
            <summary>
            开关发生改变前触发的事件
            </summary>
        </member>
        <member name="T:RW.SwitchHandler">
            <summary>
            Switch状态发生改变的委托
            </summary>
        </member>
        <member name="T:RW.SwtichingHandler">
            <summary>
            Switch状态发生改变前的委托，支持取消
            </summary>
        </member>
        <member name="T:RW.ISwitchColor">
            <summary>
            提供一种带颜色开关的接口
            </summary>
        </member>
        <member name="P:RW.ISwitchColor.TrueColor">
            <summary>
            当Switch为True时的颜色
            </summary>
        </member>
        <member name="P:RW.ISwitchColor.FalseColor">
            <summary>
            当Switch为False时的颜色
            </summary>
        </member>
        <member name="T:RW.ISwitchImage">
            <summary>
            提供一种带图片切换开关的接口
            </summary>
        </member>
        <member name="P:RW.ISwitchImage.TrueImage">
            <summary>
            当Switch为True时的图片
            </summary>
        </member>
        <member name="P:RW.ISwitchImage.FalseImage">
            <summary>
            当Switch为False时的图片
            </summary>
        </member>
        <member name="T:RW.ITag">
            <summary>
            定义了某个类可支持标签的方式，通常是button、label之类实现
            之后可以与IDriver进行关联。如OPC点位
            </summary>
        </member>
        <member name="P:RW.ITag.InputDriverName">
            <summary>
            所使用的驱动名称
            </summary>
        </member>
        <member name="P:RW.ITag.InputTagName">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="T:RW.IOutputTag">
            <summary>
            带有可输出的标签
            </summary>
        </member>
        <member name="P:RW.IOutputTag.OutputDriverName">
            <summary>
            输出点位的驱动
            </summary>
        </member>
        <member name="P:RW.IOutputTag.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="T:RW.IOutputValue">
            <summary>
            用于值的写入点
            </summary>
        </member>
        <member name="E:RW.IOutputValue.ValueChanged">
            <summary>
            值改变事件
            </summary>
        </member>
        <member name="E:RW.IOutputValue.Submited">
            <summary>
            提交的事件
            </summary>
        </member>
        <member name="M:RW.IOutputValue.Submit">
            <summary>
            事件改编方法
            </summary>
        </member>
        <member name="T:RW.ITagSwitch">
            <summary>
            ISwitch开关与ITag标签，说明是DO或AO类型，支持控制
            </summary>
        </member>
        <member name="P:RW.ITagSwitch.WriteTimeout">
            <summary>
            写入超时时间（毫秒），等于0表示不超时,-1表示无限期；
            </summary>
        </member>
        <member name="T:RW.ITagValue">
            <summary>
            实现了ITag和IValue的接口
            </summary>
        </member>
        <member name="P:RW.ITagValue.SetLocal">
            <summary>
            AI、AO值是否由本地设置，默认为本地设置
            </summary>
        </member>
        <member name="T:RW.ITagValue`1">
            <summary>
            实现了ITag和IValue的接口，需指定T的类型
            </summary>
        </member>
        <member name="T:RW.IGetValue`1">
            <summary>
            定义了可获取值的接口，Value为只读
            </summary>
            <typeparam name="T">Value的类型</typeparam>
        </member>
        <member name="P:RW.IGetValue`1.Value">
            <summary>
            获取或设置值
            </summary>
        </member>
        <member name="T:RW.IGetValue">
            <summary>
            定义了可获取值的接口，Value为只读，使用double类型
            </summary>
        </member>
        <member name="T:RW.IValue`1">
            <summary>
            支持范型类的接口
            </summary>
            <typeparam name="T">范型，用于描述Value的类型，一般使用值类型</typeparam>
        </member>
        <member name="P:RW.IValue`1.Value">
            <summary>
            获取或设置值
            </summary>
        </member>
        <member name="T:RW.IValue">
            <summary>
            声明了支持Value字段的类的接口。 类型为double
            </summary>
        </member>
        <member name="T:RW.Log.BaseFileLog">
            <summary>
            基础文件日志的抽象类，主要提供了Filename字段
            </summary>
        </member>
        <member name="M:RW.Log.BaseFileLog.#ctor">
            <summary>
            默认初始化文件日志
            </summary>
        </member>
        <member name="M:RW.Log.BaseFileLog.#ctor(System.String)">
            <summary>
            初始化 BaseFileLog 并指定文件路径。
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:RW.Log.BaseFileLog.#ctor(System.IO.FileStream)">
            <summary>
            使用指定的文件流初始化文件日志
            </summary>
        </member>
        <member name="P:RW.Log.BaseFileLog.Stream">
            <summary>
            获取文件流，如果已经指定了，则直接获取，否则会通过Filename打开指定的文件流。
            </summary>
        </member>
        <member name="P:RW.Log.BaseFileLog.Filename">
            <summary>
            指定的文件名，请注意，如果指定了Stream，再指定Filename将无效，系统优先使用Stream对象；
            </summary>
        </member>
        <member name="M:RW.Log.BaseFileLog.Append(System.String)">
            <summary>
            添加一条文件日志
            </summary>
        </member>
        <member name="M:RW.Log.BaseFileLog.AppendAll(System.String[])">
            <summary>
            添加多条文件日志
            </summary>
        </member>
        <member name="M:RW.Log.BaseFileLog.Close">
            <summary>
            关闭文件流
            </summary>
        </member>
        <member name="M:RW.Log.BaseFileLog.GetFormattedText(System.String)">
            <summary>
            获取格式化后的字符串
            </summary>
        </member>
        <member name="T:RW.Log.CSVLog">
            <summary>
            用于使用CSV记录日志的辅助类
            </summary>
        </member>
        <member name="M:RW.Log.CSVLog.#ctor">
            <summary>
            初始化CSV日志文件，日志路径默认为 "工作目录\logs\log.csv"
            </summary>
        </member>
        <member name="M:RW.Log.CSVLog.#ctor(System.String)">
            <summary>
            初始化CSV日志文件，并指定文件路径
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:RW.Log.CSVLog.GetFormattedText(System.String)">
            <summary>
            获取格式化的字符串
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Log.CSVLog.AppendAll(System.String[])">
            <summary>
            添加全部日志
            </summary>
        </member>
        <member name="M:RW.Log.CSVLog.Close">
            <summary>
            关闭写日志文件
            </summary>
        </member>
        <member name="T:RW.Log.DebugLog">
            <summary>
            调试用的日志记录方式
            </summary>
        </member>
        <member name="M:RW.Log.DebugLog.#ctor">
            <summary>
            调试用日志
            </summary>
        </member>
        <member name="F:RW.Log.DebugLog.Instance">
            <summary>
            单例模型
            </summary>
        </member>
        <member name="M:RW.Log.DebugLog.Append(System.String)">
            <summary>
            显示一个调试日志
            </summary>
        </member>
        <member name="M:RW.Log.DebugLog.AppendAll(System.String[])">
            <summary>
            多行的方式显示调试日志
            </summary>
        </member>
        <member name="M:RW.Log.DebugLog.SaveAll(System.String)">
            <summary>
            将所有的日志保存并清空日志信息
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:RW.Log.FileLog">
            <summary>
            一种线程安全的记录文件日志的方法，当文件大于1Mb时，自动创建新的文件
            </summary>
        </member>
        <member name="M:RW.Log.FileLog.#ctor">
            <summary>
            文件日志，文件名为（当前目录+\\logs\\logs.txt）
            </summary>
        </member>
        <member name="M:RW.Log.FileLog.#ctor(System.String)">
            <summary>
            指定文件创建日志文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:RW.Log.FileLog.AppendAll(System.String[])">
            <summary>
            线程安全的方式添加所有的日志
            </summary>
        </member>
        <member name="T:RW.Log.ILog">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:RW.Log.ILog.Append(System.String)">
            <summary>
            写入日志
            </summary>
        </member>
        <member name="M:RW.Log.ILog.AppendAll(System.String[])">
            <summary>
            批量写入日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:RW.Log.LogHelper">
            <summary>
            日志工厂，提供日志记录功能
            </summary>
        </member>
        <member name="M:RW.Log.LogHelper.Append(System.String)">
            <summary>
            通过指定的日志记录器，记录日志。默认使用FileLog
            </summary>
        </member>
        <member name="M:RW.Log.LogHelper.WriteLine(System.String[])">
            <summary>
            通过指定的日志记录器，记录日志。默认使用FileLog
            </summary>
        </member>
        <member name="M:RW.Log.LogHelper.Error(System.String,System.Exception)">
            <summary>
            记录一条错误日志信息
            </summary>
        </member>
        <member name="M:RW.Log.LogHelper.Append(System.String[])">
            <summary>
            批量添加日志，如果是文件只会打开一次
            </summary>
            <param name="msgs"></param>
        </member>
        <member name="M:RW.Log.LogHelper.ChangeLogType(RW.Log.ILog)">
            <summary>
            可以通过实现ILog来更改记录Log的类
            </summary>
            <param name="newlog"></param>
        </member>
        <member name="M:RW.Log.LogHelper.AddLog(RW.Log.ILog)">
            <summary>
            可以增加记录日志的方式
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:RW.EventLog.EventLog">
            <summary>
            事件日志的实体
            </summary>
        </member>
        <member name="M:RW.EventLog.EventLog.#ctor">
            <summary>
            构造事件日志的对象,采用了5W1H的方法
            </summary>
        </member>
        <member name="F:RW.EventLog.EventLog.Empty">
            <summary>
            表示空事件
            </summary>
        </member>
        <member name="P:RW.EventLog.EventLog.Message">
            <summary>
            事件的消息内容 What
            </summary>
        </member>
        <member name="P:RW.EventLog.EventLog.Content">
            <summary>
            事件的详细信息 How
            </summary>
        </member>
        <member name="P:RW.EventLog.EventLog.Module">
            <summary>
            事件发生的地点 Where
            </summary>
        </member>
        <member name="P:RW.EventLog.EventLog.ErrorLogType">
            <summary>
            事件的类型 Why
            </summary>
        </member>
        <member name="P:RW.EventLog.EventLog.Username">
            <summary>
            谁发生的事件 Who
            </summary>
        </member>
        <member name="P:RW.EventLog.EventLog.EventDateTime">
            <summary>
            发生的事件 When
            </summary>
        </member>
        <member name="M:RW.EventLog.EventLog.ToString">
            <summary>
            格式化成通俗易懂的表达式
            </summary>
        </member>
        <member name="T:RW.EventLog.EventLogConfig">
            <summary>
            事件日志用的配置文件
            </summary>
        </member>
        <member name="M:RW.EventLog.EventLogConfig.#ctor">
            <summary>
            初始化自动构造对象
            </summary>
        </member>
        <member name="P:RW.EventLog.EventLogConfig.ThrowException">
            <summary>
            是否抛异常
            </summary>
        </member>
        <member name="P:RW.EventLog.EventLogConfig.AsyncLog">
            <summary>
            是否异步记录日志
            </summary>
        </member>
        <member name="T:RW.EventLog.EventLogHelper">
            <summary>
            事件日志记录帮助类
            </summary>
        </member>
        <member name="F:RW.EventLog.EventLogHelper.Config">
            <summary>
            事件日志的配置信息
            </summary>
        </member>
        <member name="M:RW.EventLog.EventLogHelper.Log(System.String,System.Exception)">
            <summary>
            记录一个异常信息，同时给定异常的标题信息，日志以 “A:B”的方式写入。
            </summary>
            <param name="title"></param>
            <param name="ex"></param>
        </member>
        <member name="M:RW.EventLog.EventLogHelper.Log(System.Exception)">
            <summary>
            记录一个异常信息
            </summary>
        </member>
        <member name="M:RW.EventLog.EventLogHelper.Log(System.String)">
            <summary>
            记录一个日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RW.EventLog.EventLogHelper.Log(RW.EventLog.EventLogType,System.String)">
            <summary>
            根据事件类型记录一条日志
            </summary>
        </member>
        <member name="M:RW.EventLog.EventLogHelper.Log(RW.EventLog.EventLogType,System.String,System.String)">
            <summary>
            根据记录人、类型、消息记录日志
            </summary>
        </member>
        <member name="T:RW.EventLog.EventLogHelper.LogDelegate">
            <summary>
            记录日志委托
            </summary>
        </member>
        <member name="E:RW.EventLog.EventLogHelper.Logged">
            <summary>
            记录日志的事件
            </summary>
        </member>
        <member name="M:RW.EventLog.EventLogHelper.OnLogged(RW.EventLog.EventLog)">
            <summary>
            触发日志记录事件
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:RW.EventLog.EventLogHelper.Log(RW.EventLog.EventLog)">
            <summary>
            记录日志
            </summary>
        </member>
        <member name="M:RW.EventLog.EventLogHelper.Clear">
            <summary>
            清空所有的事件日志
            </summary>
        </member>
        <member name="M:RW.EventLog.EventLogHelper.GetAll">
            <summary>
            获取所有的事件日志,按倒序排列
            </summary>
        </member>
        <member name="T:RW.EventLog.EventLogType">
            <summary>
            错误日志类型
            </summary>
        </member>
        <member name="F:RW.EventLog.EventLogType.Normal">
            <summary>
            普通日志
            </summary>
        </member>
        <member name="F:RW.EventLog.EventLogType.Warning">
            <summary>
            警告日志
            </summary>
        </member>
        <member name="F:RW.EventLog.EventLogType.Error">
            <summary>
            错误日志
            </summary>
        </member>
        <member name="T:RW.EventLog.FileEventLog">
            <summary>
            文件事件日志
            </summary>
        </member>
        <member name="F:RW.EventLog.FileEventLog.Filename">
            <summary>
            文件日志的文件名
            </summary>
        </member>
        <member name="M:RW.EventLog.FileEventLog.ClearAll">
            <summary>
            清空所有的日志（自动备份）
            </summary>
        </member>
        <member name="M:RW.EventLog.FileEventLog.Backup(System.String)">
            <summary>
            备份文件
            </summary>
        </member>
        <member name="T:RW.EventLog.IEventLog">
            <summary>
            错误日志记录接口
            </summary>
        </member>
        <member name="M:RW.EventLog.IEventLog.Write(RW.EventLog.EventLog)">
            <summary>
            写入一个日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:RW.EventLog.IEventLog.WriteRange(System.Collections.Generic.IEnumerable{RW.EventLog.EventLog})">
            <summary>
            批量写入数组
            </summary>
            <param name="logs"></param>
        </member>
        <member name="M:RW.EventLog.IEventLog.ClearAll">
            <summary>
            清空所有的日志
            </summary>
        </member>
        <member name="M:RW.EventLog.IEventLog.RemoveAt(System.Int32)">
            <summary>
            移除一个索引的日志
            </summary>
        </member>
        <member name="M:RW.EventLog.IEventLog.Remove(RW.EventLog.EventLog)">
            <summary>
            移除一个事件日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:RW.EventLog.IEventLog.GetAll">
            <summary>
            获取所有的事件日志
            </summary>
            <returns></returns>
        </member>
        <member name="P:RW.Modules.BaseAnalogGroup.ValueStart">
            <summary>
            值的起始地址
            </summary>
        </member>
        <member name="P:RW.Modules.BaseAnalogGroup.ZeroStart">
            <summary>
            零点的起始地址
            </summary>
        </member>
        <member name="P:RW.Modules.BaseAnalogGroup.GainStart">
            <summary>
            增益的起始地址
            </summary>
        </member>
        <member name="P:RW.Modules.BaseInput`1.DataLength">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="T:RW.Modules.BaseModule">
            <summary>
            基础模块抽象组件，与IDriver进行组合。
            如：OPCDriver，与BaseModule组合。
            Modbus与ModuleModule组合。
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.#ctor">
            <summary>
            默认构造BaseModule的实例
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.#ctor(System.ComponentModel.IContainer)">
            <summary>
            指定container构造BaseModule的实例
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.InitComponts">
            <summary>
            构造初始化组件，无论怎么创建构造函数，此方法都会被调用
            </summary>
        </member>
        <member name="P:RW.Modules.BaseModule.Driver">
            <summary>
            表明需要使用的驱动对象
            </summary>
        </member>
        <member name="F:RW.Modules.BaseModule.UnknownTypeTip">
            <summary>
            当调用Register时会自动将点位进行分组，当使用object类型时，会提示“未知类型”
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Finalize">
            <summary>
            析构函数，取消订阅事件等释放内存的操作
            </summary>
        </member>
        <member name="P:RW.Modules.BaseModule.ModuleName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:RW.Modules.BaseModule.AutoInit">
            <summary>
            是否自动初始化OPC，还是手动初始化,默认false
            </summary>
        </member>
        <member name="P:RW.Modules.BaseModule.IsInitialized">
            <summary>
            是否已经调用了初始化
            </summary>
        </member>
        <member name="P:RW.Modules.BaseModule.Enabled">
            <summary>
            使用KepServer时，可调用内部状态字段xxx._System._Enabled
            </summary>
        </member>
        <member name="F:RW.Modules.BaseModule.OPCRead">
            <summary>
            如果是OPC驱动，当调用Init方法时，需不需要触发Read事件，支持同步和异步读取。
            </summary>
        </member>
        <member name="F:RW.Modules.BaseModule.OPCSync">
            <summary>
            如果OPCRead已打开，采用同步读取或是异步读取。
            </summary>
        </member>
        <member name="F:RW.Modules.BaseModule.Hardwares">
            <summary>
            硬件模块
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.SetHardware(System.String,RW.Modules.HardwareConfig)">
            <summary>
            设置硬件校准模块
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.RemoveHardware(System.String)">
            <summary>
            移除硬件校准模块
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:RW.Modules.BaseModule.SetHardwares(System.Collections.Generic.Dictionary{System.String,RW.Modules.HardwareConfig})">
            <summary>
            批量设置硬件校准模块
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.GetHardware(System.String)">
            <summary>
            获取硬件校准模块
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Modules.BaseModule.GetHardwares">
            <summary>
            获取所有的硬件校准模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.Modules.BaseModule.Init">
            <summary>
            初始化模块对象，会基于调用的 AddListening 方法初始化所有点位。
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.BaseValueChange(System.String,System.Object,System.Delegate)">
            <summary>
            触发值改变行为
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.BaseValueChange(System.String,System.Object)">
            <summary>
            触发值改变行为
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.BaseValueChange(RW.Driver.IDriver,System.String,System.Object,System.Delegate)">
            <summary>
            触发值改变行为（核心方法）
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.BaseValueChange(RW.Driver.IDriver,System.String,System.Object)">
            <summary>
            触发值改变行为
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.AddListening``1(System.String)">
            <summary>
            添加一个监听值
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.AddListening``1(System.String,System.Action{``0})">
            <summary>
            添加一个监听值，并指定回调函数
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.AddListening``1(RW.Driver.IDriver,System.String,System.Action{``0})">
            <summary>
            监听注册一个值，当值发生改变时，将触发回调
            </summary>
            <typeparam name="TT">该类型必须为基类型，如int,uint,short,ushort,byte,sbyte,float,double等 支持数组</typeparam>
            <param name="driver"> 指定所使用的驱动，如OPCDriver，ModbusDriver等</param>
            <param name="key">对应的OPC点位名，请注意Driver可能使用了前缀</param>
            <param name="callback">需要委托的方法，一般为赋值操作或事件触发</param>
        </member>
        <member name="M:RW.Modules.BaseModule.RemoveListening(RW.Driver.IDriver,System.String)">
            <summary>
            移除指定驱动的监听点
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.RemoveListening(System.String)">
            <summary>
            移除监听点
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Write(RW.Driver.IDriver,System.String,System.Object)">
            <summary>
            根据指定驱动，指定点位写入值
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Write(System.String,System.Object)">
            <summary>
            写入值
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Write(RW.Driver.IDriver,System.String,System.Object,System.String,System.Int32)">
            <summary>
            写入值
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Write(System.String,System.Object,System.String,System.Int32)">
            <summary>
            写入值
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Write(RW.Driver.IDriver,System.String,System.Object,System.String,System.Object,System.Int32)">
            <summary>
            写入值
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Write(System.String,System.Object,System.String,System.Object,System.Int32)">
            <summary>
            写入值
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Write(RW.Driver.IDriver,System.String,System.Object,RW.Modules.RightHandler,System.Int32)">
            <summary>
            写入值，核心。所有写入都将调用此方法
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Write(System.String,System.Object,RW.Modules.RightHandler,System.Int32)">
            <summary>
            写入值
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Read(RW.Driver.IDriver,System.String)">
            <summary>
            读取值
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Read(System.String)">
            <summary>
            读取值
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Read``1(RW.Driver.IDriver,System.String)">
            <summary>
            读取一个点，并转换为指定类型
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.Read``1(System.String)">
            <summary>
            读取一个点，并转换为指定类型
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.PluseWrite(System.String)">
            <summary>
            脉冲写
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.PluseWrite(RW.Driver.IDriver,System.String)">
            <summary>
            脉冲写
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.PluseWrite(System.String,System.Int32)">
            <summary>
            脉冲写
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.PluseWrite(RW.Driver.IDriver,System.String,System.Int32)">
            <summary>
            针对一个点位进行脉冲写，即先写false，再写true，再写false的一种脉冲行为 ，主要为了触发上升沿动作
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.PluseWrite(System.String,System.Object,System.Object)">
            <summary>
            脉冲写
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.PluseWrite(RW.Driver.IDriver,System.String,System.Int32,System.Object,System.Object)">
            <summary>
            针对一个点位进行脉冲写，即先写false，再写true，再写false的一种脉冲行为 ，主要为了触发上升沿动作
            通常以50-100ms的频率写下位机，以保证下位机能收到数据。
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.WaitSetting(RW.Modules.RightHandler,System.Int32)">
            <summary>
            检测某个开关是否打开，并设置其超时时间
            </summary>
            <param name="trueHandler">待检测的条件，返回bool</param>
            <param name="timeout">超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="E:RW.Modules.BaseModule.KeyValueChanged">
            <summary>
            值改变事件
            </summary>
        </member>
        <member name="F:RW.Modules.BaseModule.Values">
            <summary>
            获取当前模块下的所有键值对。
            </summary>
        </member>
        <member name="M:RW.Modules.BaseModule.OnKeyValueChanged(System.String,System.Object)">
            <summary>
            触发值改变的事件
            </summary>
        </member>
        <member name="T:RW.Modules.BaseSensor">
            <summary>
            传感器
            使用时，请先设置Readkey，便可获取Value和ValueChanged事件。
            如有需要，可设置零点值（ZeroValue）和增益值(GainValue)
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensor.Text">
            <summary>
            传感器名称
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensor.Index">
            <summary>
            表示当前的索引号，通常为0
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensor.GainKey">
            <summary>
            增益值
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensor.ZeroKey">
            <summary>
            零点值
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensor.Value">
            <summary>
            当前实际值
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensor.RawValue">
            <summary>
            当前原始值
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensor.GainValue">
            <summary>
            增益值，实测值=传感器值*增益值-零点值
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensor.ZeroValue">
            <summary>
            零点值,实测值=传感器值*增益值-零点值
            </summary>
        </member>
        <member name="T:RW.Modules.BaseSensorArray">
            <summary>
            主要针对的是OPC中数组对象
            如温度传感器定义的OPC点位为Values[6] 可使用此类
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensorArray.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="M:RW.Modules.BaseSensorArray.Get(System.Int32)">
            <summary>
            获取
            </summary>
        </member>
        <member name="T:RW.Modules.BaseSensorGroup">
            <summary>
            用于将多个同类型的点进行合并
            如温度传感器定义的OPC点位为V1,V2,V3,V4,V5,V6 可使用此类
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensorGroup.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensorGroup.Item(System.Int32)">
            <summary>
            使用索引器获取指定索引的值
            </summary>
        </member>
        <member name="P:RW.Modules.BaseSensorGroup.MappedHardware">
            <summary>
            映射的索引，与Hardwares的index对应。
            </summary>
        </member>
        <member name="M:RW.Modules.BaseSensorGroup.GetGainValue(System.Int32)">
            <summary>
            获取指定通道的增益值
            </summary>
            <param name="index">通道索引号</param>
            <returns></returns>
        </member>
        <member name="M:RW.Modules.BaseSensorGroup.GetZeroValue(System.Int32)">
            <summary>
            获取指定通道的零点值
            </summary>
            <param name="index">通道索引号</param>
            <returns></returns>
        </member>
        <member name="M:RW.Modules.BaseSensorGroup.GetValue(System.Int32)">
            <summary>
            获取指定通道的值
            </summary>
            <param name="index">通道索引号</param>
            <returns></returns>
        </member>
        <member name="T:RW.Modules.BaseTestBed">
            <summary>
            试验台基类，包含急停
            </summary>
        </member>
        <member name="E:RW.Modules.BaseTestBed.ScramChanged">
            <summary>
            急停状态发生改变时触发该事件
            </summary>
        </member>
        <member name="M:RW.Modules.CalcHelper.FullModules">
            <summary>
            返回所有的模块列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:RW.Modules.ValueHandler`1">
            <summary>
            值改变委托，泛型
            </summary>
        </member>
        <member name="T:RW.Modules.ValueHandler">
            <summary>
            值改变事件，double
            </summary>
        </member>
        <member name="T:RW.Modules.ValueGroupHandler`1">
            <summary>
            值组改变委托，泛型
            </summary>
        </member>
        <member name="T:RW.Modules.ValueGroupHandler">
            <summary>
            值组改变委托，double
            </summary>
        </member>
        <member name="T:RW.Modules.ValueListHandler`1">
            <summary>
            值集合改变委托，泛型
            </summary>
        </member>
        <member name="T:RW.Modules.ValueListHandler">
            <summary>
            值集合改变事件，double
            </summary>
        </member>
        <member name="T:RW.Modules.CollectHandler">
            <summary>
            采集委托
            </summary>
        </member>
        <member name="T:RW.Modules.KeyValueHandler`1">
            <summary>
            键值改变委托，泛型
            </summary>
        </member>
        <member name="T:RW.Modules.DigitalValueHandler">
            <summary>
            数字量值改变委托
            </summary>
        </member>
        <member name="T:RW.Modules.DigitalGroupValueHandler">
            <summary>
            数字量组值改变委托
            </summary>
        </member>
        <member name="T:RW.Modules.AnalogValueHandler">
            <summary>
            模拟量值改变委托
            </summary>
        </member>
        <member name="T:RW.Modules.RightHandler">
            <summary>
            等待返回true委托
            </summary>
        </member>
        <member name="T:RW.Modules.Exceptions.ModuleKeyInitException">
            <summary>
            模块中的点位初始化异常
            </summary>
        </member>
        <member name="T:RW.Modules.Extender.ModuleExtender">
            <summary>
            一种可以将BaseModule组件与用户控件自动关联的辅助程序。
            用户控件必须实现了IValue、ITag或者ISwitch、ITag接口；
            操作步骤：
            1、将RW库添加到工具箱中，此时应该出现ModuleExtender组件。
            2、将BaseModuleExtender拖到界面中。此时实现了接口的控件在杂项中应该包含ModuleName的属性。
            3、根据ini文件和测控点表，设置ModuleName以及InputTagName；
            4、在窗体代码中，调用ModuleExtender实例的AddModules方法和Init方法，表示初始化模块以及点位。
            5、完成，生成代码；
            6、测试，修改关联指定的点位，UI上会自动刷新。
            create by yuanyong 2020-06-16
            调整了ModuleExtender，抽象级别更高
            modify by yuanyong 2020-07-31
            </summary>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.#ctor">
            <summary>
            初始化构造
            </summary>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.#ctor(System.ComponentModel.IContainer)">
            <summary>
            使用指定容器构造对象
            </summary>
            <param name="cont"></param>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.GetModuleName(System.Windows.Forms.Control)">
            <summary>
            获取控件关联的模块名称
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.SetModuleName(System.Windows.Forms.Control,System.String)">
            <summary>
            设置关联控件和使用的模块
            </summary>
        </member>
        <member name="F:RW.Modules.Extender.ModuleExtender.dicModules">
            <summary>
            当前所有的模块
            </summary>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.AddCommonModules(System.Collections.Generic.Dictionary{System.String,RW.Modules.BaseModule})">
            <summary>
            添加通用模块
            </summary>
            <param name="modules"></param>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.InitCommonModules">
            <summary>
            初始化通用模块
            </summary>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.AddModules(System.Collections.Generic.Dictionary{System.String,RW.Modules.BaseModule})">
            <summary>
            批量添加模块到系统中
            </summary>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.AddModules``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            批量添加模块到系统中
            </summary>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.GetModules">
            <summary>
            获取所有的模块
            </summary>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.AddModule(System.String,RW.Modules.BaseModule)">
            <summary>
            添加模块到系统中
            </summary> 
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.GetModuleOrDefault(System.String)">
            <summary>
            获取指定的模块，如果没有则返回第一个作为默认模块。
            </summary>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.CanExtend(System.Object)">
            <summary>
            验证控件是否支持次组件。
            </summary>
        </member>
        <member name="P:RW.Modules.Extender.ModuleExtender.AutoInit">
            <summary>
            是否自动初始化；如果为true，则会在EndInit时，自动调用初始化；
            </summary>
        </member>
        <member name="P:RW.Modules.Extender.ModuleExtender.IgnoreError">
            <summary>
            初始化时，可能会产生错误，是否忽略掉这些错误，使其可以继续初始化。
            </summary>
        </member>
        <member name="F:RW.Modules.Extender.ModuleExtender.hasErrror">
            <summary>
            是否有错误
            </summary>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.InitModules">
            <summary>
            如果模块未初始化，自动初始化所有模块
            </summary>
        </member>
        <member name="P:RW.Modules.Extender.ModuleExtender.ModulePrefix">
            <summary>
            当模块名称可能重名时，可通过设置不同的ModulePrefix来区分不同的模块
            </summary>
        </member>
        <member name="M:RW.Modules.Extender.ModuleExtender.Init">
            <summary>
            初始化组件和关联的控件；
            </summary>
        </member>
        <member name="T:RW.Modules.Hardware">
            <summary>
            用于描述支持零点增益的硬件模块，实际值=工程值*增益值-零点值
            </summary>
        </member>
        <member name="P:RW.Modules.Hardware.Index">
            <summary>
            表示索引号
            </summary>
        </member>
        <member name="P:RW.Modules.Hardware.DecimalNumber">
            <summary>
            对实际值保留的小数位，默认4位小数
            </summary>
        </member>
        <member name="P:RW.Modules.Hardware.Abs">
            <summary>
            是否转成绝对值
            </summary>
        </member>
        <member name="P:RW.Modules.Hardware.RawValue">
            <summary>
            原始值
            </summary>
        </member>
        <member name="P:RW.Modules.Hardware.Value">
            <summary>
            实际值
            </summary>
        </member>
        <member name="P:RW.Modules.Hardware.SetLocal">
            <summary>
            由本地计算实际值还是由设备本身计算后返回
            </summary>
        </member>
        <member name="P:RW.Modules.Hardware.GainValue">
            <summary>
            增益值
            </summary>
        </member>
        <member name="P:RW.Modules.Hardware.ZeroValue">
            <summary>
            零点值
            </summary>
        </member>
        <member name="P:RW.Modules.Hardware.Radix">
            <summary>
            小数点位数，默认为0,主要对原始值进行线性缩放
            </summary>
        </member>
        <member name="M:RW.Modules.Hardware.ToString">
            <summary>
            自定义格式化字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:RW.Modules.HardwareConfig">
            <summary>
            用于硬件校准模块，可以替换之前使用iniconfig的功能
            <para>sample:</para>
            <para>[硬件名称]</para>
            <para>Gain=1.0</para>
            <para>Zero=0</para>
            <para>Text=显示名称</para>
            <para>Index=0</para>
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareConfig.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareConfig.#ctor(System.String,RW.Modules.Hardware)">
            <summary>
            使用名称初始化构造HardwareConfig 对象。
            </summary>
            <param name="name">模块名称</param>
            <param name="hard">关联的硬件</param>
        </member>
        <member name="M:RW.Modules.HardwareConfig.#ctor(System.String,System.String)">
            <summary>
            使用指定的名称初始化构造HardwareConfig对象，并保存至path。
            </summary>
            <param name="name"></param>
            <param name="path"></param>
        </member>
        <member name="P:RW.Modules.HardwareConfig.Filename">
            <summary>
            文件名，不会写入到ini文件中
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareConfig.Init">
            <summary>
            初始化对象
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareConfig.GetSections">
            <summary>
            获取所有的节点
            </summary>
            <returns></returns>
        </member>
        <member name="P:RW.Modules.HardwareConfig.Text">
            <summary>
            表示当前的文字，与Control.Text无缝对接
            </summary>
        </member>
        <member name="P:RW.Modules.HardwareConfig.Name">
            <summary>
            用于存储配置的唯一标识，加载和保存时必须指定
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareConfig.Load">
            <summary>
            加载配置文件读取到属性中
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareConfig.LoadData(RW.IO.IniFile)">
            <summary>
            加载其他数据
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareConfig.Save">
            <summary>
            保存硬件配置信息到指定的文件。默认为：config\calibration.ini
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareConfig.SaveData(RW.IO.IniFile)">
            <summary>
            保存其他数据
            </summary>
        </member>
        <member name="T:RW.Modules.HardwareFactory">
            <summary>
            硬件校准工厂
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareFactory.GetHardware(System.String)">
            <summary>
            创建和获取一个硬件校准模块
            </summary>
        </member>
        <member name="T:RW.Modules.HardwareList">
            <summary>
            主要针对数据对象创建如果包含类似400001[6]或VD100[6]的情况时，可以使用该类
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareList.GetValue(System.Int32)">
            <summary>
            获取指定索引的值
            </summary>
        </member>
        <member name="M:RW.Modules.HardwareList.SetValue(System.Int32,System.Double)">
            <summary>
            设置指定索引的值
            </summary>
        </member>
        <member name="T:RW.Modules.IGain">
            <summary>
            增益接口
            </summary>
        </member>
        <member name="T:RW.Modules.IHardware">
            <summary>
            用于描述硬件值的统一接口，包含值和事件。
            </summary>
        </member>
        <member name="P:RW.Modules.IHardware.Value">
            <summary>
            用于描述值
            </summary>
        </member>
        <member name="P:RW.Modules.IHardware.RawValue">
            <summary>
            工程值，原始的名称为BaseValue/ValueBase
            </summary>
        </member>
        <member name="P:RW.Modules.IHardware.GainValue">
            <summary>
            用于描述增益值
            </summary>
        </member>
        <member name="P:RW.Modules.IHardware.ZeroValue">
            <summary>
            用于描述零点值
            </summary>
        </member>
        <member name="E:RW.Modules.IHardware.ValueChanged">
            <summary>
            当实际值发生改变时会触发此事件
            </summary>
        </member>
        <member name="E:RW.Modules.IHardware.GainValueChanged">
            <summary>
            定义了当增益值发生改变时会触发的事件
            </summary>
        </member>
        <member name="E:RW.Modules.IHardware.ZeroValueChanged">
            <summary>
            定义了当零点值发生改变时会触发的事件
            </summary>
        </member>
        <member name="T:RW.Modules.IHardwareConfig">
            <summary>
            采用Config+Hardware联合的新硬件存储方式
            </summary>
        </member>
        <member name="P:RW.Modules.IHardwareConfig.Config">
            <summary>
            相关的配置
            </summary>
        </member>
        <member name="P:RW.Modules.IHardwareConfig.Text">
            <summary>
            通道的标签文字（可以与Control.Text无缝结合）
            </summary>
        </member>
        <member name="P:RW.Modules.IHardwareConfig.Index">
            <summary>
            表示该通道号的索引，当多通道时可以使用
            </summary>
        </member>
        <member name="M:RW.Modules.IHardwareConfig.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:RW.Modules.IHardwareConfig.Load">
            <summary>
            加载
            </summary>
        </member>
        <member name="T:RW.Modules.IHardwareView">
            <summary>
            基于IHardware的视图
            </summary>
        </member>
        <member name="P:RW.Modules.IHardwareView.InputGainTagName">
            <summary>
            增益关联的点位名称
            </summary>
        </member>
        <member name="P:RW.Modules.IHardwareView.InputZeroTagName">
            <summary>
            零点关联的点位名称
            </summary>
        </member>
        <member name="E:RW.Modules.IHardwareView.Submited">
            <summary>
            当页面提交时触发的事件
            </summary>
        </member>
        <member name="P:RW.Modules.IHardwareView.Value">
            <summary>
            显示的值，可以设置
            </summary>
        </member>
        <member name="T:RW.Modules.IHardwareArray">
            <summary>
            用于描述硬件的统一接口，包含值和事件。
            </summary>
        </member>
        <member name="T:RW.Modules.IHardwareGroup">
            <summary>
            用于描述硬件的统一接口，包含值和事件。
            </summary>
        </member>
        <member name="T:RW.Modules.IAnalogGroup">
            <summary>
            描述所有模拟量并支持零点增益的事件
            </summary>
        </member>
        <member name="T:RW.Modules.IHardwareVibrationGroup">
            <summary>
            用于描述硬件的统一接口，包含值和事件。
            </summary>
        </member>
        <member name="T:RW.Modules.IKepModule">
            <summary>
            用于KepServer常用的配置
            </summary>
        </member>
        <member name="P:RW.Modules.IKepModule.Enabled">
            <summary>
            开启状态
            </summary>
        </member>
        <member name="P:RW.Modules.IKepModule.Simulated">
            <summary>
            是否开启了模拟器
            </summary>
        </member>
        <member name="P:RW.Modules.IKepModule.DeviceId">
            <summary>
            设备ID
            </summary>
        </member>
        <member name="P:RW.Modules.IKepModule.Error">
            <summary>
            是否有错误
            </summary>
        </member>
        <member name="M:RW.Modules.IKepModule.WriteSystem(System.String,System.Object)">
            <summary>
            写入系统变量（设备）
            </summary>
        </member>
        <member name="E:RW.Modules.IKepModule.EnabledChanged">
            <summary>
            开启状态发生变化时触发的事件
            </summary>
        </member>
        <member name="E:RW.Modules.IKepModule.SimulatedChanged">
            <summary>
            模拟状态发生变化时触发的事件
            </summary>
        </member>
        <member name="E:RW.Modules.IKepModule.ErrorChanged">
            <summary>
            错误状态发生变化时触发的事件
            </summary>
        </member>
        <member name="E:RW.Modules.IKepModule.DeviceIdChanged">
            <summary>
            设备ID发生变化时触发的事件
            </summary>
        </member>
        <member name="T:RW.Modules.IModule">
            <summary>
            定义了模块的接口，通常配合IDriver使用
            </summary>
        </member>
        <member name="P:RW.Modules.IModule.Driver">
            <summary>
            模块关联的默认驱动
            </summary>
        </member>
        <member name="M:RW.Modules.IModule.Read(RW.Driver.IDriver,System.String)">
            <summary>
            提供一种通过指定Driver读取值的方法
            </summary>
        </member>
        <member name="M:RW.Modules.IModule.Write(RW.Driver.IDriver,System.String,System.Object,RW.Modules.RightHandler,System.Int32)">
            <summary>
            提供了一种写入值的方法
            </summary>
        </member>
        <member name="M:RW.Modules.IModule.PluseWrite(RW.Driver.IDriver,System.String,System.Int32,System.Object,System.Object)">
            <summary>
            提供了一种脉冲写的方式
            </summary>
        </member>
        <member name="M:RW.Modules.IModule.AddListening``1(RW.Driver.IDriver,System.String,System.Action{``0})">
            <summary>
            监听一个值，当driver中的key发生改变时自动回调callback事件。
            </summary>
        </member>
        <member name="M:RW.Modules.IModule.RemoveListening(RW.Driver.IDriver,System.String)">
            <summary>
            取消监听某个值
            </summary>
        </member>
        <member name="E:RW.Modules.IModule.KeyValueChanged">
            <summary>
            当指定的Key发生改变时，触发的事件
            </summary>
        </member>
        <member name="T:RW.Modules.KepBaseModule">
            <summary>
            用于基于KepServer的OPC模块，支持了常用的KepServer指令，如启用状态、错误状态、模拟状态、设备ID
            </summary>
        </member>
        <member name="P:RW.Modules.KepBaseModule.DeviceName">
            <summary>
            设备名称，该属性必须设置通常为：Channel1.Device1
            </summary>
        </member>
        <member name="M:RW.Modules.KepBaseModule.Init">
            <summary>
            初始化OPC点位
            </summary>
        </member>
        <member name="P:RW.Modules.KepBaseModule.Enabled">
            <summary>
            是否启用，不启用的话，不会对device进行数据读写
            </summary>
        </member>
        <member name="P:RW.Modules.KepBaseModule.Error">
            <summary>
            是否有错误
            </summary>
        </member>
        <member name="P:RW.Modules.KepBaseModule.Simulated">
            <summary>
            是否打开了模拟器
            </summary>
        </member>
        <member name="P:RW.Modules.KepBaseModule.DeviceId">
            <summary>
            设备的ID是什么，根据驱动类型进行设备
            </summary>
        </member>
        <member name="M:RW.Modules.KepBaseModule.WriteSystem(System.String,System.Object)">
            <summary>
            写系统点位，需要些给定deviceName
            </summary>
            <param name="systemKey"></param>
            <param name="value"></param>
        </member>
        <member name="E:RW.Modules.KepBaseModule.EnabledChanged">
            <summary>
            开启状态发生变化时触发的事件
            </summary>
        </member>
        <member name="E:RW.Modules.KepBaseModule.SimulatedChanged">
            <summary>
            模拟状态发生变化时触发的事件
            </summary>
        </member>
        <member name="E:RW.Modules.KepBaseModule.ErrorChanged">
            <summary>
            错误状态发生变化时触发的事件
            </summary>
        </member>
        <member name="E:RW.Modules.KepBaseModule.DeviceIdChanged">
            <summary>
            设备ID发生变化时触发的事件
            </summary>
        </member>
        <member name="T:RW.Modules.MasterBaseModule">
            <summary>
            
            对于tagType的描述；
            0,1,2,3分别表示DI,DO,AI,AO
            4,5,6,7分别表示AIToDI,AOToDO,DIToAI,DOToAO
            
            </summary>
        </member>
        <member name="P:RW.Modules.MasterBaseModule.DriverName">
            <summary>
            所属的驱动名称
            </summary>
        </member>
        <member name="F:RW.Modules.ModuleGroup.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.Modules.ModuleGroup.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.Modules.ModuleGroup.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.Modules.Sensor">
            <summary>
            传感器
            使用时，请先设置Readkey，便可获取Value和ValueChanged事件。
            如有需要，可设置零点值（ZeroValue）和增益值(GainValue)
            </summary>
        </member>
        <member name="P:RW.Modules.VibrationHardware.Sensitivity">
            <summary>
            灵敏度
            </summary>
        </member>
        <member name="T:RW.Net.Http.DataServer">
            <summary>
            试验台数据服务层
            </summary>
        </member>
        <member name="T:RW.Net.Http.ServerHelper">
            <summary>
            创建服务接口
            </summary>
        </member>
        <member name="M:RW.Net.Http.ServerHelper.Startup(System.Int32)">
            <summary>
            开始服务并监听端口
            </summary>
        </member>
        <member name="M:RW.Net.Http.ServerHelper.AddPort(System.Int32)">
            <summary>
            添加指定的端口监听
            </summary>
        </member>
        <member name="T:RW.Net.WebAPI">
            <summary>
            针对RestFulAPI的请求模块
            </summary>
        </member>
        <member name="F:RW.Net.WebAPI.Instance">
            <summary>
            单例对象
            </summary>
        </member>
        <member name="M:RW.Net.WebAPI.Get(System.String,System.String)">
            <summary>
            使用GET方式请求WEBAPI，返回字符串结果
            </summary>
        </member>
        <member name="M:RW.Net.WebAPI.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            使用GET方式请求WEBAPI，返回字符串结果
            </summary>
        </member>
        <member name="M:RW.Net.WebAPI.Get``1(System.String,System.String)">
            <summary>
            使用GET方式请求WEBAPI，返回指定泛型结果
            </summary>
        </member>
        <member name="M:RW.Net.WebAPI.Post(System.String,System.String)">
            <summary>
            使用POST方式请求WEBAPI，返回字符串结果
            </summary>
        </member>
        <member name="M:RW.Net.WebAPI.Post``2(System.String,``0)">
            <summary>
            使用POST方式请求WEBAPI，上传指定类型的数据，并返回指定类型结果
            </summary>
        </member>
        <member name="M:RW.Net.WebAPI.Post``1(System.String,System.String)">
            <summary>
            使用POST方式请求WEBAPI，并返回指定类型结果
            </summary>
        </member>
        <member name="T:RW.Net.WebAPIConfig">
            <summary>
            WebAPIConfig的配置
            </summary>
        </member>
        <member name="T:RW.Procedure.BaseProcedure">
            <summary>
            所有处理过程的基类，通过调用Execute执行
            根据先后顺序触发，before，ing，end事件 修改与2016-10-19
            </summary>
        </member>
        <member name="E:RW.Procedure.BaseProcedure.BeforeExecute">
            <summary>
            试验开始前的事件，一般用于合分闸以及采集数据的准备工作
            </summary>
        </member>
        <member name="E:RW.Procedure.BaseProcedure.Executing">
            <summary>
            试验过程中的事件
            </summary>
        </member>
        <member name="E:RW.Procedure.BaseProcedure.EndExecuted">
            <summary>
            试验结束后的事件
            </summary>
        </member>
        <member name="E:RW.Procedure.BaseProcedure.NewTicked">
            <summary>
            当调用了OnTick方法时，会根据指定的时间触发此事件
            </summary>
        </member>
        <member name="M:RW.Procedure.BaseProcedure.OnTicked(System.Double,System.Int32,RW.Procedure.TimeSpanHandler)">
            <summary>
            按照一定间隔一段时间，并且每次间隔执行一个方法
            </summary>
            <param name="milliseconds">总时长（毫秒）</param>
            <param name="interval">间隔时间（毫秒）</param>
            <param name="del">需要根据间隔时间调用判断的方法，回调返回false则退出</param>
            <returns>超时和Ticked事件调用返回false时，返回false，正常返回true</returns>
        </member>
        <member name="M:RW.Procedure.BaseProcedure.StartExecute">
            <summary>
            开始试验（标记）
            </summary>
        </member>
        <member name="M:RW.Procedure.BaseProcedure.StopExecute">
            <summary>
            停止试验（标记）
            </summary>
        </member>
        <member name="P:RW.Procedure.BaseProcedure.Testing">
            <summary>
            当前的试验状态
            </summary>
        </member>
        <member name="M:RW.Procedure.BaseProcedure.OnTestingChange(System.Boolean)">
            <summary>
            当Testing属性发生变化时触发的事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:RW.Procedure.IProcedure">
            <summary>
            自动试验过程接口
            外部通过调用Exccute方法执行。
            自动试验过程动作描述：试验前-试验中-试验后
            </summary>
        </member>
        <member name="M:RW.Procedure.IProcedure.Execute">
            <summary>
            自动执行试验过程
            </summary>
        </member>
        <member name="M:RW.Procedure.IProcedure.StartExecute">
            <summary>
            开始试验，一般无需调用
            </summary>
        </member>
        <member name="M:RW.Procedure.IProcedure.StopExecute">
            <summary>
            停止试验，可通过该方法达到手动停止或自动停止试验的目的
            </summary>
        </member>
        <member name="E:RW.Procedure.IProcedure.BeforeExecute">
            <summary>
            试验开始前的事件，一般用于合分闸以及采集数据的准备工作
            </summary>
        </member>
        <member name="E:RW.Procedure.IProcedure.Executing">
            <summary>
            试验过程中的事件
            </summary>
        </member>
        <member name="E:RW.Procedure.IProcedure.EndExecuted">
            <summary>
            试验结束后的事件
            </summary>
        </member>
        <member name="E:RW.Procedure.IProcedure.TestChanged">
            <summary>
            试验状态改变时触发的事件
            </summary>
        </member>
        <member name="M:RW.Procedure.Result.BaseResult`1.IsInRange(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            验证数值是否在指定的范围内
            </summary>
            <param name="rangeType">0为%，1为±</param>
            <param name="rangeValue">范围的值</param>
            <param name="refValue">参考值</param>
            <param name="absValue">实际值</param>
            <returns></returns>
        </member>
        <member name="T:RW.Procedure.TickEventArgs">
            <summary>
            用于触发Ticked时的参数
            </summary>
        </member>
        <member name="P:RW.Procedure.TickEventArgs.Ticks">
            <summary>
            执行的时间
            </summary>
        </member>
        <member name="P:RW.Procedure.TickEventArgs.IntervalCount">
            <summary>
            根据间隔记录的次数
            </summary>
        </member>
        <member name="P:RW.Procedure.TickEventArgs.Cancel">
            <summary>
            是否取消
            </summary>
        </member>
        <member name="T:RW.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.add">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.alert">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.close">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.csrw_full">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.delete">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.down">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.error">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.FX_LED">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.hnrw_full">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.information">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.kgled_OFF">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.kgled_ON">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.kgled_ON_red">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.light_black">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.light_green">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.light_red">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.LiquidCrystal">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.Logo">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.normal">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.plus">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.rw">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.scram">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:RW.Properties.Resources.up">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:RW.Reflect.Reflector">
            <summary>
            反射工具
            </summary>
        </member>
        <member name="M:RW.Reflect.Reflector.Reflect(System.Object,System.Object)">
            <summary>
            反射一个类到另外一个类的对象中，通常是两个相同的进行复制
            </summary>
            <param name="sourceObj"></param>
            <param name="destObj"></param>
        </member>
        <member name="T:RW.RWHelper">
            <summary>
            润伟通用Helper帮助类
            </summary>
        </member>
        <member name="F:RW.RWHelper.Path">
            <summary>
            系统路径
            </summary>
        </member>
        <member name="T:RW.SystemDirectory">
            <summary>
            路径配置相关
            </summary>
        </member>
        <member name="P:RW.SystemDirectory.Log">
            <summary>
            日志的绝对路径，通常为logs路径
            </summary>
        </member>
        <member name="P:RW.SystemDirectory.ReportPath">
            <summary>
            报表的绝对路径
            </summary>
        </member>
        <member name="P:RW.SystemDirectory.ConfigPath">
            <summary>
            配置的绝对路径 
            </summary>
        </member>
        <member name="P:RW.SystemDirectory.MonitorPath">
            <summary>
            监控报表的绝对路径
            </summary>
        </member>
        <member name="M:RW.SystemDirectory.GetPath(System.String)">
            <summary>
            获取包含绝对路径的文件全名
            </summary>
        </member>
        <member name="M:RW.Security.MD5Helper.MD5Encrypt(System.String)">
            <summary>
            加密数据，采用对称加密的方式
            </summary>
            <param name="pToEncrypt">待加密的数据</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:RW.Security.MD5Helper.MD5Encrypt(System.String,System.String)">
            <summary>
            加密数据，采用对称加密的方式
            </summary>
            <param name="pToEncrypt">待加密的数据</param>
            <param name="Password">密钥，长度为8，英文或数字</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:RW.Security.MD5Helper.MD5Decrypt(System.String)">
            <summary>
            解密过程，使用的是对称的加密
            </summary>
            <param name="pToDecrypt">等待解密的字符</param>
            <returns>返回原密码，如果解密失败，返回‘解密失败’</returns>
        </member>
        <member name="M:RW.Security.MD5Helper.MD5Decrypt(System.String,System.String)">
            <summary>
            解密过程，使用的是对称的加密
            </summary>
            <param name="pToDecrypt">等待解密的字符</param>
            <param name="password">密钥，长度为8，英文或数字</param>
            <returns>返回原密码，如果解密失败，返回‘解密失败’</returns>
        </member>
        <member name="T:RW.SwtichEventArgs">
            <summary>
            触发Switch的事件
            </summary>
        </member>
        <member name="M:RW.SwtichEventArgs.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="M:RW.SwtichEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            表示取消的状态
            </summary>
        </member>
        <member name="P:RW.SwtichEventArgs.Swtich">
            <summary>
            当前switch状态
            </summary>
        </member>
        <member name="T:RW.SystemHelper">
            <summary>
            系统帮助类，提供了一些系统基本的帮助方法，如结束进程等
            </summary>
        </member>
        <member name="M:RW.SystemHelper.KillProcess(System.String)">
            <summary>
            根据进程名称关闭指定的进程。
            </summary>
            <param name="processName">进程名称（含后缀）</param>
        </member>
        <member name="M:RW.SystemHelper.SetDefaultCulture(System.Globalization.CultureInfo)">
            <summary>
            对于.NET4.5以下的版本，设置默认区域信息
            主要作用于多线程时的语言环境修改。
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:RW.SystemHelper.ChangeLanguage(System.Globalization.CultureInfo)">
            <summary>
            修改系统语言，包含线程当前语言。系统默认语言，支持多线程。
            </summary>
        </member>
        <member name="M:RW.SystemHelper.ChangeLanguage(System.String)">
            <summary>
            改变当前语言
            </summary>
        </member>
        <member name="M:RW.SystemHelper.ApplyPage(System.Type,System.Windows.Forms.Control)">
            <summary>
            应用到指定控件和子控件
            </summary>
        </member>
        <member name="M:RW.SystemHelper.ApplyResources(System.Windows.Forms.Control,System.ComponentModel.ComponentResourceManager)">
            <summary>
            应用国际化资源
            </summary>
        </member>
        <member name="T:RW.Test.Assert">
            <summary>
            断言类，用于测试模块的是否正确
            </summary>
        </member>
        <member name="T:RW.Test.AssertException">
            <summary>
            断言失败的异常
            </summary>
        </member>
        <member name="T:RW.UI.Calibration.frmHardwareSlice">
            <summary>
            分段零点增益校准界面
            功能说明：
            1、每次只能指定一个点位进行分段校准
            2、可以分成任意多段，建议小于10段
            3、
            </summary>
        </member>
        <member name="P:RW.UI.Calibration.frmHardwareSlice.TagKey">
            <summary>
            点位的地址
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.frmHardwareSlice.#ctor(System.String)">
            <summary>
            默认构造
            </summary>
            <param name="tagKey"></param>
        </member>
        <member name="P:RW.UI.Calibration.frmHardwareSlice.Unit">
            <summary>
            显示的单位，通常可以使用 UnitHelper.GetString()进行给定，或者自定义设置
            </summary>
        </member>
        <member name="P:RW.UI.Calibration.frmHardwareSlice.IsAO">
            <summary>
            是否是AO，AO时零点增益写入方式不同
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.frmHardwareSlice.Add(RW.UI.Calibration.SliceHardware)">
            <summary>
            添加一个零点增益点
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.frmHardwareSlice.AddModules(System.Collections.Generic.Dictionary{System.String,RW.Modules.BaseModule})">
            <summary>
            设置关联的模块
            </summary>
        </member>
        <member name="F:RW.UI.Calibration.frmHardwareSlice.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.frmHardwareSlice.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.UI.Calibration.frmHardwareSlice.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.UI.Calibration.SliceHardware">
            <summary>
            分段零点增益对象
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.SliceHardware.#ctor(System.String,System.String)">
            <summary>
            初始化分段零点增益对象
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.SliceHardware.LoadData(RW.IO.IniFile)">
            <summary>
            加载数据
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.SliceHardware.SaveData(RW.IO.IniFile)">
            <summary>
            保存数据
            </summary>
        </member>
        <member name="P:RW.UI.Calibration.SliceHardware.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:RW.UI.Calibration.SliceHardware.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:RW.UI.Calibration.SliceHardwareHelper">
            <summary>
            分段零点增益帮助类
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.SliceHardwareHelper.InitSlice(System.String)">
            <summary>
            初始化指定点的分段零点增益，返回分段零点增益列表
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.SliceHardwareHelper.Remove(System.String,RW.UI.Calibration.SliceHardware)">
            <summary>
            在指定点位中移除一个已存在的分段零点增益对象
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.SliceHardwareHelper.ContainsKey(System.String,System.String)">
            <summary>
            判断点位中是否需包含分段节点
            </summary>
        </member>
        <member name="P:RW.UI.Calibration.ucSliceHardware.TagKey">
            <summary>
            点位名称
            </summary>
        </member>
        <member name="P:RW.UI.Calibration.ucSliceHardware.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:RW.UI.Calibration.ucSliceHardware.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:RW.UI.Calibration.ucSliceHardware.Title">
            <summary>
            显示标题
            </summary>
        </member>
        <member name="P:RW.UI.Calibration.ucSliceHardware.IsAO">
            <summary>
            是否是AO
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.ucSliceHardware.SetHardware(RW.UI.Calibration.SliceHardware)">
            <summary>
            设置分段硬件对象
            </summary>
        </member>
        <member name="F:RW.UI.Calibration.ucSliceHardware.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Calibration.ucSliceHardware.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Calibration.ucSliceHardware.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Confirm.ucPointConfirm">
            <summary>
            硬件确认界面，可包含所有的点位，AI、AO、DI、DO
            </summary>
        </member>
        <member name="F:RW.UI.Confirm.ucPointConfirm.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Confirm.ucPointConfirm.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Confirm.ucPointConfirm.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.AILabel">
            <summary>
            用于显示AI的控件，继承自Label控件
            </summary>
        </member>
        <member name="T:RW.UI.Controls.AINumericalDisplay">
            <summary>
            一种基于GDI+技术的数显仪器，高效
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AINumericalDisplay.#ctor">
            <summary>
            初始化 AINumericalDisplay 实例
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.Index">
            <summary>
            获取或设置相关的索引
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.Text">
            <summary>
            关联的文本，不可用
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.Interval">
            <summary>
            刷新间隔时间
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.ValueBackColor">
            <summary>
            获取或设置 值 的背景色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.ValueForeColor">
            <summary>
            获取或设置 值 的前景色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.ValueFont">
            <summary>
            获取或设置值的字体
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.UnitBackColor">
            <summary>
            获取或设置单位的背景色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.UnitForeColor">
            <summary>
            获取或设置单位的前景色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.UnitFont">
            <summary>
            获取或设置单位的字体
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.Value">
            <summary>
            获取或设置相关的值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.BackColor">
            <summary>
            默认的背景颜色（标题栏）
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.DecimalNumber">
            <summary>
            显示值时保留的小数位
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.Unit">
            <summary>
            值的单位
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.CustomUnit">
            <summary>
            自定义计量单位，当赋值时，Unit属性自动失效
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.FormatString">
            <summary>
            格式化字符串，可以参照string.Format(double)方法
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.Label">
            <summary>
            获取或设置标题
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AINumericalDisplay.GetFormatValue">
            <summary>
            获取格式化后的值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.ValueFontName">
            <summary>
            默认采用LiquidCrystal的字体显示值，为空时则使用ValueFont进行渲染
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.ValueFontSize">
            <summary>
            值字体的大小。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.InputDriverName">
            <summary>
            输入的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.InputTagName">
            <summary>
            输入的点位名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.BorderColor">
            <summary>
            边框的颜色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AINumericalDisplay.SetLocal">
            <summary>
            实际值是否由本地设置
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AINumericalDisplay.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            自定义重绘控件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AINumericalDisplay.Refresh(RW.Components.PoolInvoke)">
            <summary>
            设置刷新时的委托
            </summary>
            <param name="pool"></param>
        </member>
        <member name="M:RW.UI.Controls.AINumericalDisplay.StartMonitor">
            <summary>
            开始监控
            </summary>
        </member>
        <member name="T:RW.UI.Controls.AIRLabel">
            <summary>
            用于显示AI的控件
            区别于AILabel，本控件完全采用GDI+技术完成，效率更高
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AIRLabel.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.Value">
            <summary>
            获取或设置相关的值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.BorderWidth">
            <summary>
            边框的宽度
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.BorderColor">
            <summary>
            边框的颜色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.TextAlign">
            <summary>
            指定控件中的对象或文本如何相对于控件元素水平对齐。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.Index">
            <summary>
            获取或设置相关的索引
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.Label">
            <summary>
            获取或设置标题
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AIRLabel.GetFormatValue">
            <summary>
            获取格式化后的值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.Interval">
            <summary>
            刷新间隔时间
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.AutoSize">
            <summary>
            是否支持自动调整大小（暂不可用）
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.Text">
            <summary>
            显示的文本
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.BackColor">
            <summary>
            默认的背景颜色（标题栏）
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.DecimalNumber">
            <summary>
            显示值时保留的小数位
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.Unit">
            <summary>
            值的单位
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.CustomUnit">
            <summary>
            自定义计量单位，当赋值时，Unit属性自动失效
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.FormatString">
            <summary>
            格式化字符串，可以参照string.Format(double)方法
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.ValueFontName">
            <summary>
            默认采用LiquidCrystal的字体显示值，为空时则使用ValueFont进行渲染
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.ValueFontSize">
            <summary>
            值字体的大小。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.InputDriverName">
            <summary>
            输入的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.InputTagName">
            <summary>
            输入的点位名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AIRLabel.SetLocal">
            <summary>
            实际值是否由本地设置
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AIRLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            自定义绘制
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AIRLabel.ToString">
            <summary>
            格式化显示控件
            </summary>
            <returns></returns>
        </member>
        <member name="T:RW.UI.Controls.AliasHelper">
            <summary>
            别名帮助类
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AliasHelper.GetAliases(System.String)">
            <summary>
            根据关键标识，获取别名列表
            </summary>
        </member>
        <member name="T:RW.UI.Controls.AliasMap">
            <summary>
            通道别名映射
            两种初始化方法：alias=new AliasMap("Vib"+i);  alias.Init();
            alias=new AliasMap(); alias.SetConfig(conf);
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AliasMap.ID">
            <summary>
            唯一标识，自定义的唯一标识。如Vib_CH01,TEMP_CH02；
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AliasMap.ChannelIndex">
            <summary>
            通道所使用的索引
            </summary>
        </member>
        <member name="F:RW.UI.Controls.AliasMap.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AliasMap.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.AliasMap.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.AutoLine">
            <summary>
            自动连线组件，从前至后，通常根据实际电路、气路方向
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AutoLine.FalseColor">
            <summary>
            当该控件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AutoLine.LineWidth">
            <summary>
            线条宽度
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AutoLine.CanExtend(System.Object)">
            <summary>
            IExtenderProvider 接口实现，用于确定控件是否需要扩展属性。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.AutoLine.Parent">
            <summary>
            指定容器（要使用自动连线，需指定容器通常放入到一个Panel或GroupPanel）理论上可以使用form的，但没有更好的办法，所以只能用容器的方式。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.AutoLine.SetNextControls(System.Windows.Forms.Control,System.Windows.Forms.Control[])">
            <summary>
            指定下一个控件，自动根据坐标相对位置连接
            </summary>
            <param name="current">当前控件</param>
            <param name="next">下一个控件</param>
        </member>
        <member name="M:RW.UI.Controls.AutoLine.GetNextControls(System.Windows.Forms.Control)">
            <summary>
            获取下一个控件
            </summary>
            <param name="current">当前控件</param>
            <returns></returns>
        </member>
        <member name="M:RW.UI.Controls.AutoLine.GetFromCount(System.Windows.Forms.Control)">
            <summary>
            自动计算来源的数量
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:RW.UI.Controls.AutoLine.GetNextPosition(System.Drawing.Point,System.Drawing.Size,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            计算两个点的相对关系
            
            </summary>
        </member>
        <member name="T:RW.UI.Controls.FromPositionEnums">
            <summary>
            限定只能来源某个固定方向
            </summary>
        </member>
        <member name="T:RW.UI.Controls.BaseAIControl">
            <summary>
            所有基于AI的控件的抽象类
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.Interval">
            <summary>
            刷新间隔时间
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.AutoSize">
            <summary>
            是否支持自动调整大小（暂不可用）
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.BackColor">
            <summary>
            默认的背景颜色（标题栏）
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.Index">
            <summary>
            获取或设置相关的索引
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.Value">
            <summary>
            获取或设置相关的值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.Label">
            <summary>
            获取或设置标题
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.DecimalNumber">
            <summary>
            显示值时保留的小数位
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.Unit">
            <summary>
            值的单位
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.CustomUnit">
            <summary>
            自定义计量单位，当赋值时，Unit属性自动失效
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.FormatString">
            <summary>
            格式化字符串，可以参照string.Format(double)方法
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.InputDriverName">
            <summary>
            输入的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.InputTagName">
            <summary>
            输入的点位名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseAIControl.SetLocal">
            <summary>
            实际值是否由本地设置
            </summary>
        </member>
        <member name="M:RW.UI.Controls.BaseAIControl.GetFormatValue">
            <summary>
            获取格式化后的值
            </summary>
        </member>
        <member name="M:RW.UI.Controls.BaseAIControl.ToString">
            <summary>
            格式化显示控件
            </summary>
            <returns></returns>
        </member>
        <member name="T:RW.UI.Controls.BaseRWButton">
            <summary>
            基础按钮控件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.BaseRWButton.#ctor">
            <summary>
            默认构造基础按钮控件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.ButtonStyle">
            <summary>
            按钮样式，默认为自定义
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.Text">
            <summary>
            关联的文本
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.BackColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.Radius">
            <summary>
            圆角的角度，默认为10
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.CanClick">
            <summary>
            是否可以点击
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.AsyncClick">
            <summary>
            是否支持异步点击
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.ClickSwitch">
            <summary>
            点击是否切换Switch状态，默认不切换
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.ClickAction">
            <summary>
            用于描述点击类型，0表示同步写，1表示脉冲写,2表示点动
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.SwitchType">
            <summary>
            按钮的功能样式，可以控制按钮的功能。可选默认功能性，切换型，三种颜色型。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.Switch">
            <summary>
            描述一个类似开关闭合状态
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.TrueColor">
            <summary>
            当Swtich=true时的颜色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.FalseColor">
            <summary>
            当Switch=false的颜色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.EnabledError">
            <summary>
            是否显示Enabled=false的红叉样式，如果为true，当Enabled=false或asyncClick时，将出现此样式，默认关闭
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.ContentLayout">
            <summary>
            文字的显示方式，可设置垂直、水平、自动的显示，默认自动的方式
            </summary>
        </member>
        <member name="E:RW.UI.Controls.BaseRWButton.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.BaseRWButton.Switching">
            <summary>
            开关发生改变前触发的事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.BaseRWButton.OnPointClicked(System.Boolean)">
            <summary>
            触发点动事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.BaseRWButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            触发鼠标点击左键的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.BaseRWButton.PointClicked">
            <summary>
            点动时触发的事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.BaseRWButton.OnSwitchChanged(System.Boolean)">
            <summary>
            Swtich状态改变的事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RW.UI.Controls.BaseRWButton.DrawRoundRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            画个
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.InputDriverName">
            <summary>
            输入点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.InputTagName">
            <summary>
            输入点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.OutputDriverName">
            <summary>
            输出点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.WriteTimeout">
            <summary>
            写入超时时间（毫秒），等于0表示不超时,-1表示无限期；
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.DialogResult">
            <summary>
            获取或设置单击按钮时返回给父窗体的值。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.BaseRWButton.Index">
            <summary>
            用于显示索引位置，可用于多通道的数据
            </summary>
        </member>
        <member name="M:RW.UI.Controls.BaseRWButton.NotifyDefault(System.Boolean)">
            <summary>
            通知某个控件是默认按钮，以便相应调整其外观和行为。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RW.UI.Controls.BaseRWButton.PerformClick">
            <summary>
            为该控件生成 System.Windows.Forms.Control.Click 事件。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.BaseRWButton.ToString">
            <summary>
            格式化显示的字符串
            </summary>
        </member>
        <member name="T:RW.UI.Controls.CalibrationGroup">
            <summary>
            硬件校准集合
            </summary>
        </member>
        <member name="M:RW.UI.Controls.CalibrationGroup.#ctor">
            <summary>
            初始化硬件校准集合
            </summary>
        </member>
        <member name="P:RW.UI.Controls.CalibrationGroup.ItemSize">
            <summary>
            单元项的大小
            </summary>
        </member>
        <member name="P:RW.UI.Controls.CalibrationGroup.Sensitivity">
            <summary>
            灵敏度
            </summary>
        </member>
        <member name="F:RW.UI.Controls.CalibrationGroup.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.CalibrationGroup.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.CalibrationGroup.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.ColorHelper">
            <summary>
            RW内置的颜色帮助类，可快速获取内置颜色；
            </summary>
        </member>
        <member name="F:RW.UI.Controls.StyleColorEnums.Custom">
            <summary>
            默认样式，白色背景
            </summary>
        </member>
        <member name="F:RW.UI.Controls.StyleColorEnums.Primary">
            <summary>
            主要样式，#286090
            </summary>
        </member>
        <member name="F:RW.UI.Controls.StyleColorEnums.Success">
            <summary>
            #5cb85c
            </summary>
        </member>
        <member name="F:RW.UI.Controls.StyleColorEnums.Info">
            <summary>
            #5bc0de
            </summary>
        </member>
        <member name="F:RW.UI.Controls.StyleColorEnums.Warning">
            <summary>
            #f0ad4e
            </summary>
        </member>
        <member name="F:RW.UI.Controls.StyleColorEnums.Danger">
            <summary>
            危险,#d9534f
            </summary>
        </member>
        <member name="T:RW.UI.Controls.ContentLayout">
            <summary>
            内容布局方式
            </summary>
        </member>
        <member name="F:RW.UI.Controls.ContentLayout.Auto">
            <summary>
            自动方式
            </summary>
        </member>
        <member name="F:RW.UI.Controls.ContentLayout.Horizontal">
            <summary>
            水平显示
            </summary>
        </member>
        <member name="F:RW.UI.Controls.ContentLayout.Vertical">
            <summary>
            垂直显示
            </summary>
        </member>
        <member name="T:RW.UI.Controls.Line">
            <summary>
            用于提供带颜色控制的线条
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.MinimumSize">
            <summary>
            最小的大小
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.TrueColor">
            <summary>
            当switch属性为true时的颜色，默认为绿色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.FalseColor">
            <summary>
            当switch属性为false时的颜色，默认为绿色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.LineWidth">
            <summary>
            获取或设置线的宽度，默认10个像素
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.LineLayout">
            <summary>
            获取或设置线的布局位置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.Switch">
            <summary>
            当前开关的状态，默认为false，使用falseValue设置的值
            </summary>
        </member>
        <member name="E:RW.UI.Controls.Line.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.Line.Switching">
            <summary>
            开关发生改变前触发的事件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.Index">
            <summary>
            用于描述多通道的索引号
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.InputDriverName">
            <summary>
            输入点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.InputTagName">
            <summary>
            输入点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.OutputDriverName">
            <summary>
            输出点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Line.WriteTimeout">
            <summary>
            写入超时时间（毫秒），等于0表示不超时,-1表示无限期；
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Line.ToString">
            <summary>
            格式化显示的字符串
            </summary>
        </member>
        <member name="T:RW.UI.Controls.LineLayout">
            <summary>
            线的布局位置
            </summary>
        </member>
        <member name="F:RW.UI.Controls.LineLayout.Fill">
            <summary>
            填充
            </summary>
        </member>
        <member name="F:RW.UI.Controls.LineLayout.Top">
            <summary>
            顶部
            </summary>
        </member>
        <member name="F:RW.UI.Controls.LineLayout.Bottom">
            <summary>
            底部
            </summary>
        </member>
        <member name="F:RW.UI.Controls.LineLayout.TopBottom">
            <summary>
            上右
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ListItemSelector.Columns">
            <summary>
            指定显示的列数量，为0表示不指定
            </summary>
        </member>
        <member name="F:RW.UI.Controls.ListItemSelector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.UI.Controls.ListItemSelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.UI.Controls.ListItemSelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.UI.Controls.Number.AOControl">
            <summary>
            用于描述AO的基础控件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Number.AOControl.#ctor">
            <summary>
            实例化AO控件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.InputDriverName">
            <summary>
            驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.InputTagName">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.LabelDock">
            <summary>
            文本显示位置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.TextAlign">
            <summary>
            文本水平方向的对齐方式，左、中、右
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.Text">
            <summary>
            显示的标签文本
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.LabelWidth">
            <summary>
            标签的宽度，设置为-1时
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.MinValue">
            <summary>
            值的最小值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.MaxValue">
            <summary>
            值的最大值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.ButtonVisible">
            <summary>
            确定按钮是否可见
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.SetLocal">
            <summary>
            实际值是否由本地设置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.ValueDecimalPlaces">
            <summary>
            小数点位数
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.Value">
            <summary>
            当前值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.CustomUnit">
            <summary>
            自定义显示的单位名
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.Unit">
            <summary>
            显示的单位
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.OutputDriverName">
            <summary>
            输出点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Number.AOControl.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Number.AOControl.Submit">
            <summary>
            提交修改
            </summary>
        </member>
        <member name="E:RW.UI.Controls.Number.AOControl.Submited">
            <summary>
            提交修改时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.Number.AOControl.ValueChanged">
            <summary>
            值发生改变时的事件
            </summary>
        </member>
        <member name="F:RW.UI.Controls.Number.AOControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Number.AOControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.Number.AOControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.NumInput`1.LinkedControl">
            <summary>
            相关的控件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.NumInput`1.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.NumInput`1.Advanced">
            <summary>
            是否包含高级功能
            </summary>
        </member>
        <member name="F:RW.UI.Controls.NumInput`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.UI.Controls.NumInput`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.UI.Controls.NumInput`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.UI.Controls.NumInputHelper">
            <summary>
            输入帮助类
            </summary>
        </member>
        <member name="T:RW.UI.Controls.RBaseTimer">
            <summary>
            所有Timer的基类，如：RTimer、RCountdown、RStopwatch
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RBaseTimer.#ctor">
            <summary>
            创建 BaseTimer 的实例。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RBaseTimer.FormatString">
            <summary>
            时间格式化字符串,yyyy表示4位年份，MM表示月份，dd表示日，HH表示小时，mm表示分钟，ss表示秒，fff表示毫秒。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RBaseTimer.Interval">
            <summary>
            间隔时间,默认为1000ms
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RBaseTimer.GetText">
            <summary>
            获取需要显示文本的内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.UI.Controls.RBaseTimer.Start">
            <summary>
            开始或继续测量某个时间间隔的运行时间。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RBaseTimer.Stop">
            <summary>
            停止测量某个时间间隔的运行时间。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RBaseTimer.Reset">
            <summary>
            停止时间间隔测量，并将运行时间重置为零。
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RBaseTimer.Stopped">
            <summary>
            结束时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RBaseTimer.Started">
            <summary>
            开始时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RBaseTimer.Ticked">
            <summary>
            周期性触发的事件
            </summary>
        </member>
        <member name="T:RW.UI.Controls.RButton">
            <summary>
            一种标准按钮
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RButton.#ctor">
            <summary>
            默认构造标准按钮
            </summary>
        </member>
        <member name="T:RW.UI.Controls.RCountdown">
            <summary>
            一种倒计时控件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RCountdown.Time">
            <summary>
            倒计时时间
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RCountdown.Interval">
            <summary>
            间隔时间
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RCountdown.Start">
            <summary>
            启动计时器
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RCountdown.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RCountdown.Reset">
            <summary>
            重置计时器
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RCountdown.FormatString">
            <summary>
            格式化字符串，请参考DateTime.ToString(formatString)
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RCountdown.Stopped">
            <summary>
            结束时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RCountdown.Started">
            <summary>
            开始时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RCountdown.Ticked">
            <summary>
            周期性触发的事件
            </summary>
        </member>
        <member name="T:RW.UI.Controls.TickEventArgs">
            <summary>
            计时器的事件参数
            </summary>
        </member>
        <member name="M:RW.UI.Controls.TickEventArgs.#ctor">
            <summary>
            默认构造参数
            </summary>
        </member>
        <member name="M:RW.UI.Controls.TickEventArgs.#ctor(System.TimeSpan)">
            <summary>
            使用TimeSpan构造参数
            </summary>
        </member>
        <member name="M:RW.UI.Controls.TickEventArgs.#ctor(System.Int32)">
            <summary>
            使用tick构造参数
            </summary>
        </member>
        <member name="P:RW.UI.Controls.TickEventArgs.Tick">
            <summary>
            剩余时间
            </summary>
        </member>
        <member name="T:RW.UI.Controls.RStopwatch">
            <summary>
            一种秒表计时器控件(基于Stopwatch高精度秒表)
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RStopwatch.#ctor">
            <summary>
            初始化计时器对象
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RStopwatch.Start">
            <summary>
            开始或继续测量某个时间间隔的运行时间。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RStopwatch.Stop">
            <summary>
            停止测量某个时间间隔的运行时间。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RStopwatch.Reset">
            <summary>
            停止时间间隔测量，并将运行时间重置为零。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RStopwatch.FormatString">
            <summary>
            格式化字符串，与DateTime类似，请参考DateTime格式化字符串
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RStopwatch.Stopped">
            <summary>
            结束时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RStopwatch.Started">
            <summary>
            开始时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RStopwatch.Ticked">
            <summary>
            周期性触发的事件
            </summary>
        </member>
        <member name="T:RW.UI.Controls.RTimer">
            <summary>
            一种简易的时间控件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RTimer.#ctor">
            <summary>
            创建RTimer的实例。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RTimer.CurrentTime">
            <summary>
            表示当前时间，不允许修改
            </summary>
        </member>
        <member name="T:RW.UI.Controls.RWButton">
            <summary>
            润伟提供的一种基于Button的控件，其实现了ISwitch接口可用于两种状态。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.FlatStyle">
            <summary>
            按钮样式
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.BackColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.AsyncClick">
            <summary>
            是否支持异步点击
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.ActionTime">
            <summary>
            动作时间，点击按钮时会将按钮变灰。但当动作时间足够快时，可以不需要变灰
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWButton.OnPointClicked(System.Boolean)">
            <summary>
            触发点动事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            触发鼠标点击左键的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RWButton.PointClicked">
            <summary>
            点动时触发的事件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.Switch">
            <summary>
            开关状态
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RWButton.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RWButton.Switching">
            <summary>
            开关发生改变前触发的事件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.CanClick">
            <summary>
            是否可点击
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.ClickSwitch">
            <summary>
            点击后会不会触发Switch状态改变
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.InputDriverName">
            <summary>
            输入点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.InputTagName">
            <summary>
            输入点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.OutputDriverName">
            <summary>
            输出点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.WriteTimeout">
            <summary>
            写入超时时间（毫秒），等于0表示不超时,-1表示无限期；
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWButton.ClickAction">
            <summary>
            用于描述点击类型，0表示同步写，1表示脉冲写,2表示点动
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWButton.ToString">
            <summary>
            格式化显示的字符串
            </summary>
        </member>
        <member name="F:RW.UI.Controls.RWButton.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWButton.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.RWButton.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:RW.UI.Controls.RWGroup.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWGroup.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.RWGroup.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.RWHardGroup">
            <summary>
            根据RWHards零点增益空间组生成标准的零点增益界面
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWHardGroup.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.GroupName">
            <summary>
            获取或设置分组名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.HeadText">
            <summary>
            头部文字描述，如果位置不对，可调整此值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.Text">
            <summary>
            组标题名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.FlowDirection">
            <summary>
            获取或设置一个值，该值指示 RW.UI.Controls.RWHardGroup 控件的流向。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.Labels">
            <summary>
            设置或获取单元项目的标签。格式为：标签名#Tag名
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.GainDecimalNumber">
            <summary>
            增益小数点数量
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.ZeroDecimalNumber">
            <summary>
            零点小数点数量
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.EnabedToZero">
            <summary>
            是否打开"归零"功能
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.EnabledReset">
            <summary>
            是否打开"重置"功能
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.ItemSize">
            <summary>
            设置或获取每一个单元项的大小。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHardGroup.Children">
            <summary>
            获取所有零点增益单元控件的集合
            </summary>
        </member>
        <member name="F:RW.UI.Controls.RWHardGroup.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWHardGroup.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.RWHardGroup.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.RWHards">
            <summary>
            用于通过标签数组自动生成零点增益的组
            <para>功能简介：</para>
            <para>1、可以设置每个组的大小。（为了保证格式，每个组为统一大小）</para>
            <para>2、可以设置一个string数组，为标签名称</para>
            <para>3、设置完毕后，可以通过代码获取到所有的UCCalibration控件。</para>
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWHards.#ctor">
            <summary>
            默认构造零点增益组控件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHards.ItemSize">
            <summary>
            设置或获取每一个单元项的大小。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHards.FlowDirection">
            <summary>
            获取或设置一个值，该值指示 RW.UI.Controls.RWHards 控件的流向。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHards.Labels">
            <summary>
            设置或获取单元项目的标签。格式为：标签名#Tag名  或 标签名#Tag名#增益点#零点
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHards.Children">
            <summary>
            获取所有零点增益单元控件的集合，该值由Labels自动生成，不要编辑此对象
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHards.GroupName">
            <summary>
            获取或设置分组名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHards.GainDecimalNumber">
            <summary>
            增益小数点数量
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHards.ZeroDecimalNumber">
            <summary>
            零点小数点数量
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWHards.SetLocal">
            <summary>
            是否采用本地计算的方式（整个组采用相同的计算）
            </summary>
        </member>
        <member name="F:RW.UI.Controls.RWHards.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWHards.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.RWHards.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:RW.UI.Controls.RWMeter.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWMeter.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.RWMeter.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:RW.UI.Controls.RWRowItem.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWRowItem.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.RWRowItem.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.RWSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RWSwitch.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.RWSwitch.Switching">
            <summary>
            开关发生改变前触发的事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWSwitch.OnPointClicked(System.Boolean)">
            <summary>
            触发点动事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWSwitch.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            触发鼠标点击左键的事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.RWSwitch.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            触发鼠标松开的事件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWSwitch.InputDriverName">
            <summary>
            输入点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWSwitch.InputTagName">
            <summary>
            输入点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWSwitch.OutputDriverName">
            <summary>
            输出点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWSwitch.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.RWSwitch.WriteTimeout">
            <summary>
            写入超时时间（毫秒），等于0表示不超时,-1表示无限期；
            </summary>
        </member>
        <member name="T:RW.UI.Controls.SubmitArgs">
            <summary>
            UCCalibration提交时的参数对象
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SubmitArgs.#ctor">
            <summary>
            默认构造点
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SubmitArgs.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            指定参数构造对象
            </summary>
            <param name="index">索引号</param>
            <param name="gain">增益值</param>
            <param name="zero">零点值</param>
        </member>
        <member name="P:RW.UI.Controls.SubmitArgs.Index">
            <summary>
            索引号
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SubmitArgs.Gain">
            <summary>
            增益值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SubmitArgs.Zero">
            <summary>
            零点值
            </summary>
        </member>
        <member name="T:RW.UI.Controls.SwitchLabel">
            <summary>
            一种简单的红绿黑图标控件 v2.0.0
            1. 支持3种颜色的控制灯。
            2. 支持ISwitch接口，提供了Switch属性。
            3. 支持ITag接口，支持点位名称自动关联。
            4. 图标为内置，无法自定义图标。
            </summary>
            <author>yuanyong</author>
            <publish>2020-07-31</publish>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.Text">
            <summary>
            获取或设置当前文字标签
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.CheckState">
            <summary>
            获取或设置当前的按钮状态
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.Switch">
            <summary>
            获取或设置当前的按钮状态
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.SwitchTypes">
            <summary>
            获取或设置当switch为true、false时的颜色说明
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.ThreeState">
            <summary>
            说明按钮是否支持三种状态
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.ImageAlign">
            <summary>
            用于控制图标显示的位置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.Reverse">
            <summary>
            反转信号灯
            为True表示将灯进行反转显示。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.TextAlign">
            <summary>
            用于控制文本的显示位置
            </summary>
        </member>
        <member name="E:RW.UI.Controls.SwitchLabel.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.SwitchLabel.Switching">
            <summary>
            开关发生改变前触发的事件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.Index">
            <summary>
            与点位相关的索引号，自己手动进行关联
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.InputDriverName">
            <summary>
            输入点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.InputTagName">
            <summary>
            输入点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.OutputDriverName">
            <summary>
            输出点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLabel.WriteTimeout">
            <summary>
            写入超时时间（毫秒），等于0表示不超时,-1表示无限期；
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SwitchLabel.ToString">
            <summary>
            显示关键信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:RW.UI.Controls.SwitchLabel.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SwitchLabel.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.SwitchLabel.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.SwitchTypes">
            <summary>
            开关颜色类型
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SwitchTypes.BlackGreen">
            <summary>
            黑色和绿色
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SwitchTypes.BlackRed">
            <summary>
            黑色和红色
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SwitchTypes.GreenRed">
            <summary>
            绿色和红色
            </summary>
        </member>
        <member name="T:RW.UI.Controls.SwitchState">
            <summary>
            开关的三种状态
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SwitchState.Default">
            <summary>
            默认状态
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SwitchState.On">
            <summary>
            打开状态
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SwitchState.Off">
            <summary>
            关闭状态
            </summary>
        </member>
        <member name="T:RW.UI.Controls.SwitchLED">
            <summary>
            一种标准图片显示开关状态的控件
            version：v1.0.0
            author：yuanyong
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SwitchLED.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLED.TrueImage">
            <summary>
            当Switch=true时的图片
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLED.FalseImage">
            <summary>
            当Switch=false时的图片
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchLED.Switch">
            <summary>
            一种描述开关状态的通用属性
            </summary>
        </member>
        <member name="T:RW.UI.Controls.SwitchPictureBox">
            <summary>
            可自定义两种图片的控件，支持Switch切换
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.CanClick">
            <summary>
            是否可点击
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.ClickSwitch">
            <summary>
            获取或设置点击时是否触发开关，默认可触发
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.Switch">
            <summary>
            打开或关闭开关
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SwitchPictureBox.On">
            <summary>
            打开开关
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SwitchPictureBox.Off">
            <summary>
            关闭开关
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.TrueImage">
            <summary>
            开关打开时的图片
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.FalseImage">
            <summary>
            开关关闭时的图片
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.Index">
            <summary>
            获取或设置相关的Index值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.TextLayout">
            <summary>
            获取或设置文字显示位置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.Font">
            <summary>
            文字的字体
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.BorderWidth">
            <summary>
            文字距离控件的宽度/高度
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.BorderColor">
            <summary>
            边框的颜色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.ForeColor">
            <summary>
            文字颜色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.TextBackColor">
            <summary>
            文字的背景色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.AsyncClick">
            <summary>
            是否支持异步点击
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.EnableStatus">
            <summary>
            打开或关闭设置Enabled时的状态，档Enabled为false控件用斜线表示
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SwitchPictureBox.OnPointClicked(System.Boolean)">
            <summary>
            触发点动事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SwitchPictureBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            触发鼠标点击左键的事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SwitchPictureBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            触发鼠标松开的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.SwitchPictureBox.PointClicked">
            <summary>
            点动时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.SwitchPictureBox.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.SwitchPictureBox.Switching">
            <summary>
            开关发生改变前触发的事件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.InputDriverName">
            <summary>
            输入点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.InputTagName">
            <summary>
            输入点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.OutputDriverName">
            <summary>
            输出点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.WriteTimeout">
            <summary>
            写入超时时间（毫秒），等于0表示不超时,-1表示无限期；
            </summary>
        </member>
        <member name="P:RW.UI.Controls.SwitchPictureBox.ClickAction">
            <summary>
            用于描述点击类型，0表示同步写，1表示脉冲写，2表示点动
            </summary>
        </member>
        <member name="M:RW.UI.Controls.SwitchPictureBox.ToString">
            <summary>
            格式化字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="T:RW.UI.Controls.TextLayout">
            <summary>
            用于描述文字的显示位置
            </summary>
        </member>
        <member name="F:RW.UI.Controls.TextLayout.None">
            <summary>
            默认无
            </summary>
        </member>
        <member name="F:RW.UI.Controls.TextLayout.Top">
            <summary>
            文字在控件的上面
            </summary>
        </member>
        <member name="F:RW.UI.Controls.TextLayout.Left">
            <summary>
            文字在控件的左边
            </summary>
        </member>
        <member name="F:RW.UI.Controls.TextLayout.Bottom">
            <summary>
            文字在控件的下面
            </summary>
        </member>
        <member name="F:RW.UI.Controls.TextLayout.Right">
            <summary>
            文字在控件的右边
            </summary>
        </member>
        <member name="T:RW.UI.Controls.SwitchStyleEnums">
            <summary>
            开关的样式
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SwitchStyleEnums.Default">
            <summary>
            默认button方式
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SwitchStyleEnums.Switch">
            <summary>
            开关样式
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SwitchStyleEnums.Multi">
            <summary>
            三种颜色样式
            </summary>
        </member>
        <member name="T:RW.UI.Controls.Switch.BaseButtonSwtich">
            <summary>
            一种可以点击的按钮，可衍生出普通按钮、图片按钮等等。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseButtonSwtich.DialogResult">
            <summary>
            获取或设置单击按钮时返回给父窗体的值。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseButtonSwtich.AsyncClick">
            <summary>
            是否支持异步点击
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseButtonSwtich.CanClick">
            <summary>
            是否可以点击
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseButtonSwtich.ClickSwitch">
            <summary>
            点击是否切换Switch状态，默认不切换
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseButtonSwtich.ClickAction">
            <summary>
            用于描述点击类型，0表示同步写，1表示脉冲写,2表示点动
            </summary>
        </member>
        <member name="E:RW.UI.Controls.Switch.BaseButtonSwtich.PointClicked">
            <summary>
            点动时触发的事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Switch.BaseButtonSwtich.OnPointClicked(System.Boolean)">
            <summary>
            触发点动事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Switch.BaseButtonSwtich.OnClick(System.EventArgs)">
            <summary>
            点击事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Switch.BaseButtonSwtich.GetButtonColor">
            <summary>
            获取按钮的颜色
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.UI.Controls.Switch.BaseButtonSwtich.NotifyDefault(System.Boolean)">
            <summary>
            通知某个控件是默认按钮，以便相应调整其外观和行为。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RW.UI.Controls.Switch.BaseButtonSwtich.PerformClick">
            <summary>
            为该控件生成 System.Windows.Forms.Control.Click 事件。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.Switch.BaseSwitch">
            <summary>
            所有润伟按钮类的基类
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseSwitch.InputDriverName">
            <summary>
            输入点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseSwitch.InputTagName">
            <summary>
            输入点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseSwitch.OutputDriverName">
            <summary>
            输出点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseSwitch.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseSwitch.WriteTimeout">
            <summary>
            写入超时时间（毫秒），等于0表示不超时,-1表示无限期；
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseSwitch.Switch">
            <summary>
            描述一个类似开关闭合状态
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.BaseSwitch.Index">
            <summary>
            用于显示索引位置，可用于多通道的数据
            </summary>
        </member>
        <member name="E:RW.UI.Controls.Switch.BaseSwitch.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.Switch.BaseSwitch.Switching">
            <summary>
            开关发生改变前触发的事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Switch.BaseSwitch.OnSwitchChanged(System.Boolean)">
            <summary>
            Swtich状态改变的事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RW.UI.Controls.Switch.BaseSwitch.OnSwitching(RW.SwtichEventArgs)">
            <summary>
            Swtich状态改变的事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:RW.UI.Controls.Switch.ColorSwitch">
            <summary>
            一种带颜色的按钮
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.ColorSwitch.TrueColor">
            <summary>
            当Swtich=true时的颜色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.ColorSwitch.FalseColor">
            <summary>
            当Switch=false的颜色
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Switch.ColorSwitch.GetButtonColor">
            <summary>
            获取按钮的颜色
            </summary>
        </member>
        <member name="T:RW.UI.Controls.Switch.ImageSwitch">
            <summary>
            一种使用图片的方式显示Switch，支持自定义True图片和False图片
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.ImageSwitch.TrueImage">
            <summary>
            当Switch=true时显示的图片
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.ImageSwitch.FalseImage">
            <summary>
            当Switch=false时显示的图片
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.ImageSwitch.ImageSize">
            <summary>
            图片显示的大小
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.ImageSwitch.TextImageRelation">
            <summary>
            图片和文字的位置关系
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.ImageSwitch.TextAlign">
            <summary>
            获取或设置文字显示位置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.ImageSwitch.ImageAlign">
            <summary>
            获取或设置图片显示位置
            </summary>
        </member>
        <member name="T:RW.UI.Controls.Switch.LabelSwitch">
            <summary>
            一种自定义的Switch控件。
            V1.0
            1、支持true、false颜色设定的控件。
            2、完全采用GDI+绘制。
            3、支持渐变色设置。（白底）
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.Text">
            <summary>
            关联的文本
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.DefaultSize">
            <summary>
            默认大小
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.Index">
            <summary>
            与点位相关的索引号，自己手动进行关联
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.InputDriverName">
            <summary>
            输入点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.InputTagName">
            <summary>
            输入点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.OutputDriverName">
            <summary>
            输出点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.WriteTimeout">
            <summary>
            写入超时时间（毫秒），等于0表示不超时,-1表示无限期；
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.Switch">
            <summary>
            获取或设置当前的按钮状态指示灯
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.TrueColor">
            <summary>
            当Swtich=true时的颜色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.FalseColor">
            <summary>
            当Switch=false的颜色
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.Reverse">
            <summary>
            反转信号灯
            为True表示将灯进行反转显示。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.ImageSize">
            <summary>
            显示圆的大小
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.TextAlign">
            <summary>
            用于控制文本的显示位置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.BorderWidth">
            <summary>
            边框宽度
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.LabelSwitch.Shadow">
            <summary>
            是否启用渐变色，默认启用
            </summary>
        </member>
        <member name="E:RW.UI.Controls.Switch.LabelSwitch.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.Switch.LabelSwitch.Switching">
            <summary>
            开关发生改变前触发的事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Switch.LabelSwitch.OnSwitchChanged(System.Boolean)">
            <summary>
            Swtich状态改变的事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.Text">
            <summary>
            与该控件关联的文本
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.Switch">
            <summary>
            获取或设置当前的按钮状态
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.SwitchTypes">
            <summary>
            获取或设置当switch为true、false时的颜色说明
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.ImageAlign">
            <summary>
            用于控制图标显示的位置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.Reverse">
            <summary>
            反转信号灯
            为True表示将灯进行反转显示。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.TextAlign">
            <summary>
            用于控制文本的显示位置
            </summary>
        </member>
        <member name="E:RW.UI.Controls.Switch.SwitchControl.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.InputDriverName">
            <summary>
            输入点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.InputTagName">
            <summary>
            输入点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.OutputDriverName">
            <summary>
            输出点位的驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.OutputTagName">
            <summary>
            输出点位的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.Switch.SwitchControl.WriteTimeout">
            <summary>
            写入超时时间（毫秒），等于0表示不超时,-1表示无限期；
            </summary>
        </member>
        <member name="F:RW.UI.Controls.Switch.SwitchControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.Switch.SwitchControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.Switch.SwitchControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.UCCalibration">
            <summary>
            硬件校准单元，可对单个硬件进行校准和零点增益设置
            <para>单独使用时，需要调用InitData方法或者SetHardware方法，二者选其一</para>
            </summary>
        </member>
        <member name="M:RW.UI.Controls.UCCalibration.#ctor">
            <summary>
            初始化构造硬件校准单元
            </summary>
        </member>
        <member name="M:RW.UI.Controls.UCCalibration.SetHardware(RW.Modules.HardwareConfig)">
            <summary>
            设置关联的硬件模块，可以单独申明也可以传入对象
            </summary>
            <param name="hard"></param>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.AsyncClick">
            <summary>
            是否支持异步点击
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.Text">
            <summary>
            显示的标签内容
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.Value">
            <summary>
            当前值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.RawValue">
            <summary>
            原始值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.ZeroValue">
            <summary>
            零点值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.GainValue">
            <summary>
            增益值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.MaxIndex">
            <summary>
            最大的索引号，从1开始，最大999，通常为16或8
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.Index">
            <summary>
            用于多回路时的索引号，不用可不设置,从0开始
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.EnableChannel">
            <summary>
            是否显示Index的选项
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.EnableValue">
            <summary>
            值是否可见
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.SectionName">
            <summary>
            用于保存到Ini中的Section名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.NameTypes">
            <summary>
            配置文件的名称组合方式
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.CustomName">
            <summary>
            自定义配置的名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.FormatName">
            <summary>
            格式化名称可以将SectionName格式化，其中{0}表示sectionName
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.EnableGainConfig">
            <summary>
            是否开启Gain参数从config文件的读写。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.EnableZeroConfig">
            <summary>
            是否开启Zero参数从config文件的读写。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.ValueDecimalPlaces">
            <summary>
            值的小数位数量，默认为4
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.ZeroDecimalPlaces">
            <summary>
            零点的小数位数量，默认为2
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.GainDecimalPlaces">
            <summary>
            增益的小数位数量，默认为3
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.TouchMode">
            <summary>
            触摸板模式
            </summary>
        </member>
        <member name="M:RW.UI.Controls.UCCalibration.ToZero">
            <summary>
            归零点
            </summary>
        </member>
        <member name="M:RW.UI.Controls.UCCalibration.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.InputDriverName">
            <summary>
            驱动名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.InputTagName">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.IsLocal">
            <summary>
            是否是本地计算，默认为本地计算
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.SetLocal">
            <summary>
            实际值是否由本地设置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.InputGainTagName">
            <summary>
            增益点位名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.InputZeroTagName">
            <summary>
            零点点位名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.EnableToZeroButton">
            <summary>
            回零点按钮可见状态
            </summary>
        </member>
        <member name="P:RW.UI.Controls.UCCalibration.EnableResetButton">
            <summary>
            重置按钮可见状态
            </summary>
        </member>
        <member name="M:RW.UI.Controls.UCCalibration.Submit">
            <summary>
            提交修改
            </summary>
        </member>
        <member name="E:RW.UI.Controls.UCCalibration.IndexChanged">
            <summary>
            索引发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.UCCalibration.Submited">
            <summary>
            当调用submit方法或点击确定时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.UCCalibration.ValueChanged">
            <summary>
            值发生改变时，触发的事件。
            </summary>
        </member>
        <member name="E:RW.UI.Controls.UCCalibration.GainValueChanged">
            <summary>
            增益值发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.Controls.UCCalibration.ZeroValueChanged">
            <summary>
            零点值发生改变时触发的事件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.UCCalibration.ToString">
            <summary>
            显示当前的相关设置
            </summary>
            <returns></returns>
        </member>
        <member name="F:RW.UI.Controls.UCCalibration.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.UCCalibration.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.UCCalibration.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.SectionNameTypes">
            <summary>
            配置文件名称的组合方式
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SectionNameTypes.Auto">
            <summary>
            自动方式，自动方式采用控件的Name
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SectionNameTypes.Text">
            <summary>
            以文本为标准
            </summary>
        </member>
        <member name="F:RW.UI.Controls.SectionNameTypes.Custom">
            <summary>
            完全自定的方式，需要指定CustomName属性
            </summary>
        </member>
        <member name="F:RW.UI.Controls.ucCalibrationVibration.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.ucCalibrationVibration.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.ucCalibrationVibration.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.ucNumericalDisplay">
            <summary>
            用于数显的一种控件
            </summary>
        </member>
        <member name="M:RW.UI.Controls.ucNumericalDisplay.#ctor">
            <summary>
            默认创建一个数显控件
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.Font">
            <summary>
            全局字体
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.BorderStyle">
            <summary>
            边框样式
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.Interval">
            <summary>
            给定Value时，数据最快刷新间隔，小于等于0时，可即时刷新，默认1000ms
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.Text">
            <summary>
            显示的标题文本
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.DisplayTitle">
            <summary>
            是否显示标题
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.TitleHeight">
            <summary>
            获取或设置显示标题的高度
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.Value">
            <summary>
            显示的值
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.DecimalNumber">
            <summary>
            小数位
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.Unit">
            <summary>
            显示的单位
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.TextDock">
            <summary>
            文字显示位置
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.FormatString">
            <summary>
            用于数字格式化的字符串.ToString(FormatString)。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.ValueFontName">
            <summary>
            默认采用FX-LED的字体显示值，为空时则使用ValueFont进行渲染
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.ValueFontSize">
            <summary>
            值字体的大小。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.Index">
            <summary>
            显示的索引
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.Label">
            <summary>
            标题名称
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.CustomUnit">
            <summary>
            自定义单位显示
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucNumericalDisplay.SetLocal">
            <summary>
            实际值是否由本地设置
            </summary>
        </member>
        <member name="M:RW.UI.Controls.ucNumericalDisplay.ToString">
            <summary>
            格式化显示控件
            </summary>
            <returns></returns>
        </member>
        <member name="F:RW.UI.Controls.ucNumericalDisplay.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.ucNumericalDisplay.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.ucNumericalDisplay.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:RW.UI.Controls.ucVibration.SensitivityDecimalPlaces">
            <summary>
            灵敏度的小数位数量，默认为2
            </summary>
        </member>
        <member name="F:RW.UI.Controls.ucVibration.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:RW.UI.Controls.ucVibration.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:RW.UI.Controls.ucVibration.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.IndexValueExtender">
            <summary>
            用于关联模块，如BaseSensorGroup，BaseSensor,以及一切基于IIndexValue获IIndexSwitch的控件。
            底层所有的模拟量、数字量显示与控制，都必须实现指定的接口才能使用该方法。
            </summary>
        </member>
        <member name="T:RW.UI.Controls.InputValueExtender">
            <summary>
            主要针对基于MasterBaseModule模块的辅助类，用于支持自定义点位的功能
            </summary>
        </member>
        <member name="T:RW.UI.Controls.IOModuleExtender">
            <summary>
            主要针对基于MasterBaseModule模块的辅助类，用于支持自定义点位的功能
            </summary>
        </member>
        <member name="P:RW.UI.Controls.IOModuleExtender.IsInitialized">
            <summary>
            是否已经初始化
            </summary>
        </member>
        <member name="T:RW.UI.Controls.RWButtonExtender">
            <summary>
            主要功能是将RWButton（Control）与BaseModule控件的某个字段和事件绑定。
            Click事件自动控制BaseModule的变量，并且在ValueChanged事件中自动改变button的属性，使用RWButton更佳。
            但是————  未完成
            需要使用UITypeEditor完成字段展示，反射出属性以及事件，还要找到关联的BaseModule  
            SO  有时间再说吧 2017-04-19 by yuanyong
            </summary>
        </member>
        <member name="T:RW.UI.Controls.UCCalibrationExtender">
            <summary>
            获取或设置校准控件对应的传感器，用于关联UCCalibration控件与传感器控件（包含BaseSensor,BaseSensorGroup,BaseSensorList）
            主要作用与零点增益
            一个模块可对应多个控件，一个控件只能使用一个模块，所以模块和控件的关系为一对多
            </summary>
        </member>
        <member name="M:RW.UI.Controls.UCCalibrationExtender.GetSensor(System.Windows.Forms.Control)">
            <summary>
            获取或设置校准控件对应的传感器
            </summary>
            <param name="control"></param> 
            <returns></returns>
        </member>
        <member name="M:RW.UI.Controls.UCCalibrationExtender.ResetAll">
            <summary>
            重置所有关联了模块的控件
            </summary>
        </member>
        <member name="T:RW.UI.ViewModel.BaseViewModel">
            <summary>
            MVVM模型基类,将会触发IValue事件
            </summary>
        </member>
        <member name="P:RW.UI.ViewModel.HardwareViewModel.Gain">
            <summary>
            零点值
            </summary>
        </member>
        <member name="P:RW.UI.ViewModel.HardwareViewModel.Zero">
            <summary>
            增益值
            </summary>
        </member>
        <member name="E:RW.UI.ViewModel.SwitchViewModel.SwitchChanged">
            <summary>
            开关发生改变时触发的事件
            </summary>
        </member>
        <member name="E:RW.UI.ViewModel.SwitchViewModel.Switching">
            <summary>
            开关发生改变前触发的事件
            </summary>
        </member>
        <member name="P:RW.UI.ViewModel.ValueViewModel.FormatString">
            <summary>
            用于数字格式化的字符串.ToString(FormatString)。
            </summary>
        </member>
        <member name="P:RW.UI.frmLogin.LogoIndex">
            <summary>
            LOGO
            </summary>
        </member>
        <member name="T:RW.UnitEnum">
            <summary>
            单位的枚举，常用的计量单位。不一定齐全。
            </summary>
        </member>
        <member name="T:RW.UnitHelper">
            <summary>
            单位转换帮助类
            </summary>
        </member>
        <member name="M:RW.UnitHelper.GetString(RW.UnitEnum,System.String)">
            <summary>
            根据单位枚举获取字符串
            </summary>
        </member>
        <member name="M:RW.UnitHelper.GetUnit(System.String)">
            <summary>
            根据字符串获取枚举类型
            </summary>
        </member>
        <member name="M:RW.Voices.TTSVoice.Init">
            <summary>
            语音初始化。默认系统选择语音【控制面板-语音】查看
            </summary>
        </member>
        <member name="M:RW.Voices.TTSVoice.Init(System.Int32)">
            <summary>
            语音选择。 0为默认选择的语音，1为列表中下一个语音。【控制面板-语音】查看
            </summary>
            <param name="YYindex"></param>
        </member>
        <member name="M:RW.Voices.TTSVoice.SpeakFlags(System.Int32)">
            <summary>
            异步或同步朗读设置。0异步，1同步。默认为异步。
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:RW.Voices.TTSVoice.Speak(System.String)">
            <summary>
            文字转语音。text：简体中文
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:System.Data.BaseBLLExtender">
            <summary>
            BaseBLL的扩展方法
            改扩展方法主要还是基于了Dapper
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.Get(RW.Components.Core.BLL.BaseBLL,System.Int32)">
            <summary>
            根据ID获取数据，返回DataTable，通常只有一条数据。
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.Get(RW.Components.Core.BLL.BaseBLL,System.String,System.Object)">
            <summary>
            根据指定列名、值获取数据，返回DataTable。
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.Get``1(RW.Components.Core.BLL.BaseBLL,System.Int32)">
            <summary>
            根据ID获取数据并序列化成泛型对象，返回DataTable。（第一条记录）
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.Get``1(RW.Components.Core.BLL.BaseBLL,System.String,System.Object)">
            <summary>
            根据列名、值获取数据并序列化成泛型对象，返回DataTable。（第一条记录）
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.ExecuteNonQuery(RW.Components.Core.BLL.BaseBLL,System.String,System.Object)">
            <summary>
            执行SQL语句，可带参数
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.Remove(RW.Components.Core.BLL.BaseBLL,System.String,System.Object)">
            <summary>
            按条件删除数据
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.RemoveAll(RW.Components.Core.BLL.BaseBLL)">
            <summary>
            清除所有
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.Move(RW.Components.Core.BLL.BaseBLL,System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.String)">
            <summary>
            两条记录相互移动
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.Move(RW.Components.Core.BLL.BaseBLL,System.String,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            移动两条记录
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.Move(RW.Components.Core.BLL.BaseBLL,System.Object,System.Object,System.Object,System.Object,System.String)">
            <summary>
            两条记录相互移动
            </summary>
        </member>
        <member name="M:System.Data.BaseBLLExtender.Move(RW.Components.Core.BLL.BaseBLL,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            两条记录相互移动
            </summary>
        </member>
        <member name="M:System.FormartHelper.Format(System.String,System.Object[])">
            <summary>
            格式化字符串 等同于string.Format
            </summary>
        </member>
        <member name="T:System.MathExtender">
            <summary>
            数学扩展
            </summary>
        </member>
        <member name="M:System.MathExtender.Sub(System.Double,System.Double)">
            <summary>
            浮点数减法
            </summary>
        </member>
        <member name="M:System.MathExtender.Sub(System.Single,System.Single)">
            <summary>
            浮点数减法
            </summary>
        </member>
        <member name="M:System.MathExtender.Sub(System.Single,System.Double)">
            <summary>
            浮点数减法
            </summary>
        </member>
        <member name="M:System.MathExtender.Divide(System.Double,System.Double)">
            <summary>
            浮点数除法
            </summary>
        </member>
        <member name="M:System.MathExtender.Divide(System.Single,System.Single)">
            <summary>
            浮点数除法
            </summary>
        </member>
        <member name="M:System.MathExtender.Divide(System.Single,System.Double)">
            <summary>
            浮点数除法
            </summary>
        </member>
    </members>
</doc>
